// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;
using UpDiddyApi.Models;

namespace UpDiddyApi.Migrations
{
    [DbContext(typeof(UpDiddyDbContext))]
    [Migration("20200626172711_add IsVerified to Skill")]
    partial class addIsVerifiedtoSkill
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UpDiddyApi.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActionGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ActionId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.HiringManager", b =>
                {
                    b.Property<int>("HiringManagerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("HardToFindFillSkillsRoles");

                    b.Property<Guid>("HiringManagerGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("SkillsRolesWeAreAlwaysHiringFor");

                    b.Property<int>("SubscriberId");

                    b.HasKey("HiringManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("HiringManagers","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.InterviewRequest", b =>
                {
                    b.Property<int>("InterviewRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateRequested")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Details");

                    b.Property<int?>("HiringManagerId");

                    b.Property<Guid>("InterviewRequestGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("ProfileId");

                    b.Property<bool>("Successful");

                    b.HasKey("InterviewRequestId");

                    b.HasIndex("HiringManagerId");

                    b.HasIndex("ProfileId");

                    b.ToTable("InterviewRequest","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.Pipeline", b =>
                {
                    b.Property<int>("PipelineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("HiringManagerId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("PipelineGuid");

                    b.HasKey("PipelineId");

                    b.HasIndex("HiringManagerId", "Name", "IsDeleted")
                        .HasName("UIX_Pipeline_HiringManager_Name_IsDeleted");

                    b.ToTable("Pipelines","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.PipelineProfile", b =>
                {
                    b.Property<int>("PipelineProfileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PipelineId");

                    b.Property<Guid>("PipelineProfileGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("PipelineProfileId");

                    b.HasIndex("PipelineId");

                    b.HasIndex("ProfileId", "PipelineId")
                        .IsUnique()
                        .HasName("UIX_PipelineProfile_Profile_Pipeline");

                    b.ToTable("PipelineProfiles","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("Hidden");

                    b.Property<string>("Icon");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Points");

                    b.Property<string>("Slug");

                    b.Property<string>("SortOrder");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("BadgeId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeCourse", b =>
                {
                    b.Property<int>("BadgeCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeCourseGuid");

                    b.Property<string>("CourseId")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Notes");

                    b.Property<int?>("SortOrder");

                    b.HasKey("BadgeCourseId");

                    b.ToTable("BadgeCourse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeEarned", b =>
                {
                    b.Property<int>("BadgeEarnedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeEarnedGuid");

                    b.Property<string>("BadgeId")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEarned");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PointValue");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.HasKey("BadgeEarnedId");

                    b.ToTable("BadgeEarned");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeSet", b =>
                {
                    b.Property<int>("BadgeSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeId");

                    b.Property<Guid?>("BadgeSetGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<bool?>("Hidden");

                    b.Property<string>("Icon");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug");

                    b.Property<int?>("SortOrder");

                    b.HasKey("BadgeSetId");

                    b.ToTable("BadgeSet");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TargetedViewName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Terms");

                    b.HasKey("CampaignId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignCourseVariant", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("CourseVariantId");

                    b.Property<Guid?>("CampaignCourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsEligibleForRebate");

                    b.Property<int?>("MaxRebateEligibilityInDays");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("RebateTypeId");

                    b.Property<int?>("RefundId");

                    b.HasKey("CampaignId", "CourseVariantId");

                    b.HasIndex("CourseVariantId");

                    b.HasIndex("RebateTypeId");

                    b.HasIndex("RefundId");

                    b.ToTable("CampaignCourseVariant");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartner", b =>
                {
                    b.Property<int>("CampaignPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<Guid?>("CampaignPartnerGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EmailDeliveryCap");

                    b.Property<int?>("EmailDeliveryLookbackInHours");

                    b.Property<string>("EmailSubAccountId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EmailTemplateId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsUseSeedEmails")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PartnerId");

                    b.Property<int?>("UnsubscribeGroupId");

                    b.HasKey("CampaignPartnerId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CampaignPartner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartnerContact", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("PartnerContactId");

                    b.Property<Guid?>("CampaignPartnerContactGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("EmailDeliveryDate");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsEmailSent");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("TinyId")
                        .HasColumnType("char(8)");

                    b.HasKey("CampaignId", "PartnerContactId");

                    b.HasIndex("PartnerContactId");

                    b.HasIndex("TinyId")
                        .IsUnique()
                        .HasName("UIX_CampaignPartnerContact_TinyId")
                        .HasFilter("[TinyId] IS NOT NULL");

                    b.ToTable("CampaignPartnerContact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPhase", b =>
                {
                    b.Property<int>("CampaignPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<Guid>("CampaignPhaseGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CampaignPhaseId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignPhase");
                });

            modelBuilder.Entity("UpDiddyApi.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CityGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.HasIndex("StateId", "Name")
                        .IsUnique()
                        .HasName("UIX_City_State_Name");

                    b.ToTable("City");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationSubscription", b =>
                {
                    b.Property<int>("CommunicationSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommunicationSubscriptionGuid");

                    b.Property<int>("CommunicationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("SubscribeDate");

                    b.Property<int>("SubscriberId");

                    b.HasKey("CommunicationSubscriptionId");

                    b.ToTable("CommunicationSubscription");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationTemplate", b =>
                {
                    b.Property<int>("CommunicationTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommunicationTemplateGuid");

                    b.Property<int>("CommunicationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("HtmlTemplate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TextTemplate");

                    b.HasKey("CommunicationTemplateId");

                    b.ToTable("CommunicationTemplate");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationType", b =>
                {
                    b.Property<int>("CommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommuncationDescription");

                    b.Property<Guid?>("CommunciationTypeGuid");

                    b.Property<string>("CommunicationName")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("FrequencyInDays");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CommunicationTypeId");

                    b.ToTable("CommunicationType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommuteDistance", b =>
                {
                    b.Property<int?>("CommuteDistanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CommuteDistanceGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DistanceRange")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CommuteDistanceId");

                    b.ToTable("CommuteDistance");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<string>("CloudTalentUri");

                    b.Property<Guid>("CompanyGuid");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("EmployeeSize");

                    b.Property<int?>("IndustryId");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsHiringAgency");

                    b.Property<int>("IsJobPoster");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("CompanyId");

                    b.HasIndex("IndustryId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CompensationType", b =>
                {
                    b.Property<int>("CompensationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CompensationTypeGuid");

                    b.Property<string>("CompensationTypeName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CompensationTypeId");

                    b.ToTable("CompensationType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ContactGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("SubscriberId");

                    b.HasKey("ContactId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SubscriberId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code2")
                        .IsRequired();

                    b.Property<string>("Code3")
                        .IsRequired();

                    b.Property<Guid?>("CountryGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("OfficialName");

                    b.Property<int>("Sequence");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("CourseDeliveryId");

                    b.Property<Guid?>("CourseGuid");

                    b.Property<int?>("CourseLevelId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("DesktopImage");

                    b.Property<string>("ExternalUrl");

                    b.Property<int?>("Hidden");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsExternal");

                    b.Property<string>("MobileImage");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<string>("TabletImage");

                    b.Property<string>("ThumbnailImage");

                    b.Property<int?>("TopicId");

                    b.Property<int?>("TopicSecondaryId");

                    b.Property<int>("VendorId");

                    b.Property<string>("VideoUrl");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseLevelId");

                    b.HasIndex("VendorId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseDelivery", b =>
                {
                    b.Property<int>("CourseDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CourseDeliveryGuid");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DeliveryDescription");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CourseDeliveryId");

                    b.ToTable("CourseDelivery");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseFavorite", b =>
                {
                    b.Property<int>("CourseFavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseFavoriteGuid");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("CourseFavoriteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CourseFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseLevel", b =>
                {
                    b.Property<int>("CourseLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseLevelGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("CourseLevelId");

                    b.ToTable("CourseLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePage", b =>
                {
                    b.Property<int>("CoursePageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<Guid>("CoursePageGuid");

                    b.Property<int>("CoursePageStatusId");

                    b.Property<int>("CourseSiteId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RawData")
                        .IsRequired();

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("CoursePageId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePageStatusId");

                    b.HasIndex("CourseSiteId");

                    b.HasIndex("UniqueIdentifier", "CourseSiteId")
                        .IsUnique()
                        .HasName("UIX_CoursePage_CourseSite_UniqueIdentifier");

                    b.ToTable("CoursePage");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePageStatus", b =>
                {
                    b.Property<int>("CoursePageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CoursePageStatusGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("CoursePageStatusId");

                    b.ToTable("CoursePageStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReferral", b =>
                {
                    b.Property<int>("CourseReferralId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<Guid>("CourseReferralGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsCourseViewed");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RefereeEmail");

                    b.Property<int?>("RefereeId");

                    b.Property<int>("ReferrerId");

                    b.HasKey("CourseReferralId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("ReferrerId");

                    b.ToTable("CourseReferral");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReview", b =>
                {
                    b.Property<int>("CourseReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovedById");

                    b.Property<int?>("ApprovedToPublish");

                    b.Property<int>("CourseId");

                    b.Property<Guid?>("CourseReviewGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.Property<int>("SubscriberId");

                    b.Property<int>("VerifiedAttended");

                    b.HasKey("CourseReviewId");

                    b.ToTable("CourseReview");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSite", b =>
                {
                    b.Property<int>("CourseSiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseSiteGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsCrawling");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsSyncing");

                    b.Property<DateTime?>("LastCrawl");

                    b.Property<DateTime?>("LastSync");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("CourseSiteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_CourseSite_Name");

                    b.ToTable("CourseSite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSkill", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("SkillId");

                    b.Property<Guid?>("CourseSkillGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CourseId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CourseSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariant", b =>
                {
                    b.Property<int>("CourseVariantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<int>("CourseVariantTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseVariantId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseVariantTypeId");

                    b.ToTable("CourseVariant");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariantPromoCode", b =>
                {
                    b.Property<int>("CourseVariantPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseVariantId");

                    b.Property<Guid?>("CourseVariantPromoCodeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.HasKey("CourseVariantPromoCodeId");

                    b.ToTable("CourseVariantPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariantType", b =>
                {
                    b.Property<int>("CourseVariantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CourseVariantTypeId");

                    b.ToTable("CourseVariantType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.CandidateReference", b =>
                {
                    b.Property<int>("CandidateReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CandidateReferenceGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int>("ReferenceCheckId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("CandidateReferenceId");

                    b.HasIndex("ReferenceCheckId");

                    b.ToTable("CandidateReference","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheck", b =>
                {
                    b.Property<int>("ReferenceCheckId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateJobTitle")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<int>("RecruiterId");

                    b.Property<DateTime?>("ReferenceCheckConcludedDate");

                    b.Property<Guid>("ReferenceCheckGuid");

                    b.Property<string>("ReferenceCheckRequestId")
                        .HasMaxLength(150);

                    b.Property<string>("ReferenceCheckType")
                        .HasMaxLength(100);

                    b.Property<int>("ReferenceCheckVendorId");

                    b.HasKey("ReferenceCheckId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("ReferenceCheckGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheck_ReferenceCheckGuid");

                    b.HasIndex("ReferenceCheckVendorId");

                    b.ToTable("ReferenceCheck","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckReport", b =>
                {
                    b.Property<int>("ReferenceCheckReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64File")
                        .HasColumnType("Varchar(MAX)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("FileUrl")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ReferenceCheckId");

                    b.Property<Guid>("ReferenceCheckReportGuid");

                    b.HasKey("ReferenceCheckReportId");

                    b.HasIndex("ReferenceCheckId");

                    b.ToTable("ReferenceCheckReport","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckStatus", b =>
                {
                    b.Property<int>("ReferenceCheckStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Progress");

                    b.Property<int>("ReferenceCheckId");

                    b.Property<Guid>("ReferenceCheckStatusGuid");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("VendorJsonResponse")
                        .HasMaxLength(4000);

                    b.HasKey("ReferenceCheckStatusId");

                    b.HasIndex("ReferenceCheckId");

                    b.HasIndex("ReferenceCheckStatusGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckStatus_ReferenceCheckStatusGuid");

                    b.ToTable("ReferenceCheckStatus","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckVendor", b =>
                {
                    b.Property<int>("ReferenceCheckVendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("ReferenceCheckVendorGuid");

                    b.HasKey("ReferenceCheckVendorId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckVendor_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ReferenceCheckVendorGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckVendor_ReferenceCheckVendorGuid");

                    b.ToTable("ReferenceCheckVendor","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EducationLevelGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Level")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationLevelId");

                    b.ToTable("EducationLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalDegree", b =>
                {
                    b.Property<int>("EducationalDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Degree");

                    b.Property<Guid>("EducationalDegreeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationalDegreeId");

                    b.ToTable("EducationalDegree");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalDegreeType", b =>
                {
                    b.Property<int>("EducationalDegreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DegreeType");

                    b.Property<Guid>("EducationalDegreeTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationalDegreeTypeId");

                    b.ToTable("EducationalDegreeType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalInstitution", b =>
                {
                    b.Property<int>("EducationalInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EducationalInstitutionGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("EducationalInstitutionId");

                    b.ToTable("EducationalInstitution");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EmailTemplateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<string>("SendGridSubAccount");

                    b.Property<string>("SendGridTemplateId");

                    b.Property<string>("TemplateParams");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailVerification", b =>
                {
                    b.Property<int>("EmailVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("EmailVerificationGuid");

                    b.Property<DateTime>("ExpirationDateTime");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("Token");

                    b.HasKey("EmailVerificationId");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("EmailVerification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EmploymentTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampaignId");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<int>("CourseId");

                    b.Property<int?>("CourseVariantId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEnrolled");

                    b.Property<DateTime?>("DroppedDate");

                    b.Property<Guid?>("EnrollmentGuid");

                    b.Property<int>("EnrollmentStatusId");

                    b.Property<int?>("Grade");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("IsRetake");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PercentComplete");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("SectionStartTimestamp");

                    b.Property<int>("SubscriberId");

                    b.Property<int?>("TermsOfServiceFlag");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("CampaignId", "CourseVariantId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EnrollmentLog", b =>
                {
                    b.Property<int>("EnrollmentLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CourseCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CourseGuid");

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<Guid>("EnrollmentLogGuid");

                    b.Property<DateTime>("EnrollmentTime");

                    b.Property<int>("EnrollmentVendorInvoicePaymentMonth");

                    b.Property<int>("EnrollmentVendorInvoicePaymentYear");

                    b.Property<int>("EnrollmentVendorPaymentStatusId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<decimal>("PromoApplied")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubscriberGuid");

                    b.HasKey("EnrollmentLogId");

                    b.ToTable("EnrollmentLog");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EnrollmentStatus", b =>
                {
                    b.Property<int>("EnrollmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid?>("EnrollmentStatusGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("EnrollmentStatusId");

                    b.ToTable("EnrollmentStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EntityType", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("EntityTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ExperienceLevel", b =>
                {
                    b.Property<int>("ExperienceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DisplayName");

                    b.Property<Guid>("ExperienceLevelGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.FileDownloadTracker", b =>
                {
                    b.Property<int>("FileDownloadTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("FileDownloadAttemptCount");

                    b.Property<Guid?>("FileDownloadTrackerGuid");

                    b.Property<int?>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxFileDownloadAttemptsPermitted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("MostrecentfiledownloadAttemptinUtc");

                    b.Property<string>("SourceFileCDNUrl");

                    b.Property<int>("SubscriberId");

                    b.HasKey("FileDownloadTrackerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("FileDownloadTracker");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.AzureIndexStatus", b =>
                {
                    b.Property<int>("AzureIndexStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AzureIndexStatusGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("AzureIndexStatusId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_AzureIndexStatus_Name");

                    b.ToTable("AzureIndexStatuses","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ContactTypeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("Sequence");

                    b.HasKey("ContactTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_ContactType_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ContactTypes","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AzureIndexStatusId");

                    b.Property<string>("AzureSearchIndexInfo");

                    b.Property<int?>("CityId");

                    b.Property<int>("CompanyId");

                    b.Property<int?>("ContactTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<decimal?>("CurrentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DesiredRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<int?>("ExperienceLevelId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("Goals")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsActiveJobSeeker");

                    b.Property<bool?>("IsCurrentlyEmployed");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsWillingToRelocate");

                    b.Property<bool?>("IsWillingToTravel");

                    b.Property<bool?>("IsWillingToWorkProBono");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("PostalId");

                    b.Property<string>("Preferences")
                        .HasMaxLength(500);

                    b.Property<Guid>("ProfileGuid");

                    b.Property<string>("SkillsNote")
                        .HasMaxLength(500);

                    b.Property<int?>("StateId");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(100);

                    b.Property<int>("SubscriberId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ProfileId");

                    b.HasIndex("AzureIndexStatusId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("PostalId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubscriberId", "CompanyId")
                        .IsUnique()
                        .HasName("UIX_Profile_Subscriber_Company");

                    b.ToTable("Profiles","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileComment", b =>
                {
                    b.Property<int>("ProfileCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsVisibleToCompany");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileCommentGuid");

                    b.Property<int>("ProfileId");

                    b.Property<int>("RecruiterId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2500);

                    b.HasKey("ProfileCommentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("ProfileComments","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileDocument", b =>
                {
                    b.Property<int>("ProfileDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileDocumentGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("ProfileDocumentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileDocuments","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileEmploymentType", b =>
                {
                    b.Property<int>("ProfileEmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("EmploymentTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileEmploymentTypeGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("ProfileEmploymentTypeId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("ProfileId", "EmploymentTypeId")
                        .IsUnique()
                        .HasName("UIX_ProfileEmploymentType_Profile_EmploymentType");

                    b.ToTable("ProfileEmploymentTypes","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSearchLocation", b =>
                {
                    b.Property<int>("ProfileSearchLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PostalId");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileSearchLocationGuid");

                    b.Property<int>("SearchRadius");

                    b.Property<int?>("StateId");

                    b.HasKey("ProfileSearchLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("PostalId");

                    b.HasIndex("StateId");

                    b.HasIndex("ProfileId", "CityId", "PostalId")
                        .IsUnique()
                        .HasName("UIX_ProfileSearchLocation_Profile_City_Postal")
                        .HasFilter("[CityId] IS NOT NULL AND [PostalId] IS NOT NULL");

                    b.ToTable("ProfileSearchLocations","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSkill", b =>
                {
                    b.Property<int>("ProfileSkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileSkillGuid");

                    b.Property<int>("SkillId");

                    b.HasKey("ProfileSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("ProfileId", "SkillId")
                        .IsUnique()
                        .HasName("UIX_ProfileSkill_Profile_Skill");

                    b.ToTable("ProfileSkills","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileTag", b =>
                {
                    b.Property<int>("ProfileTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileTagGuid");

                    b.Property<int>("TagId");

                    b.HasKey("ProfileTagId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TagId", "ProfileId")
                        .IsUnique()
                        .HasName("UIX_ProfileTag_Profile_Tag");

                    b.ToTable("ProfileTags","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileWishlist", b =>
                {
                    b.Property<int>("ProfileWishlistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileWishlistGuid");

                    b.Property<int>("WishlistId");

                    b.HasKey("ProfileWishlistId");

                    b.HasIndex("WishlistId");

                    b.HasIndex("ProfileId", "WishlistId")
                        .IsUnique()
                        .HasName("UIX_ProfileWishlist_Profile_Wishlist");

                    b.ToTable("ProfileWishlists","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("RecruiterId");

                    b.Property<Guid>("WishlistGuid");

                    b.HasKey("WishlistId");

                    b.HasIndex("RecruiterId", "Name", "IsDeleted")
                        .HasName("UIX_Wishlist_Recruiter_Name_IsDeleted");

                    b.ToTable("Wishlists","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid?>("GenderGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("SexualIdentification")
                        .IsRequired();

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid>("GroupGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsLeavable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Path");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("UpDiddyApi.Models.GroupPartner", b =>
                {
                    b.Property<int>("GroupPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<Guid>("GroupPartnerGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PartnerId");

                    b.HasKey("GroupPartnerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PartnerId");

                    b.ToTable("GroupPartner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.HiringSolvedResumeParse", b =>
                {
                    b.Property<int>("HiringSolvedResumeParseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("FileName");

                    b.Property<Guid>("HiringSolvedResumeParseGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("JobId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<long>("NumTicks");

                    b.Property<DateTime?>("ParseCompleted");

                    b.Property<DateTime?>("ParseRequested");

                    b.Property<string>("ParseStatus");

                    b.Property<string>("ParsedResume");

                    b.Property<string>("ResumeText");

                    b.Property<int>("SubscriberId");

                    b.HasKey("HiringSolvedResumeParseId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("HiringSolvedResumeParse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("IndustryGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("IndustryId");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplication", b =>
                {
                    b.Property<int>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverLetter");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobApplicationGuid");

                    b.Property<int>("JobApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("JobPostingId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PartnerId");

                    b.Property<int>("SubscriberId");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("JobApplicationStatusId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplicationStatus", b =>
                {
                    b.Property<int>("JobApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobApplicationStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Status");

                    b.HasKey("JobApplicationStatusId");

                    b.ToTable("JobApplicationStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobCategoryGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPage", b =>
                {
                    b.Property<int>("JobPageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPageGuid");

                    b.Property<int>("JobPageStatusId");

                    b.Property<int?>("JobPostingId");

                    b.Property<int>("JobSiteId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RawData")
                        .IsRequired();

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("JobPageId");

                    b.HasIndex("JobPageStatusId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("JobSiteId");

                    b.HasIndex("UniqueIdentifier", "JobSiteId")
                        .IsUnique()
                        .HasName("UIX_JobPage_JobSite_UniqueIdentifier");

                    b.ToTable("JobPage");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPageStatus", b =>
                {
                    b.Property<int>("JobPageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPageStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("JobPageStatusId");

                    b.ToTable("JobPageStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPosting", b =>
                {
                    b.Property<int>("JobPostingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDeadlineUTC");

                    b.Property<string>("City");

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<string>("CloudTalentUri");

                    b.Property<int?>("CompanyId");

                    b.Property<decimal>("Compensation");

                    b.Property<int?>("CompensationTypeId");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int?>("EducationLevelId");

                    b.Property<int?>("EmploymentTypeId");

                    b.Property<int?>("ExperienceLevelId");

                    b.Property<bool>("H2Visa");

                    b.Property<int?>("IndustryId");

                    b.Property<bool>("IsAgencyJobPosting");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsPrivate");

                    b.Property<int?>("JobCategoryId");

                    b.Property<Guid>("JobPostingGuid");

                    b.Property<int>("JobStatus");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("PostalId");

                    b.Property<DateTime>("PostingDateUTC");

                    b.Property<DateTime>("PostingExpirationDateUTC");

                    b.Property<string>("Province");

                    b.Property<int?>("RecruiterId");

                    b.Property<int?>("SecurityClearanceId");

                    b.Property<string>("StreetAddress");

                    b.Property<int>("TelecommutePercentage");

                    b.Property<string>("ThirdPartyApplicationUrl");

                    b.Property<bool>("ThirdPartyApply");

                    b.Property<string>("ThirdPartyIdentifier");

                    b.Property<string>("Title");

                    b.HasKey("JobPostingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompensationTypeId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("PostalId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("SecurityClearanceId");

                    b.HasIndex("IsDeleted", "JobPostingGuid")
                        .HasName("IX_JobPosting_IsDeletedJobPostingGuid");

                    b.ToTable("JobPosting");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingAlert", b =>
                {
                    b.Property<int>("JobPostingAlertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ExecutionDayOfWeek")
                        .HasMaxLength(10);

                    b.Property<int>("ExecutionHour");

                    b.Property<int>("ExecutionMinute");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPostingAlertGuid");

                    b.Property<string>("JobQueryDtoJSON")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("JobPostingAlertId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobPostingAlert");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingFavorite", b =>
                {
                    b.Property<int>("JobPostingId");

                    b.Property<int>("SubscriberId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPostingFavoriteGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("JobPostingId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobPostingFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingSkill", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<int>("JobPostingId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid?>("JobPostingSkillGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("SkillId", "JobPostingId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("JobPostingSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobReferral", b =>
                {
                    b.Property<int>("JobReferralId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsJobViewed");

                    b.Property<int>("JobPostingId");

                    b.Property<Guid>("JobReferralGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RefereeEmailId");

                    b.Property<int?>("RefereeId");

                    b.Property<int>("ReferralId");

                    b.HasKey("JobReferralId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("ReferralId");

                    b.ToTable("JobReferral");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSite", b =>
                {
                    b.Property<int>("JobSiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CrawlDelayInMilliseconds");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobSiteGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal?>("PercentageReductionThreshold")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("JobSiteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_JobSite_Name");

                    b.ToTable("JobSite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSiteScrapeStatistic", b =>
                {
                    b.Property<int>("JobSiteScrapeStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("JobSiteId");

                    b.Property<Guid>("JobSiteScrapeStatisticGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumJobsAdded");

                    b.Property<int>("NumJobsDropped");

                    b.Property<int>("NumJobsErrored");

                    b.Property<int>("NumJobsProcessed");

                    b.Property<int>("NumJobsUpdated");

                    b.Property<DateTime>("ScrapeDate");

                    b.HasKey("JobSiteScrapeStatisticId");

                    b.HasIndex("JobSiteId");

                    b.ToTable("JobSiteScrapeStatistic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.LeadStatus", b =>
                {
                    b.Property<int>("LeadStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid?>("LeadStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<string>("Severity")
                        .IsRequired();

                    b.HasKey("LeadStatusId");

                    b.ToTable("LeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.LinkedInToken", b =>
                {
                    b.Property<int>("LinkedInTokenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<DateTime>("AccessTokenExpiry");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("LinkedInTokenId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("LinkedInToken");
                });

            modelBuilder.Entity("UpDiddyApi.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateActive");

                    b.Property<string>("ExternalLink");

                    b.Property<string>("Headline")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("NewsGuid");

                    b.Property<int>("NewsTypeId");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("SubText")
                        .IsRequired();

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("UpDiddyApi.Models.NewsType", b =>
                {
                    b.Property<int>("NewsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("NewsClassification")
                        .IsRequired();

                    b.Property<Guid?>("NewsTypeGuid");

                    b.HasKey("NewsTypeId");

                    b.ToTable("NewsType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsTargeted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("NotificationGuid");

                    b.Property<DateTime?>("SentDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.NotificationGroup", b =>
                {
                    b.Property<int>("NotificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("NotificationGroupGuid");

                    b.Property<int>("NotificationId");

                    b.HasKey("NotificationGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationGroupId", "GroupId")
                        .IsUnique()
                        .HasName("UIX_NotificationGroup_Group");

                    b.ToTable("NotificationGroup");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("Disclaimer");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<Guid>("OfferGuid");

                    b.Property<int>("PartnerId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Url");

                    b.HasKey("OfferId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiToken");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PartnerGuid");

                    b.Property<int?>("PartnerTypeId");

                    b.HasKey("PartnerId");

                    b.HasIndex("PartnerTypeId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContact", b =>
                {
                    b.Property<int>("PartnerContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool?>("IsBillable");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MetaDataJSON");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactGuid");

                    b.Property<int>("PartnerId");

                    b.Property<string>("SourceSystemIdentifier");

                    b.HasKey("PartnerContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PartnerContactGuid")
                        .IsUnique()
                        .HasName("UIX_PartnerContact_PartnerContactGuid")
                        .HasFilter("[PartnerContactGuid] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerContact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactAction", b =>
                {
                    b.Property<int>("PartnerContactId");

                    b.Property<int>("CampaignId");

                    b.Property<int>("ActionId");

                    b.Property<int>("CampaignPhaseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Headers");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("PartnerContactActionGuid");

                    b.HasKey("PartnerContactId", "CampaignId", "ActionId", "CampaignPhaseId");

                    b.HasIndex("ActionId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignPhaseId");

                    b.ToTable("PartnerContactAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFile", b =>
                {
                    b.Property<int>("PartnerContactFileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64EncodedData")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsBillable");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MimeType")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PartnerContactFileGuid");

                    b.Property<int>("PartnerContactId");

                    b.HasKey("PartnerContactFileId");

                    b.HasIndex("PartnerContactId");

                    b.ToTable("PartnerContactFile");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFileLeadStatus", b =>
                {
                    b.Property<int>("PartnerContactFileId");

                    b.Property<int>("LeadStatusId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactFileLeadStatusGuid");

                    b.HasKey("PartnerContactFileId", "LeadStatusId");

                    b.HasIndex("LeadStatusId");

                    b.ToTable("PartnerContactFileLeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactLeadStatus", b =>
                {
                    b.Property<int>("PartnerContactId");

                    b.Property<int>("LeadStatusId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactLeadStatusGuid");

                    b.HasKey("PartnerContactId", "LeadStatusId");

                    b.HasIndex("LeadStatusId");

                    b.ToTable("PartnerContactLeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerReferrer", b =>
                {
                    b.Property<int>("PartnerReferrerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartnerId");

                    b.Property<string>("Path")
                        .HasColumnType("varchar(3000)");

                    b.HasKey("PartnerReferrerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerReferrer");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerType", b =>
                {
                    b.Property<int>("PartnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PartnerTypeGuid");

                    b.HasKey("PartnerTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PartnerType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerWebRedirect", b =>
                {
                    b.Property<int>("PartnerId");

                    b.Property<string>("RelativePath");

                    b.HasKey("PartnerId");

                    b.ToTable("PartnerWebRedirect");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PasswordResetRequest", b =>
                {
                    b.Property<int>("PasswordResetRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("PasswordResetRequestGuid");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<DateTime?>("ResetDate");

                    b.Property<int>("SubscriberId");

                    b.HasKey("PasswordResetRequestId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PasswordResetRequest");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<int>("PaymentBatchId");

                    b.Property<string>("PaymentCurrencyType");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<Guid?>("PaymentGuid");

                    b.Property<string>("PaymentNonce");

                    b.Property<int>("PaymentProcessorId");

                    b.Property<int>("PaymentStatus");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentBatch", b =>
                {
                    b.Property<int>("PaymentBatchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentBatchGuid");

                    b.Property<string>("Status");

                    b.HasKey("PaymentBatchId");

                    b.ToTable("PaymentBatch");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentProcessor", b =>
                {
                    b.Property<int>("PaymentProcessorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentProcessorGuid");

                    b.HasKey("PaymentProcessorId");

                    b.ToTable("PaymentProcessor");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentStatusGuid");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Postal", b =>
                {
                    b.Property<int>("PostalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PostalGuid");

                    b.HasKey("PostalId");

                    b.HasIndex("CityId", "Code")
                        .IsUnique()
                        .HasName("UIX_Postal_City_Code");

                    b.ToTable("Postal");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("MaxAllowedNumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("MaxNumberOfRedemptionsPerSubscriber");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("PromoCodeGuid");

                    b.Property<string>("PromoDescription");

                    b.Property<DateTime>("PromoEndDate");

                    b.Property<string>("PromoName")
                        .IsRequired();

                    b.Property<DateTime>("PromoStartDate");

                    b.Property<int>("PromoTypeId");

                    b.Property<decimal>("PromoValueFactor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoCodeId");

                    b.HasIndex("PromoTypeId");

                    b.ToTable("PromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCodeRedemption", b =>
                {
                    b.Property<int>("PromoCodeRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseVariantId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PromoCodeId");

                    b.Property<Guid>("PromoCodeRedemptionGuid");

                    b.Property<DateTime?>("RedemptionDate");

                    b.Property<string>("RedemptionNotes");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<int>("SubscriberId");

                    b.Property<decimal>("ValueRedeemed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoCodeRedemptionId");

                    b.HasIndex("CourseVariantId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PromoCodeRedemption");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoType", b =>
                {
                    b.Property<int>("PromoTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PromoTypeGuid");

                    b.HasKey("PromoTypeId");

                    b.ToTable("PromoType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RebateType", b =>
                {
                    b.Property<int>("RebateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("RebateTypeGuid");

                    b.Property<string>("Terms");

                    b.HasKey("RebateTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RebateType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("RecruiterGuid");

                    b.Property<int?>("SubscriberId");

                    b.HasKey("RecruiterId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterAction", b =>
                {
                    b.Property<int>("RecruiterActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EntityId");

                    b.Property<int?>("EntityTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("RecruiterActionGuid");

                    b.Property<int>("RecruiterId");

                    b.HasKey("RecruiterActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("RecruiterAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterCompany", b =>
                {
                    b.Property<int>("RecruiterCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("RecruiterCompanyGuid");

                    b.Property<int>("RecruiterId");

                    b.HasKey("RecruiterCompanyId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("CompanyId", "RecruiterId")
                        .IsUnique()
                        .HasName("UIX_RecruiterCompany_Recruiter_Company");

                    b.ToTable("RecruiterCompany");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RedemptionStatus", b =>
                {
                    b.Property<int>("RedemptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("RedemptionStatusGuid");

                    b.HasKey("RedemptionStatusId");

                    b.ToTable("RedemptionStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnrollmentId");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RefundGuid");

                    b.Property<DateTime>("RefundIssueDate");

                    b.Property<int>("RefundIssueStatus");

                    b.Property<int>("RefundIssued");

                    b.HasKey("RefundId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ReportEnrollmentByVendor", b =>
                {
                    b.Property<int>("ReportEnrollmentByVendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoursesCompletedCount");

                    b.Property<int>("CoursesDroppedCount");

                    b.Property<int>("EnrollmentsCompleted");

                    b.Property<int>("Month");

                    b.Property<int>("PromoCodesRedeemedCount");

                    b.Property<Guid?>("ReportEnrollmentByVendorGuid");

                    b.Property<decimal>("TotalRefundsIssued")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenueIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSplitOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId");

                    b.Property<int>("Year");

                    b.HasKey("ReportEnrollmentByVendorId");

                    b.ToTable("ReportEnrollmentByVendors");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParse", b =>
                {
                    b.Property<int>("ResumeParseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ParseStatus");

                    b.Property<int>("RequiresMerge");

                    b.Property<Guid>("ResumeParseGuid");

                    b.Property<int>("SubscriberFileId");

                    b.Property<int>("SubscriberId");

                    b.HasKey("ResumeParseId");

                    b.HasIndex("SubscriberFileId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ResumeParse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParseResult", b =>
                {
                    b.Property<int>("ResumeParseResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("ExistingObjectGuid");

                    b.Property<string>("ExistingValue");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ParseStatus");

                    b.Property<string>("ParsedValue");

                    b.Property<string>("ProcessingMessage");

                    b.Property<int>("ProfileSectionId");

                    b.Property<string>("Prompt");

                    b.Property<int>("ResumeParseId");

                    b.Property<Guid>("ResumeParseResultGuid");

                    b.Property<string>("TargetProperty");

                    b.Property<string>("TargetTypeName");

                    b.HasKey("ResumeParseResultId");

                    b.HasIndex("ResumeParseId");

                    b.ToTable("ResumeParseResult");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SalesForceSignUpList", b =>
                {
                    b.Property<int>("SalesForceSignUpListId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("SalesForceSignUpListGuid");

                    b.HasKey("SalesForceSignUpListId");

                    b.ToTable("SalesForceSignUpList");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SecurityClearance", b =>
                {
                    b.Property<int>("SecurityClearanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<Guid>("SecurityClearanceGuid");

                    b.HasKey("SecurityClearanceId");

                    b.ToTable("SecurityClearance");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SendGridEvent", b =>
                {
                    b.Property<int>("SendGridEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attempt");

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("Event");

                    b.Property<string>("Ip");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Marketing_campaign_id");

                    b.Property<string>("Marketing_campaign_name");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Reason");

                    b.Property<string>("Response");

                    b.Property<Guid?>("SendGridEventGuid");

                    b.Property<string>("Sg_event_id");

                    b.Property<string>("Sg_message_id");

                    b.Property<string>("Smtp_id");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<long>("Timestamp");

                    b.Property<string>("Tls");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<string>("UserAgent");

                    b.HasKey("SendGridEventId");

                    b.ToTable("SendGridEvent");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOffering", b =>
                {
                    b.Property<int>("ServiceOfferingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceOfferingGuid");

                    b.Property<int>("SortOrder");

                    b.HasKey("ServiceOfferingId");

                    b.ToTable("ServiceOffering");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingItem", b =>
                {
                    b.Property<int>("ServiceOfferingItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingItemGuid");

                    b.Property<int>("SortOrder");

                    b.HasKey("ServiceOfferingItemId");

                    b.HasIndex("ServiceOfferingId");

                    b.ToTable("ServiceOfferingItem");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingOrder", b =>
                {
                    b.Property<int>("ServiceOfferingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizationInfo");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PercentCommplete");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingOrderGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("ServiceOfferingOrderId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("ServiceOfferingId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ServiceOfferingOrder");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCode", b =>
                {
                    b.Property<int>("ServiceOfferingPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions");

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid?>("ServiceOfferingPromoCodeGuid");

                    b.HasKey("ServiceOfferingPromoCodeId");

                    b.ToTable("ServiceOfferingPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCodeRedemption", b =>
                {
                    b.Property<int>("ServiceOfferingPromoCodeRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PromoCodeId");

                    b.Property<DateTime?>("RedemptionDate");

                    b.Property<string>("RedemptionNotes");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingPromoCodeRedemptionGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<decimal>("ValueRedeemed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceOfferingPromoCodeRedemptionId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("ServiceOfferingId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ServiceOfferingPromoCodeRedemption");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("SkillGuid");

                    b.Property<string>("SkillName")
                        .IsRequired();

                    b.HasKey("SkillId");

                    b.HasIndex("SkillName")
                        .IsUnique();

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SovrenParseStatistic", b =>
                {
                    b.Property<int>("SovrenParseStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<long>("NumTicks");

                    b.Property<string>("ResumeText");

                    b.Property<Guid>("SovrenParseStatisticsGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SovrenParseStatisticId");

                    b.ToTable("SovrenParseStatistics");
                });

            modelBuilder.Entity("UpDiddyApi.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Sequence");

                    b.Property<Guid?>("StateGuid");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Subscriber", b =>
                {
                    b.Property<int>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Auth0UserId")
                        .HasMaxLength(100);

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("Biography");

                    b.Property<string>("City");

                    b.Property<Guid?>("CityGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetCityGuidForSubscriber]([City], [StateId])");

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<int>("CloudTalentIndexVersion");

                    b.Property<string>("CloudTalentUri");

                    b.Property<int?>("CommuteDistanceId");

                    b.Property<string>("ConnectedId");

                    b.Property<DateTime?>("ConnectedModifyDate");

                    b.Property<string>("CoverLetter");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("CurrentRoleProficiencies");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DreamJob");

                    b.Property<int?>("EducationLevelId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FacebookUrl");

                    b.Property<string>("FirstName");

                    b.Property<int?>("GenderId");

                    b.Property<string>("GithubUrl");

                    b.Property<int>("HasOnboarded");

                    b.Property<DateTime?>("HubSpotModifyDate");

                    b.Property<long?>("HubSpotVid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsFlexibleWorkScheduleRequired");

                    b.Property<bool>("IsVerified")
                        .HasColumnName("IsEmailVerifiedLegacy");

                    b.Property<bool?>("IsWillingToTravel");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastSignIn");

                    b.Property<string>("LinkedInAvatarUrl");

                    b.Property<DateTime?>("LinkedInSyncDate");

                    b.Property<string>("LinkedInUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<bool>("NotificationEmailsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("PassionProjectsDescription");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("PostalGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetPostalGuidForSubscriber]([PostalCode], [City], [StateId])");

                    b.Property<string>("PreferredLeaderStyle");

                    b.Property<string>("PreferredTeamType");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("StackOverflowUrl");

                    b.Property<Guid?>("StateGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetStateGuidForSubscriber]([StateId])");

                    b.Property<int?>("StateId");

                    b.Property<Guid?>("SubscriberGuid");

                    b.Property<string>("Title");

                    b.Property<int?>("TopicId");

                    b.Property<string>("TwitterUrl");

                    b.HasKey("SubscriberId");

                    b.HasIndex("CommuteDistanceId");

                    b.HasIndex("StateId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberAction", b =>
                {
                    b.Property<int>("SubscriberActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EntityId");

                    b.Property<int?>("EntityTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SubscriberActionGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEducationHistory", b =>
                {
                    b.Property<int>("SubscriberEducationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("DegreeDate");

                    b.Property<int?>("EducationalDegreeId");

                    b.Property<int?>("EducationalDegreeTypeId");

                    b.Property<int>("EducationalInstitutionId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("SubscriberEducationHistoryGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberEducationHistoryId");

                    b.HasIndex("EducationalDegreeId");

                    b.HasIndex("EducationalDegreeTypeId");

                    b.HasIndex("EducationalInstitutionId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberEducationHistory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEmploymentTypes", b =>
                {
                    b.Property<int>("SubscriberEmploymentTypesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("EmploymentTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberEmploymentTypesGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberEmploymentTypesId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("SubscriberId", "EmploymentTypeId")
                        .IsUnique()
                        .HasName("UIX_SubscriberEmploymentTypes_Subscriber_EmploymentType");

                    b.ToTable("SubscriberEmploymentTypes");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberFile", b =>
                {
                    b.Property<int>("SubscriberFileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberFileGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberFileId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberFile");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberGroup", b =>
                {
                    b.Property<int>("SubscriberGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberGroupGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberGroup");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLink", b =>
                {
                    b.Property<int>("SubscriberLinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Label")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberLinkGuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("SubscriberLinkId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberLinks");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotes", b =>
                {
                    b.Property<int>("SubscriberNotesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Notes");

                    b.Property<int>("RecruiterId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberNotesGuid");

                    b.Property<bool>("ViewableByOthersInRecruiterCompany");

                    b.HasKey("SubscriberNotesId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberNotes");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotification", b =>
                {
                    b.Property<int>("SubscriberNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("HasRead");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NotificationId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberNotificationGuid");

                    b.HasKey("SubscriberNotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberNotification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberProfileStagingStore", b =>
                {
                    b.Property<int>("SubscriberProfileStagingStoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ProfileData");

                    b.Property<string>("ProfileFormat");

                    b.Property<string>("ProfileSource");

                    b.Property<int>("Status");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberProfileStagingStoreId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberProfileStagingStore");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberPromoCode", b =>
                {
                    b.Property<int>("SubscriberPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid?>("SubscriberPromoCodeGuid");

                    b.HasKey("SubscriberPromoCodeId");

                    b.ToTable("SubscriberPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSendGridEvent", b =>
                {
                    b.Property<int>("SubscriberSendGridEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attempt");

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("Event");

                    b.Property<int>("EventStatus");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Marketing_campaign_id");

                    b.Property<string>("Marketing_campaign_name");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Reason");

                    b.Property<string>("Response");

                    b.Property<string>("Sg_message_id");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<int?>("SubscriberId");

                    b.Property<Guid>("SubscriberSendGridEventGuid");

                    b.Property<string>("Type");

                    b.HasKey("SubscriberSendGridEventId");

                    b.ToTable("SubscriberSendGridEvent");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSkill", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<int>("SubscriberId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("SubscriberSkillGuid");

                    b.HasKey("SkillId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberWorkHistory", b =>
                {
                    b.Property<int>("SubscriberWorkHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<decimal>("Compensation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CompensationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsCurrent");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("JobDescription");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberWorkHistoryGuid");

                    b.Property<string>("Title");

                    b.HasKey("SubscriberWorkHistoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompensationTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberWorkHistory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TagGuid");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TagCourse", b =>
                {
                    b.Property<int>("TagCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("TagCourseGuid");

                    b.Property<int>("TagId");

                    b.HasKey("TagCourseId");

                    b.ToTable("TagCourse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TagTopic", b =>
                {
                    b.Property<int>("TagTopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("TagId");

                    b.Property<Guid?>("TagTopicGuid");

                    b.Property<int>("TopicId");

                    b.HasKey("TagTopicId");

                    b.ToTable("TagTopic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TalentFavorite", b =>
                {
                    b.Property<int>("TalentFavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("TalentFavoriteGuid");

                    b.Property<int>("TalentId");

                    b.HasKey("TalentFavoriteId");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("TalentId");

                    b.ToTable("TalentFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("DesktopImage");

                    b.Property<int?>("Hidden");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MobileImage");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<string>("TabletImage");

                    b.Property<Guid?>("TopicGuid");

                    b.HasKey("TopicId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Traitify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentId");

                    b.Property<DateTime?>("CompleteDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DeckId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ResultData");

                    b.Property<int>("ResultLength");

                    b.Property<int?>("SubscriberId");

                    b.Property<Guid>("TraitifyGuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Traitify");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TraitifyCourseTopicBlendMapping", b =>
                {
                    b.Property<int>("TraitifyCourseTopicBlendMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PersonalityTypeOne");

                    b.Property<string>("PersonalityTypeTwo");

                    b.Property<string>("TopicOneImgUrl");

                    b.Property<string>("TopicOneName");

                    b.Property<string>("TopicOneUrl");

                    b.Property<string>("TopicThreeImgUrl");

                    b.Property<string>("TopicThreeName");

                    b.Property<string>("TopicThreeUrl");

                    b.Property<string>("TopicTwoImgUrl");

                    b.Property<string>("TopicTwoName");

                    b.Property<string>("TopicTwoUrl");

                    b.Property<Guid>("TraitifyCourseTopicBlendMappingGuid");

                    b.HasKey("TraitifyCourseTopicBlendMappingId");

                    b.ToTable("TraitifyBlendCourseTopicMapping");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LoginUrl");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("VendorGuid");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorPromoCode", b =>
                {
                    b.Property<int>("VendorPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("VendorId");

                    b.Property<Guid?>("VendorPromoCodeGuid");

                    b.HasKey("VendorPromoCodeId");

                    b.ToTable("VendorPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorStudentLogin", b =>
                {
                    b.Property<int>("VendorStudentLoginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RegistrationUrl");

                    b.Property<int>("SubscriberId");

                    b.Property<int>("VendorId");

                    b.Property<string>("VendorLogin");

                    b.HasKey("VendorStudentLoginId");

                    b.ToTable("VendorStudentLogin");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorTermsOfService", b =>
                {
                    b.Property<int>("VendorTermsOfServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEffective");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("VendorId");

                    b.Property<Guid?>("VendorTermsOfServiceGuid");

                    b.HasKey("VendorTermsOfServiceId");

                    b.ToTable("VendorTermsOfService");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozCourseEnrollment", b =>
                {
                    b.Property<int>("WozCourseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<long>("EnrollmentDateUTC");

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<int>("EnrollmentStatus");

                    b.Property<int>("ExeterId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SectionId");

                    b.Property<int>("WozEnrollmentId");

                    b.HasKey("WozCourseEnrollmentId");

                    b.ToTable("WozCourseEnrollment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozCourseSection", b =>
                {
                    b.Property<int>("WozCourseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Month");

                    b.Property<int>("Section");

                    b.Property<int>("Year");

                    b.HasKey("WozCourseSectionId");

                    b.ToTable("WozCourseSection");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozTermsOfService", b =>
                {
                    b.Property<int>("WozTermsOfServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("DocumentId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("TermsOfService");

                    b.HasKey("WozTermsOfServiceId");

                    b.ToTable("WozTermsOfService");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozTransactionLog", b =>
                {
                    b.Property<int>("WozTransactionLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("EndPoint");

                    b.Property<Guid?>("EnrollmentGuid");

                    b.Property<string>("InputParameters");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ResponseJson");

                    b.Property<string>("WozResponseJson");

                    b.HasKey("WozTransactionLogId");

                    b.ToTable("WozTransactionLog");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ZeroBounce", b =>
                {
                    b.Property<int>("ZeroBounceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("ElapsedTimeInMilliseconds");

                    b.Property<string>("HttpStatus");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PartnerContactId");

                    b.Property<string>("ResponseJSON");

                    b.Property<Guid>("ZeroBounceGuid");

                    b.HasKey("ZeroBounceId");

                    b.HasIndex("PartnerContactId");

                    b.ToTable("ZeroBounce");
                });

            modelBuilder.Entity("UpDiddyLib.Domain.Models.RecruiterStat", b =>
                {
                    b.Property<int>("RecruiterStatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CCInterviews");

                    b.Property<decimal>("CCSpread")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CCStarts");

                    b.Property<int>("CCSubmittals");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("OpCoInterviews");

                    b.Property<decimal>("OpCoSpread")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OpCoStarts");

                    b.Property<int>("OpCoSubmittals");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("RecruiterStatId");

                    b.ToTable("RecruiterStat");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.HiringManager", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.InterviewRequest", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId");

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.Pipeline", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.PipelineProfile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignCourseVariant", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany("CampaignCourseVariant")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseVariant", "CourseVariant")
                        .WithMany()
                        .HasForeignKey("CourseVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RebateType", "RebateType")
                        .WithMany()
                        .HasForeignKey("RebateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Refund", "Refund")
                        .WithMany()
                        .HasForeignKey("RefundId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartnerContact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany("CampaignPartnerContact")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPhase", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.City", b =>
                {
                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Company", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Contact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Course", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CourseLevel", "CourseLevel")
                        .WithMany()
                        .HasForeignKey("CourseLevelId");

                    b.HasOne("UpDiddyApi.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePage", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("UpDiddyApi.Models.CoursePageStatus", "CoursePageStatus")
                        .WithMany()
                        .HasForeignKey("CoursePageStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseSite", "CourseSite")
                        .WithMany("CoursePages")
                        .HasForeignKey("CourseSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReferral", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany("CourseSkills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariant", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany("CourseVariants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseVariantType", "CourseVariantType")
                        .WithMany()
                        .HasForeignKey("CourseVariantTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.CandidateReference", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("CandidateReference")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheck", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheckVendor", "ReferenceCheckVendor")
                        .WithMany()
                        .HasForeignKey("ReferenceCheckVendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckReport", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("ReferenceCheckReport")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("ReferenceCheckStatus")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailVerification", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithOne("EmailVerification")
                        .HasForeignKey("UpDiddyApi.Models.EmailVerification", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Enrollment", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CampaignCourseVariant", "CampaignCourseVariant")
                        .WithMany()
                        .HasForeignKey("CampaignId", "CourseVariantId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.FileDownloadTracker", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Profile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.AzureIndexStatus", "AzureIndexStatus")
                        .WithMany()
                        .HasForeignKey("AzureIndexStatusId");

                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("UpDiddyApi.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany()
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileComment", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileDocument", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileEmploymentType", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany("ProfileEmploymentTypes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSearchLocation", b =>
                {
                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileTag", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileWishlist", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Wishlist", "Wishlist")
                        .WithMany()
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Wishlist", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.GroupPartner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.HiringSolvedResumeParse", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplication", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobApplicationStatus", "JobApplicationStatus")
                        .WithMany()
                        .HasForeignKey("JobApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPage", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPageStatus", "JobPageStatus")
                        .WithMany()
                        .HasForeignKey("JobPageStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId");

                    b.HasOne("UpDiddyApi.Models.JobSite", "JobSite")
                        .WithMany("JobListings")
                        .HasForeignKey("JobSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPosting", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.CompensationType", "CompensationType")
                        .WithMany()
                        .HasForeignKey("CompensationTypeId");

                    b.HasOne("UpDiddyApi.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("UpDiddyApi.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany()
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("UpDiddyApi.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("UpDiddyApi.Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId");

                    b.HasOne("UpDiddyApi.Models.SecurityClearance", "SecurityClearance")
                        .WithMany()
                        .HasForeignKey("SecurityClearanceId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingAlert", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany("JobPostingSkills")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobReferral", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("RefereeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSiteScrapeStatistic", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobSite", "JobSite")
                        .WithMany()
                        .HasForeignKey("JobSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.LinkedInToken", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.NotificationGroup", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Offer", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Partner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerType", "PartnerType")
                        .WithMany()
                        .HasForeignKey("PartnerTypeId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Contact", "Contact")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CampaignPhase", "CampaignPhase")
                        .WithMany()
                        .HasForeignKey("CampaignPhaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany("PartnerContactFiles")
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFileLeadStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContactFile", "PartnerContactFile")
                        .WithMany("PartnerContactFileLeadStatuses")
                        .HasForeignKey("PartnerContactFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactLeadStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany("PartnerContactLeadStatuses")
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerReferrer", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner")
                        .WithMany("Referrers")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerWebRedirect", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner")
                        .WithOne("WebRedirect")
                        .HasForeignKey("UpDiddyApi.Models.PartnerWebRedirect", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PasswordResetRequest", b =>
                {
                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Postal", b =>
                {
                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCode", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoType", "PromoType")
                        .WithMany()
                        .HasForeignKey("PromoTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCodeRedemption", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CourseVariant", "CourseVariant")
                        .WithMany()
                        .HasForeignKey("CourseVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Recruiter", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterCompany", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany("RecruiterCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany("RecruiterCompanies")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParse", b =>
                {
                    b.HasOne("UpDiddyApi.Models.SubscriberFile", "SubscriberFile")
                        .WithMany()
                        .HasForeignKey("SubscriberFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParseResult", b =>
                {
                    b.HasOne("UpDiddyApi.Models.ResumeParse", "ResumeParse")
                        .WithMany()
                        .HasForeignKey("ResumeParseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingItem", b =>
                {
                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany("ServiceOfferingItems")
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingOrder", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany()
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCodeRedemption", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany()
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.State", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Subscriber", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CommuteDistance", "CommuteDistance")
                        .WithMany()
                        .HasForeignKey("CommuteDistanceId");

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("UpDiddyApi.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEducationHistory", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EducationalDegree", "EducationalDegree")
                        .WithMany()
                        .HasForeignKey("EducationalDegreeId");

                    b.HasOne("UpDiddyApi.Models.EducationalDegreeType", "EducationalDegreeType")
                        .WithMany()
                        .HasForeignKey("EducationalDegreeTypeId");

                    b.HasOne("UpDiddyApi.Models.EducationalInstitution", "EducationalInstitution")
                        .WithMany()
                        .HasForeignKey("EducationalInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberEducationHistory")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEmploymentTypes", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberEmploymentTypes")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberFile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberFile")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberGroup", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLink", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberLinks")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotes", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotification", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberNotifications")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberProfileStagingStore", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("ProfileStagingStore")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberSkills")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberWorkHistory", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.CompensationType", "CompensationType")
                        .WithMany()
                        .HasForeignKey("CompensationTypeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberWorkHistory")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.TalentFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Traitify", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ZeroBounce", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId");
                });
#pragma warning restore 612, 618
        }
    }
}
