// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;
using UpDiddyApi.Models;

namespace UpDiddyApi.Migrations
{
    [DbContext(typeof(UpDiddyDbContext))]
    [Migration("20200629210108_CreateLanguageProficiencies")]
    partial class CreateLanguageProficiencies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UpDiddyApi.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActionGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ActionId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.HiringManager", b =>
                {
                    b.Property<int>("HiringManagerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("HardToFindFillSkillsRoles");

                    b.Property<Guid>("HiringManagerGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("SkillsRolesWeAreAlwaysHiringFor");

                    b.Property<int>("SubscriberId");

                    b.HasKey("HiringManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("HiringManagers","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.InterviewRequest", b =>
                {
                    b.Property<int>("InterviewRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateRequested")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Details");

                    b.Property<int?>("HiringManagerId");

                    b.Property<Guid>("InterviewRequestGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("ProfileId");

                    b.Property<bool>("Successful");

                    b.HasKey("InterviewRequestId");

                    b.HasIndex("HiringManagerId");

                    b.HasIndex("ProfileId");

                    b.ToTable("InterviewRequest","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.Pipeline", b =>
                {
                    b.Property<int>("PipelineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("HiringManagerId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("PipelineGuid");

                    b.HasKey("PipelineId");

                    b.HasIndex("HiringManagerId", "Name", "IsDeleted")
                        .HasName("UIX_Pipeline_HiringManager_Name_IsDeleted");

                    b.ToTable("Pipelines","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.PipelineProfile", b =>
                {
                    b.Property<int>("PipelineProfileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PipelineId");

                    b.Property<Guid>("PipelineProfileGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("PipelineProfileId");

                    b.HasIndex("PipelineId");

                    b.HasIndex("ProfileId", "PipelineId")
                        .IsUnique()
                        .HasName("UIX_PipelineProfile_Profile_Pipeline");

                    b.ToTable("PipelineProfiles","B2B");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool?>("Hidden");

                    b.Property<string>("Icon");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Points");

                    b.Property<string>("Slug");

                    b.Property<string>("SortOrder");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("BadgeId");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeCourse", b =>
                {
                    b.Property<int>("BadgeCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeCourseGuid");

                    b.Property<string>("CourseId")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Notes");

                    b.Property<int?>("SortOrder");

                    b.HasKey("BadgeCourseId");

                    b.ToTable("BadgeCourse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeEarned", b =>
                {
                    b.Property<int>("BadgeEarnedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BadgeEarnedGuid");

                    b.Property<string>("BadgeId")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEarned");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PointValue");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.HasKey("BadgeEarnedId");

                    b.ToTable("BadgeEarned");
                });

            modelBuilder.Entity("UpDiddyApi.Models.BadgeSet", b =>
                {
                    b.Property<int>("BadgeSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeId");

                    b.Property<Guid?>("BadgeSetGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<bool?>("Hidden");

                    b.Property<string>("Icon");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug");

                    b.Property<int?>("SortOrder");

                    b.HasKey("BadgeSetId");

                    b.ToTable("BadgeSet");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TargetedViewName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Terms");

                    b.HasKey("CampaignId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignCourseVariant", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("CourseVariantId");

                    b.Property<Guid?>("CampaignCourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsEligibleForRebate");

                    b.Property<int?>("MaxRebateEligibilityInDays");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("RebateTypeId");

                    b.Property<int?>("RefundId");

                    b.HasKey("CampaignId", "CourseVariantId");

                    b.HasIndex("CourseVariantId");

                    b.HasIndex("RebateTypeId");

                    b.HasIndex("RefundId");

                    b.ToTable("CampaignCourseVariant");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartner", b =>
                {
                    b.Property<int>("CampaignPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<Guid?>("CampaignPartnerGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EmailDeliveryCap");

                    b.Property<int?>("EmailDeliveryLookbackInHours");

                    b.Property<string>("EmailSubAccountId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EmailTemplateId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsUseSeedEmails")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PartnerId");

                    b.Property<int?>("UnsubscribeGroupId");

                    b.HasKey("CampaignPartnerId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CampaignPartner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartnerContact", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("PartnerContactId");

                    b.Property<Guid?>("CampaignPartnerContactGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("EmailDeliveryDate");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsEmailSent");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("TinyId")
                        .HasColumnType("char(8)");

                    b.HasKey("CampaignId", "PartnerContactId");

                    b.HasIndex("PartnerContactId");

                    b.HasIndex("TinyId")
                        .IsUnique()
                        .HasName("UIX_CampaignPartnerContact_TinyId")
                        .HasFilter("[TinyId] IS NOT NULL");

                    b.ToTable("CampaignPartnerContact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPhase", b =>
                {
                    b.Property<int>("CampaignPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<Guid>("CampaignPhaseGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CampaignPhaseId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignPhase");
                });

            modelBuilder.Entity("UpDiddyApi.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CityGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.HasIndex("StateId", "Name")
                        .IsUnique()
                        .HasName("UIX_City_State_Name");

                    b.ToTable("City");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationSubscription", b =>
                {
                    b.Property<int>("CommunicationSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommunicationSubscriptionGuid");

                    b.Property<int>("CommunicationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("SubscribeDate");

                    b.Property<int>("SubscriberId");

                    b.HasKey("CommunicationSubscriptionId");

                    b.ToTable("CommunicationSubscription");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationTemplate", b =>
                {
                    b.Property<int>("CommunicationTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommunicationTemplateGuid");

                    b.Property<int>("CommunicationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("HtmlTemplate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TextTemplate");

                    b.HasKey("CommunicationTemplateId");

                    b.ToTable("CommunicationTemplate");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommunicationType", b =>
                {
                    b.Property<int>("CommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommuncationDescription");

                    b.Property<Guid?>("CommunciationTypeGuid");

                    b.Property<string>("CommunicationName")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("FrequencyInDays");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CommunicationTypeId");

                    b.ToTable("CommunicationType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CommuteDistance", b =>
                {
                    b.Property<int?>("CommuteDistanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CommuteDistanceGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DistanceRange")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CommuteDistanceId");

                    b.ToTable("CommuteDistance");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<string>("CloudTalentUri");

                    b.Property<Guid>("CompanyGuid");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int?>("EmployeeSize");

                    b.Property<int?>("IndustryId");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsHiringAgency");

                    b.Property<int>("IsJobPoster");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("CompanyId");

                    b.HasIndex("IndustryId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CompensationType", b =>
                {
                    b.Property<int>("CompensationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CompensationTypeGuid");

                    b.Property<string>("CompensationTypeName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CompensationTypeId");

                    b.ToTable("CompensationType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ContactGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("SubscriberId");

                    b.HasKey("ContactId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SubscriberId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code2")
                        .IsRequired();

                    b.Property<string>("Code3")
                        .IsRequired();

                    b.Property<Guid?>("CountryGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("OfficialName");

                    b.Property<int>("Sequence");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("CourseDeliveryId");

                    b.Property<Guid?>("CourseGuid");

                    b.Property<int?>("CourseLevelId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("DesktopImage");

                    b.Property<string>("ExternalUrl");

                    b.Property<int?>("Hidden");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsExternal");

                    b.Property<string>("MobileImage");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<string>("TabletImage");

                    b.Property<string>("ThumbnailImage");

                    b.Property<int?>("TopicId");

                    b.Property<int?>("TopicSecondaryId");

                    b.Property<int>("VendorId");

                    b.Property<string>("VideoUrl");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseLevelId");

                    b.HasIndex("VendorId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseDelivery", b =>
                {
                    b.Property<int>("CourseDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CourseDeliveryGuid");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DeliveryDescription");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CourseDeliveryId");

                    b.ToTable("CourseDelivery");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseFavorite", b =>
                {
                    b.Property<int>("CourseFavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseFavoriteGuid");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("CourseFavoriteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("CourseFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseLevel", b =>
                {
                    b.Property<int>("CourseLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseLevelGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("CourseLevelId");

                    b.ToTable("CourseLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePage", b =>
                {
                    b.Property<int>("CoursePageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<Guid>("CoursePageGuid");

                    b.Property<int>("CoursePageStatusId");

                    b.Property<int>("CourseSiteId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RawData")
                        .IsRequired();

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("CoursePageId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePageStatusId");

                    b.HasIndex("CourseSiteId");

                    b.HasIndex("UniqueIdentifier", "CourseSiteId")
                        .IsUnique()
                        .HasName("UIX_CoursePage_CourseSite_UniqueIdentifier");

                    b.ToTable("CoursePage");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePageStatus", b =>
                {
                    b.Property<int>("CoursePageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CoursePageStatusGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("CoursePageStatusId");

                    b.ToTable("CoursePageStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReferral", b =>
                {
                    b.Property<int>("CourseReferralId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<Guid>("CourseReferralGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsCourseViewed");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RefereeEmail");

                    b.Property<int?>("RefereeId");

                    b.Property<int>("ReferrerId");

                    b.HasKey("CourseReferralId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("ReferrerId");

                    b.ToTable("CourseReferral");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReview", b =>
                {
                    b.Property<int>("CourseReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovedById");

                    b.Property<int?>("ApprovedToPublish");

                    b.Property<int>("CourseId");

                    b.Property<Guid?>("CourseReviewGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.Property<int>("SubscriberId");

                    b.Property<int>("VerifiedAttended");

                    b.HasKey("CourseReviewId");

                    b.ToTable("CourseReview");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSite", b =>
                {
                    b.Property<int>("CourseSiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CourseSiteGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsCrawling");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsSyncing");

                    b.Property<DateTime?>("LastCrawl");

                    b.Property<DateTime?>("LastSync");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("CourseSiteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_CourseSite_Name");

                    b.ToTable("CourseSite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSkill", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("SkillId");

                    b.Property<Guid?>("CourseSkillGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("CourseId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CourseSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariant", b =>
                {
                    b.Property<int>("CourseVariantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<int>("CourseVariantTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseVariantId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseVariantTypeId");

                    b.ToTable("CourseVariant");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariantPromoCode", b =>
                {
                    b.Property<int>("CourseVariantPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseVariantId");

                    b.Property<Guid?>("CourseVariantPromoCodeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.HasKey("CourseVariantPromoCodeId");

                    b.ToTable("CourseVariantPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariantType", b =>
                {
                    b.Property<int>("CourseVariantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CourseVariantTypeId");

                    b.ToTable("CourseVariantType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.CandidateReference", b =>
                {
                    b.Property<int>("CandidateReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CandidateReferenceGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int>("ReferenceCheckId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.HasKey("CandidateReferenceId");

                    b.HasIndex("ReferenceCheckId");

                    b.ToTable("CandidateReference","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheck", b =>
                {
                    b.Property<int>("ReferenceCheckId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateJobTitle")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<int>("RecruiterId");

                    b.Property<DateTime?>("ReferenceCheckConcludedDate");

                    b.Property<Guid>("ReferenceCheckGuid");

                    b.Property<string>("ReferenceCheckRequestId")
                        .HasMaxLength(150);

                    b.Property<string>("ReferenceCheckType")
                        .HasMaxLength(100);

                    b.Property<int>("ReferenceCheckVendorId");

                    b.HasKey("ReferenceCheckId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("ReferenceCheckGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheck_ReferenceCheckGuid");

                    b.HasIndex("ReferenceCheckVendorId");

                    b.ToTable("ReferenceCheck","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckReport", b =>
                {
                    b.Property<int>("ReferenceCheckReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64File")
                        .HasColumnType("Varchar(MAX)");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("FileUrl")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ReferenceCheckId");

                    b.Property<Guid>("ReferenceCheckReportGuid");

                    b.HasKey("ReferenceCheckReportId");

                    b.HasIndex("ReferenceCheckId");

                    b.ToTable("ReferenceCheckReport","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckStatus", b =>
                {
                    b.Property<int>("ReferenceCheckStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Progress");

                    b.Property<int>("ReferenceCheckId");

                    b.Property<Guid>("ReferenceCheckStatusGuid");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("VendorJsonResponse")
                        .HasMaxLength(4000);

                    b.HasKey("ReferenceCheckStatusId");

                    b.HasIndex("ReferenceCheckId");

                    b.HasIndex("ReferenceCheckStatusGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckStatus_ReferenceCheckStatusGuid");

                    b.ToTable("ReferenceCheckStatus","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckVendor", b =>
                {
                    b.Property<int>("ReferenceCheckVendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("ReferenceCheckVendorGuid");

                    b.HasKey("ReferenceCheckVendorId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckVendor_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ReferenceCheckVendorGuid")
                        .IsUnique()
                        .HasName("UIX_ReferenceCheckVendor_ReferenceCheckVendorGuid");

                    b.ToTable("ReferenceCheckVendor","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EducationLevelGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Level")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationLevelId");

                    b.ToTable("EducationLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalDegree", b =>
                {
                    b.Property<int>("EducationalDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Degree");

                    b.Property<Guid>("EducationalDegreeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationalDegreeId");

                    b.ToTable("EducationalDegree");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalDegreeType", b =>
                {
                    b.Property<int>("EducationalDegreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DegreeType");

                    b.Property<Guid>("EducationalDegreeTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("EducationalDegreeTypeId");

                    b.ToTable("EducationalDegreeType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EducationalInstitution", b =>
                {
                    b.Property<int>("EducationalInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EducationalInstitutionGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("EducationalInstitutionId");

                    b.ToTable("EducationalInstitution");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EmailTemplateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<string>("SendGridSubAccount");

                    b.Property<string>("SendGridTemplateId");

                    b.Property<string>("TemplateParams");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailVerification", b =>
                {
                    b.Property<int>("EmailVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("EmailVerificationGuid");

                    b.Property<DateTime>("ExpirationDateTime");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("Token");

                    b.HasKey("EmailVerificationId");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("EmailVerification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EmploymentTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampaignId");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<int>("CourseId");

                    b.Property<int?>("CourseVariantId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEnrolled");

                    b.Property<DateTime?>("DroppedDate");

                    b.Property<Guid?>("EnrollmentGuid");

                    b.Property<int>("EnrollmentStatusId");

                    b.Property<int?>("Grade");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("IsRetake");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PercentComplete");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("SectionStartTimestamp");

                    b.Property<int>("SubscriberId");

                    b.Property<int?>("TermsOfServiceFlag");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("CampaignId", "CourseVariantId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EnrollmentLog", b =>
                {
                    b.Property<int>("EnrollmentLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CourseCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CourseGuid");

                    b.Property<Guid?>("CourseVariantGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<Guid>("EnrollmentLogGuid");

                    b.Property<DateTime>("EnrollmentTime");

                    b.Property<int>("EnrollmentVendorInvoicePaymentMonth");

                    b.Property<int>("EnrollmentVendorInvoicePaymentYear");

                    b.Property<int>("EnrollmentVendorPaymentStatusId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<decimal>("PromoApplied")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SubscriberGuid");

                    b.HasKey("EnrollmentLogId");

                    b.ToTable("EnrollmentLog");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EnrollmentStatus", b =>
                {
                    b.Property<int>("EnrollmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid?>("EnrollmentStatusGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("EnrollmentStatusId");

                    b.ToTable("EnrollmentStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.EntityType", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid>("EntityTypeGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("EntityTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ExperienceLevel", b =>
                {
                    b.Property<int>("ExperienceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DisplayName");

                    b.Property<Guid>("ExperienceLevelGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevel");
                });

            modelBuilder.Entity("UpDiddyApi.Models.FileDownloadTracker", b =>
                {
                    b.Property<int>("FileDownloadTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("FileDownloadAttemptCount");

                    b.Property<Guid?>("FileDownloadTrackerGuid");

                    b.Property<int?>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxFileDownloadAttemptsPermitted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("MostrecentfiledownloadAttemptinUtc");

                    b.Property<string>("SourceFileCDNUrl");

                    b.Property<int>("SubscriberId");

                    b.HasKey("FileDownloadTrackerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("FileDownloadTracker");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.AzureIndexStatus", b =>
                {
                    b.Property<int>("AzureIndexStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AzureIndexStatusGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("AzureIndexStatusId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_AzureIndexStatus_Name");

                    b.ToTable("AzureIndexStatuses","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ContactTypeGuid");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("Sequence");

                    b.HasKey("ContactTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_ContactType_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ContactTypes","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AzureIndexStatusId");

                    b.Property<string>("AzureSearchIndexInfo");

                    b.Property<int?>("CityId");

                    b.Property<int>("CompanyId");

                    b.Property<int?>("ContactTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<decimal?>("CurrentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DesiredRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<int?>("ExperienceLevelId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("Goals")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsActiveJobSeeker");

                    b.Property<bool?>("IsCurrentlyEmployed");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsWillingToRelocate");

                    b.Property<bool?>("IsWillingToTravel");

                    b.Property<bool?>("IsWillingToWorkProBono");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("PostalId");

                    b.Property<string>("Preferences")
                        .HasMaxLength(500);

                    b.Property<Guid>("ProfileGuid");

                    b.Property<string>("SkillsNote")
                        .HasMaxLength(500);

                    b.Property<int?>("StateId");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(100);

                    b.Property<int>("SubscriberId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ProfileId");

                    b.HasIndex("AzureIndexStatusId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("PostalId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubscriberId", "CompanyId")
                        .IsUnique()
                        .HasName("UIX_Profile_Subscriber_Company");

                    b.ToTable("Profiles","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileComment", b =>
                {
                    b.Property<int>("ProfileCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsVisibleToCompany");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileCommentGuid");

                    b.Property<int>("ProfileId");

                    b.Property<int>("RecruiterId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2500);

                    b.HasKey("ProfileCommentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("ProfileComments","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileDocument", b =>
                {
                    b.Property<int>("ProfileDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobStorageUrl")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileDocumentGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("ProfileDocumentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileDocuments","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileEmploymentType", b =>
                {
                    b.Property<int>("ProfileEmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("EmploymentTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProfileEmploymentTypeGuid");

                    b.Property<int>("ProfileId");

                    b.HasKey("ProfileEmploymentTypeId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("ProfileId", "EmploymentTypeId")
                        .IsUnique()
                        .HasName("UIX_ProfileEmploymentType_Profile_EmploymentType");

                    b.ToTable("ProfileEmploymentTypes","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSearchLocation", b =>
                {
                    b.Property<int>("ProfileSearchLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PostalId");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileSearchLocationGuid");

                    b.Property<int>("SearchRadius");

                    b.Property<int?>("StateId");

                    b.HasKey("ProfileSearchLocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("PostalId");

                    b.HasIndex("StateId");

                    b.HasIndex("ProfileId", "CityId", "PostalId")
                        .IsUnique()
                        .HasName("UIX_ProfileSearchLocation_Profile_City_Postal")
                        .HasFilter("[CityId] IS NOT NULL AND [PostalId] IS NOT NULL");

                    b.ToTable("ProfileSearchLocations","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSkill", b =>
                {
                    b.Property<int>("ProfileSkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileSkillGuid");

                    b.Property<int>("SkillId");

                    b.HasKey("ProfileSkillId");

                    b.HasIndex("SkillId");

                    b.HasIndex("ProfileId", "SkillId")
                        .IsUnique()
                        .HasName("UIX_ProfileSkill_Profile_Skill");

                    b.ToTable("ProfileSkills","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileTag", b =>
                {
                    b.Property<int>("ProfileTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileTagGuid");

                    b.Property<int>("TagId");

                    b.HasKey("ProfileTagId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TagId", "ProfileId")
                        .IsUnique()
                        .HasName("UIX_ProfileTag_Profile_Tag");

                    b.ToTable("ProfileTags","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileWishlist", b =>
                {
                    b.Property<int>("ProfileWishlistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProfileId");

                    b.Property<Guid>("ProfileWishlistGuid");

                    b.Property<int>("WishlistId");

                    b.HasKey("ProfileWishlistId");

                    b.HasIndex("WishlistId");

                    b.HasIndex("ProfileId", "WishlistId")
                        .IsUnique()
                        .HasName("UIX_ProfileWishlist_Profile_Wishlist");

                    b.ToTable("ProfileWishlists","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("RecruiterId");

                    b.Property<Guid>("WishlistGuid");

                    b.HasKey("WishlistId");

                    b.HasIndex("RecruiterId", "Name", "IsDeleted")
                        .HasName("UIX_Wishlist_Recruiter_Name_IsDeleted");

                    b.ToTable("Wishlists","G2");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid?>("GenderGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("SexualIdentification")
                        .IsRequired();

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<Guid>("GroupGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsLeavable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Path");

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("UpDiddyApi.Models.GroupPartner", b =>
                {
                    b.Property<int>("GroupPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<Guid>("GroupPartnerGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PartnerId");

                    b.HasKey("GroupPartnerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PartnerId");

                    b.ToTable("GroupPartner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.HiringSolvedResumeParse", b =>
                {
                    b.Property<int>("HiringSolvedResumeParseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("FileName");

                    b.Property<Guid>("HiringSolvedResumeParseGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("JobId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<long>("NumTicks");

                    b.Property<DateTime?>("ParseCompleted");

                    b.Property<DateTime?>("ParseRequested");

                    b.Property<string>("ParseStatus");

                    b.Property<string>("ParsedResume");

                    b.Property<string>("ResumeText");

                    b.Property<int>("SubscriberId");

                    b.HasKey("HiringSolvedResumeParseId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("HiringSolvedResumeParse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("IndustryGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("IndustryId");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplication", b =>
                {
                    b.Property<int>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverLetter");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobApplicationGuid");

                    b.Property<int>("JobApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("JobPostingId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PartnerId");

                    b.Property<int>("SubscriberId");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("JobApplicationStatusId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobApplication");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplicationStatus", b =>
                {
                    b.Property<int>("JobApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobApplicationStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Status");

                    b.HasKey("JobApplicationStatusId");

                    b.ToTable("JobApplicationStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobCategory", b =>
                {
                    b.Property<int>("JobCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobCategoryGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("JobCategoryId");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPage", b =>
                {
                    b.Property<int>("JobPageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPageGuid");

                    b.Property<int>("JobPageStatusId");

                    b.Property<int?>("JobPostingId");

                    b.Property<int>("JobSiteId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RawData")
                        .IsRequired();

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired();

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("JobPageId");

                    b.HasIndex("JobPageStatusId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("JobSiteId");

                    b.HasIndex("UniqueIdentifier", "JobSiteId")
                        .IsUnique()
                        .HasName("UIX_JobPage_JobSite_UniqueIdentifier");

                    b.ToTable("JobPage");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPageStatus", b =>
                {
                    b.Property<int>("JobPageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPageStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.HasKey("JobPageStatusId");

                    b.ToTable("JobPageStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPosting", b =>
                {
                    b.Property<int>("JobPostingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDeadlineUTC");

                    b.Property<string>("City");

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<string>("CloudTalentUri");

                    b.Property<int?>("CompanyId");

                    b.Property<decimal>("Compensation");

                    b.Property<int?>("CompensationTypeId");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int?>("EducationLevelId");

                    b.Property<int?>("EmploymentTypeId");

                    b.Property<int?>("ExperienceLevelId");

                    b.Property<bool>("H2Visa");

                    b.Property<int?>("IndustryId");

                    b.Property<bool>("IsAgencyJobPosting");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsPrivate");

                    b.Property<int?>("JobCategoryId");

                    b.Property<Guid>("JobPostingGuid");

                    b.Property<int>("JobStatus");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("PostalId");

                    b.Property<DateTime>("PostingDateUTC");

                    b.Property<DateTime>("PostingExpirationDateUTC");

                    b.Property<string>("Province");

                    b.Property<int?>("RecruiterId");

                    b.Property<int?>("SecurityClearanceId");

                    b.Property<string>("StreetAddress");

                    b.Property<int>("TelecommutePercentage");

                    b.Property<string>("ThirdPartyApplicationUrl");

                    b.Property<bool>("ThirdPartyApply");

                    b.Property<string>("ThirdPartyIdentifier");

                    b.Property<string>("Title");

                    b.HasKey("JobPostingId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompensationTypeId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("PostalId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("SecurityClearanceId");

                    b.HasIndex("IsDeleted", "JobPostingGuid")
                        .HasName("IX_JobPosting_IsDeletedJobPostingGuid");

                    b.ToTable("JobPosting");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingAlert", b =>
                {
                    b.Property<int>("JobPostingAlertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ExecutionDayOfWeek")
                        .HasMaxLength(10);

                    b.Property<int>("ExecutionHour");

                    b.Property<int>("ExecutionMinute");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPostingAlertGuid");

                    b.Property<string>("JobQueryDtoJSON")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("JobPostingAlertId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobPostingAlert");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingFavorite", b =>
                {
                    b.Property<int>("JobPostingId");

                    b.Property<int>("SubscriberId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobPostingFavoriteGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("JobPostingId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("JobPostingFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingSkill", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<int>("JobPostingId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid?>("JobPostingSkillGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("SkillId", "JobPostingId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("JobPostingSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobReferral", b =>
                {
                    b.Property<int>("JobReferralId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool>("IsJobViewed");

                    b.Property<int>("JobPostingId");

                    b.Property<Guid>("JobReferralGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RefereeEmailId");

                    b.Property<int?>("RefereeId");

                    b.Property<int>("ReferralId");

                    b.HasKey("JobReferralId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("ReferralId");

                    b.ToTable("JobReferral");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSite", b =>
                {
                    b.Property<int>("JobSiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CrawlDelayInMilliseconds");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("JobSiteGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal?>("PercentageReductionThreshold")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("JobSiteId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UIX_JobSite_Name");

                    b.ToTable("JobSite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSiteScrapeStatistic", b =>
                {
                    b.Property<int>("JobSiteScrapeStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("JobSiteId");

                    b.Property<Guid>("JobSiteScrapeStatisticGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumJobsAdded");

                    b.Property<int>("NumJobsDropped");

                    b.Property<int>("NumJobsErrored");

                    b.Property<int>("NumJobsProcessed");

                    b.Property<int>("NumJobsUpdated");

                    b.Property<DateTime>("ScrapeDate");

                    b.HasKey("JobSiteScrapeStatisticId");

                    b.HasIndex("JobSiteId");

                    b.ToTable("JobSiteScrapeStatistic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid>("LanguageGuid");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 272, DateTimeKind.Utc).AddTicks(4006),
                            CreateGuid = new Guid("3b915795-b68d-472d-983a-f55c88bfbb19"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("021e69e3-7e10-4cfe-99ea-da5a8f0d5323"),
                            LanguageName = "Afrikaans"
                        },
                        new
                        {
                            LanguageId = 2,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(190),
                            CreateGuid = new Guid("453ddeef-aabf-423a-b10b-4ee9a2e2b353"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("c58d66ad-c1ca-4f08-9644-9c93cb5a0499"),
                            LanguageName = "Albanian"
                        },
                        new
                        {
                            LanguageId = 3,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(235),
                            CreateGuid = new Guid("10cc9c74-7514-49d5-ac25-edc20a4326e7"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("71edcb56-3f5a-4d8d-badc-54e19d5cf88f"),
                            LanguageName = "Amharic"
                        },
                        new
                        {
                            LanguageId = 4,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(249),
                            CreateGuid = new Guid("d7609cf2-e30d-48ef-81df-a0ee1a4c37b1"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1f469c68-824a-46a0-90b1-85e94c8b2ebd"),
                            LanguageName = "Arabic (Egyptian Spoken)"
                        },
                        new
                        {
                            LanguageId = 5,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(251),
                            CreateGuid = new Guid("82979758-1a80-445b-85db-b47d5b7ef16e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("822320b7-affe-4490-b40e-1a00593a2578"),
                            LanguageName = "Arabic (Levantine)"
                        },
                        new
                        {
                            LanguageId = 6,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(258),
                            CreateGuid = new Guid("61a8bfd5-fad7-48d2-a215-c0f43a42061a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("eac7adba-63db-4ed7-89be-97c3bf78d969"),
                            LanguageName = "Arabic (Modern Standard)"
                        },
                        new
                        {
                            LanguageId = 7,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(260),
                            CreateGuid = new Guid("252a7e29-f9ac-4fa4-9a6b-0dd317feb915"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("03d286af-00f9-434f-aa58-565fc8b4e096"),
                            LanguageName = "Arabic (Moroccan Spoken)"
                        },
                        new
                        {
                            LanguageId = 8,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(266),
                            CreateGuid = new Guid("eebc8181-1974-48f6-a448-bf6e3884b364"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("334a10f4-850c-4fce-aca5-f00614ed93d1"),
                            LanguageName = "Arabic (Overview)"
                        },
                        new
                        {
                            LanguageId = 9,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(268),
                            CreateGuid = new Guid("7ff56bb5-423f-4d19-a57a-02485e3c21f6"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("837fc254-165c-4134-b2f0-01452c412f15"),
                            LanguageName = "Aramaic"
                        },
                        new
                        {
                            LanguageId = 10,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(271),
                            CreateGuid = new Guid("e7743231-eae3-40f2-912c-bbdcf52d7667"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ff74c3d1-f221-4d78-b168-7700c40775e5"),
                            LanguageName = "Armenian"
                        },
                        new
                        {
                            LanguageId = 11,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(273),
                            CreateGuid = new Guid("a6b67806-69b7-4fb7-8c8d-475515ec7a7e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("138c9f44-be8c-452c-8a6d-739f445282ef"),
                            LanguageName = "Assamese"
                        },
                        new
                        {
                            LanguageId = 12,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(278),
                            CreateGuid = new Guid("3cff9a35-b355-4744-9065-fd04c49e190d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("28296049-00f9-4925-8f4a-8cda12f74fa2"),
                            LanguageName = "Aymara"
                        },
                        new
                        {
                            LanguageId = 13,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(280),
                            CreateGuid = new Guid("01f60353-7e26-45f0-a73b-1a9533ef845d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1e7e6751-1118-42ef-92ce-e948caef47a7"),
                            LanguageName = "Azerbaijani"
                        },
                        new
                        {
                            LanguageId = 14,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(282),
                            CreateGuid = new Guid("5dc2bfce-4785-4e34-b33a-e9f684ee93b6"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("dcb52d64-c6ed-4a2f-9067-87ac8abe4c94"),
                            LanguageName = "Balochi"
                        },
                        new
                        {
                            LanguageId = 15,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(284),
                            CreateGuid = new Guid("fa37170d-e49f-4362-ad6b-b38af1b4eda3"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("67e0c838-2d89-40db-973d-5b5adcb962d6"),
                            LanguageName = "Bamanankan"
                        },
                        new
                        {
                            LanguageId = 16,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(288),
                            CreateGuid = new Guid("fbbffaa5-62c9-41f3-9950-cb92401f6e49"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cb1fe449-2998-4031-850f-339745138198"),
                            LanguageName = "Bashkort (Bashkir)"
                        },
                        new
                        {
                            LanguageId = 17,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(290),
                            CreateGuid = new Guid("5951383b-eb07-44a3-9074-61d86bfa8404"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("314fe52a-1918-4ca8-b034-fe32d7799505"),
                            LanguageName = "Basque"
                        },
                        new
                        {
                            LanguageId = 18,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(293),
                            CreateGuid = new Guid("f55cce30-62f7-4f07-9cb4-6683f4165a3a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("f4d9e476-b84a-4244-b5e2-eedffb7583e5"),
                            LanguageName = "Belarusan"
                        },
                        new
                        {
                            LanguageId = 19,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(295),
                            CreateGuid = new Guid("c89cb80c-0173-4980-9417-066ac00e121a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("01ce737d-76af-4689-bf3a-d6ac46d715ec"),
                            LanguageName = "Bengali"
                        },
                        new
                        {
                            LanguageId = 20,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(299),
                            CreateGuid = new Guid("4aca285f-d386-4ccb-b389-6321f9128d6b"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("5cc73b06-357d-4997-b50e-f05f20ef954f"),
                            LanguageName = "Bhojpuri"
                        },
                        new
                        {
                            LanguageId = 21,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(301),
                            CreateGuid = new Guid("9c663112-04ab-4f94-815a-7edef02d969f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("122591ed-a39b-4c1c-85e7-0a8f2cf3aa72"),
                            LanguageName = "Bislama"
                        },
                        new
                        {
                            LanguageId = 22,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(304),
                            CreateGuid = new Guid("b430eaf8-f7d6-4aa1-9e5c-b67586657ff5"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ca1d29f8-eb29-4bfe-97f8-a04464e8fae6"),
                            LanguageName = "Bosnian"
                        },
                        new
                        {
                            LanguageId = 23,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(306),
                            CreateGuid = new Guid("757d61e4-a805-4391-a133-9612cc2a42f3"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("c4e1531f-16a8-492d-bf5e-dfed7ee9680c"),
                            LanguageName = "Brahui"
                        },
                        new
                        {
                            LanguageId = 24,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(310),
                            CreateGuid = new Guid("19713404-a597-4f3d-9681-0b8e55e9529d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("3d46f253-98af-4a7b-bd54-e7aff7c15eb0"),
                            LanguageName = "Bulgarian"
                        },
                        new
                        {
                            LanguageId = 25,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(312),
                            CreateGuid = new Guid("d77894e3-11db-4297-bbe1-e69a2be1008f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("a4c52fb9-7b83-4a29-bc93-bb9ac884f527"),
                            LanguageName = "Burmese"
                        },
                        new
                        {
                            LanguageId = 26,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(314),
                            CreateGuid = new Guid("31e34b6f-6451-4d89-8d88-b81d29693d81"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1293a175-65f9-475c-9863-20388f1f7400"),
                            LanguageName = "Cantonese"
                        },
                        new
                        {
                            LanguageId = 27,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(316),
                            CreateGuid = new Guid("625d4b77-ab9a-4751-9368-e7f840035e41"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("48790143-ade0-42d4-9e77-44a4aaa35f63"),
                            LanguageName = "Catalan"
                        },
                        new
                        {
                            LanguageId = 28,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(320),
                            CreateGuid = new Guid("5f527775-43ba-4853-99ea-c9e590085f23"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("d2ad505f-79da-4269-adc9-c448078191b3"),
                            LanguageName = "Cebuano"
                        },
                        new
                        {
                            LanguageId = 29,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(322),
                            CreateGuid = new Guid("ad93a9d4-3abd-46a2-b1d0-c56565bba378"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ff69bbc5-d5eb-413f-ae5f-37cb10a84f32"),
                            LanguageName = "Chechen"
                        },
                        new
                        {
                            LanguageId = 30,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(324),
                            CreateGuid = new Guid("ddd04d1d-28cc-47bb-a793-d3fab498e1f0"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("a00fb418-67d3-4ff1-a064-84bb68690937"),
                            LanguageName = "Cherokee"
                        },
                        new
                        {
                            LanguageId = 31,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(327),
                            CreateGuid = new Guid("47648b32-f9fc-410c-a8e2-44a34053855b"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("da0edc1b-6105-48d7-8ab7-b97f36f932a2"),
                            LanguageName = "Croatian"
                        },
                        new
                        {
                            LanguageId = 32,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(331),
                            CreateGuid = new Guid("9cc8d624-5191-4a57-bb7d-98df00f8657d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("c92d565f-5fac-4cde-926a-ade3c8c5a719"),
                            LanguageName = "Czech"
                        },
                        new
                        {
                            LanguageId = 33,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(333),
                            CreateGuid = new Guid("aa02e9ab-bc45-465a-90d9-7e331fb51e4e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("f4a0c6d8-add5-4fa0-bb74-def69bb2b61c"),
                            LanguageName = "Dakota"
                        },
                        new
                        {
                            LanguageId = 34,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(404),
                            CreateGuid = new Guid("74acd045-723e-4880-a68f-7b33a102c6ab"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("930c1f0f-053c-4130-bfcb-1f0e2ba479f8"),
                            LanguageName = "Danish"
                        },
                        new
                        {
                            LanguageId = 35,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(406),
                            CreateGuid = new Guid("80f68d53-c6a2-4b78-bda7-661c55ab1114"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cc361b3a-f152-4e39-9f06-446ecbf9ca5d"),
                            LanguageName = "Dari"
                        },
                        new
                        {
                            LanguageId = 36,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(411),
                            CreateGuid = new Guid("77fa33dc-0557-43f6-8913-ab89a9b60c52"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1593ed1c-f1ff-4823-8e5f-6100060c0d68"),
                            LanguageName = "Dholuo"
                        },
                        new
                        {
                            LanguageId = 37,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(413),
                            CreateGuid = new Guid("190e1299-1b39-44dd-9078-3636b9b29794"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("8177bb76-5ada-40a5-97c0-484fbded9a3e"),
                            LanguageName = "Dutch"
                        },
                        new
                        {
                            LanguageId = 38,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(415),
                            CreateGuid = new Guid("f3f19960-467a-4442-b544-71d34d45384d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("e6ca10aa-5cfe-424f-b475-b6a1921eff8c"),
                            LanguageName = "English"
                        },
                        new
                        {
                            LanguageId = 39,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(417),
                            CreateGuid = new Guid("7489b41b-b222-4db7-a0f7-80f6683c9106"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("417d4c20-7ab9-43cd-b8f4-abda6257c038"),
                            LanguageName = "Esperanto"
                        },
                        new
                        {
                            LanguageId = 40,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(421),
                            CreateGuid = new Guid("cc943d3a-192a-45ae-83a5-66ff901ad430"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("913ee440-db42-4fd3-b280-acb512f63db0"),
                            LanguageName = "Estonian"
                        },
                        new
                        {
                            LanguageId = 41,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(423),
                            CreateGuid = new Guid("fa9fe679-7357-4c07-822f-a67122bfc4a4"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b563c0b1-c8df-4493-9541-dd338e86cea9"),
                            LanguageName = "Éwé"
                        },
                        new
                        {
                            LanguageId = 42,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(425),
                            CreateGuid = new Guid("7e4b8709-0b01-4d99-aeb9-98da4cb1eee1"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b50ac90d-90cd-4933-b943-c939f706a5b3"),
                            LanguageName = "Finnish"
                        },
                        new
                        {
                            LanguageId = 43,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(427),
                            CreateGuid = new Guid("6aac96e8-cd2e-4c6e-9c8c-dea19c945f59"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("0889acd2-8d14-48d3-bd0b-b266ae781d8b"),
                            LanguageName = "French"
                        },
                        new
                        {
                            LanguageId = 44,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(431),
                            CreateGuid = new Guid("097145a3-1874-4202-b3c9-df81e628cafe"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("5cfe4f65-6d71-4284-91ae-b3691724849a"),
                            LanguageName = "Georgian"
                        },
                        new
                        {
                            LanguageId = 45,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(433),
                            CreateGuid = new Guid("4a8b91fe-d76d-40c4-beb2-534d33401342"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1090661d-905c-450b-977b-f2620fd837b1"),
                            LanguageName = "German"
                        },
                        new
                        {
                            LanguageId = 46,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(435),
                            CreateGuid = new Guid("dfea2a59-0e81-487d-9a44-7eb1e97fec72"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cbbdb579-4bf8-4dc0-9be2-5647160d2124"),
                            LanguageName = "Gikuyu"
                        },
                        new
                        {
                            LanguageId = 47,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(437),
                            CreateGuid = new Guid("d7d78064-dbd0-42d3-be32-4bacb026eb08"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("a70e9330-bc03-4aa6-a8ae-a38165e912ae"),
                            LanguageName = "Greek"
                        },
                        new
                        {
                            LanguageId = 48,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(441),
                            CreateGuid = new Guid("3d31fc5b-019d-4ab2-987e-12ed8b739bc8"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("2fa4100c-106e-490f-a783-f9a0352b550e"),
                            LanguageName = "Guarani"
                        },
                        new
                        {
                            LanguageId = 49,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(443),
                            CreateGuid = new Guid("451aaad6-ed53-40c9-ab2f-1f021e630ae6"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("387189e4-4296-441b-8c8e-1dc06c44fd83"),
                            LanguageName = "Gujarati"
                        },
                        new
                        {
                            LanguageId = 50,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(445),
                            CreateGuid = new Guid("d7de17cd-7307-4925-a2ab-b2a4b9ed03ae"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("6997b04d-7b46-42a1-8b2d-b0d58de709cc"),
                            LanguageName = "Haitian Creole"
                        },
                        new
                        {
                            LanguageId = 51,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(447),
                            CreateGuid = new Guid("a42e13f5-b45c-4d37-9068-e7dec9ad0675"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("29d223a7-afb0-4a2b-92e1-675579dbcfeb"),
                            LanguageName = "Hausa"
                        },
                        new
                        {
                            LanguageId = 52,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(452),
                            CreateGuid = new Guid("fc6a4187-b135-4e64-8e65-152ad450227a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("13308684-d9cc-4f93-898c-f6288bab9f98"),
                            LanguageName = "Hawaiian"
                        },
                        new
                        {
                            LanguageId = 53,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(454),
                            CreateGuid = new Guid("d29b4815-6b99-4b12-ada9-2ac356c8b98d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("564ffc66-c00f-4138-9d3c-9a7d5052f762"),
                            LanguageName = "Hawaiian Creole"
                        },
                        new
                        {
                            LanguageId = 54,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(456),
                            CreateGuid = new Guid("5cd037dd-e111-4ce9-ae71-5286c9fbf4a3"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("613c8234-d719-4a57-a3c9-6e173888effd"),
                            LanguageName = "Hebrew"
                        },
                        new
                        {
                            LanguageId = 55,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(458),
                            CreateGuid = new Guid("5b2dcfcd-0f8a-488b-b7cd-124c31f8abda"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("8408ec78-1c2a-4da4-81d3-015d8812f978"),
                            LanguageName = "Hiligaynon"
                        },
                        new
                        {
                            LanguageId = 56,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(462),
                            CreateGuid = new Guid("fda14cc4-0825-4177-84ec-271ac08f2c1d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("edd255aa-ecc7-42ad-a5f0-682a062b5b67"),
                            LanguageName = "Hindi"
                        },
                        new
                        {
                            LanguageId = 57,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(464),
                            CreateGuid = new Guid("1f2fc050-a1a8-4bd1-8589-07a7eae038d8"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("0bd5e8c5-edda-4305-8b94-8a8b15d0a72b"),
                            LanguageName = "Hungarian"
                        },
                        new
                        {
                            LanguageId = 58,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(466),
                            CreateGuid = new Guid("1d77f71e-cd0d-4d85-bf59-5b24ad5ff8e2"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("107a9a89-6ad9-4beb-bcf2-e5d0b2e236fb"),
                            LanguageName = "Icelandic"
                        },
                        new
                        {
                            LanguageId = 59,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(468),
                            CreateGuid = new Guid("419fe02d-1183-4850-82b2-9b5813093e2d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("04b7f81f-5bf8-4ad4-ba1b-6aaa839a5cb9"),
                            LanguageName = "Igbo"
                        },
                        new
                        {
                            LanguageId = 60,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(472),
                            CreateGuid = new Guid("e6c8332f-2efc-4d53-a2bc-e8b44f33c52e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("f3eca832-4337-4ffe-98f1-8bdbc4077ed7"),
                            LanguageName = "Ilocano"
                        },
                        new
                        {
                            LanguageId = 61,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(474),
                            CreateGuid = new Guid("abcc8f06-c604-4cec-80f2-95400a2bf536"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("fc360980-5974-4dbe-82e9-1575df8679ba"),
                            LanguageName = "Indonesian (Bahasa Indonesia)"
                        },
                        new
                        {
                            LanguageId = 62,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(477),
                            CreateGuid = new Guid("644ac4c3-df2e-4aee-8e10-85bbf668374f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("05029da7-3727-4566-8e2f-e92ad70c4a7b"),
                            LanguageName = "Inuit/Inupiaq"
                        },
                        new
                        {
                            LanguageId = 63,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(479),
                            CreateGuid = new Guid("1f495619-4824-4785-8deb-15f739e2e5c3"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("3932c9c4-335f-4b19-ba3b-6721cd20b6cc"),
                            LanguageName = "Irish Gaelic"
                        },
                        new
                        {
                            LanguageId = 64,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(483),
                            CreateGuid = new Guid("3ca92390-ea2e-4627-a3a4-f7474e77c4fa"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b22d114d-5932-4118-a64b-c0d2799efa37"),
                            LanguageName = "Italian"
                        },
                        new
                        {
                            LanguageId = 65,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(485),
                            CreateGuid = new Guid("6bf61f0a-8e93-4115-8408-d13c4ff8c5be"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("53c43cea-986a-4d5c-a640-375b5e121715"),
                            LanguageName = "Japanese"
                        },
                        new
                        {
                            LanguageId = 66,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(488),
                            CreateGuid = new Guid("3f8505ac-cc77-48c3-9677-109e9fc31b89"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("7dc0aa6e-ceab-47fd-8c5c-037bca19cbd9"),
                            LanguageName = "Jarai"
                        },
                        new
                        {
                            LanguageId = 67,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(490),
                            CreateGuid = new Guid("3b0248dc-3e77-4ce4-a798-2024a0b2882e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("d32fb835-e7b0-4827-a639-d34457d8aea7"),
                            LanguageName = "Javanese"
                        },
                        new
                        {
                            LanguageId = 68,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(494),
                            CreateGuid = new Guid("eec57201-67ec-478a-88dc-3ede8860cec7"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("35d24679-f18c-45f7-87e4-cb3e2b3b7b4f"),
                            LanguageName = "K’iche’"
                        },
                        new
                        {
                            LanguageId = 69,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(496),
                            CreateGuid = new Guid("41e341b4-762c-4ca0-8ee1-fd9855fa5544"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("9cbccbde-e9a6-4734-b930-b6b74f5dcfb4"),
                            LanguageName = "Kabyle"
                        },
                        new
                        {
                            LanguageId = 70,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(498),
                            CreateGuid = new Guid("a5f2322d-c208-4281-a5fa-dd9c93ac7aba"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("137932a0-3e7e-4404-b250-fb2beed08da9"),
                            LanguageName = "Kannada"
                        },
                        new
                        {
                            LanguageId = 71,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(500),
                            CreateGuid = new Guid("9e339fa4-3866-4e58-bd18-3accc03a1250"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("0b74db64-9142-4bba-8283-05adc314640d"),
                            LanguageName = "Kashmiri"
                        },
                        new
                        {
                            LanguageId = 72,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(505),
                            CreateGuid = new Guid("0829106c-08c3-4f0f-8ddd-b40a9dcc7c07"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("d28710c8-0e0b-426d-b8ae-4511e83179ef"),
                            LanguageName = "Kazakh"
                        },
                        new
                        {
                            LanguageId = 73,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(506),
                            CreateGuid = new Guid("9708bc3f-fb2a-4dcf-80c7-a3f2e212136b"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("3250de56-0322-4326-a5a1-036376968566"),
                            LanguageName = "Khmer"
                        },
                        new
                        {
                            LanguageId = 74,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(509),
                            CreateGuid = new Guid("5e596226-a4ba-4190-9445-adda61946d1f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ff83271a-9914-4d25-a09e-c41bca973a17"),
                            LanguageName = "Khoekhoe"
                        },
                        new
                        {
                            LanguageId = 75,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(511),
                            CreateGuid = new Guid("64062ce1-84e6-4362-9ab1-3cb9cc4fb83f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("673e3429-092e-4cce-8b0e-c6d4c56065e7"),
                            LanguageName = "Korean"
                        },
                        new
                        {
                            LanguageId = 76,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(515),
                            CreateGuid = new Guid("67c283f3-2faf-46e6-97c8-058c218aa7e4"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("51c79dc6-5dee-48f0-b6dc-847d68e8c645"),
                            LanguageName = "Kurdish"
                        },
                        new
                        {
                            LanguageId = 77,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(517),
                            CreateGuid = new Guid("4b074aa1-1ed3-4838-87f0-f058ce4512fc"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("e72f2f0e-0572-4d55-b81e-52aaecf445f1"),
                            LanguageName = "Kyrgyz"
                        },
                        new
                        {
                            LanguageId = 78,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(519),
                            CreateGuid = new Guid("052f5c92-8074-42f4-87fe-447b4cb6a434"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("45951e28-fd77-43fe-94d9-fdf665600faa"),
                            LanguageName = "Lao"
                        },
                        new
                        {
                            LanguageId = 79,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(521),
                            CreateGuid = new Guid("a8110802-8dcf-460e-8ea1-00f0d9f56b28"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cbf3868f-db74-49ae-83e6-50274a617c18"),
                            LanguageName = "Latin"
                        },
                        new
                        {
                            LanguageId = 80,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(525),
                            CreateGuid = new Guid("8afbcd68-1220-45f3-9f89-b23b11a29c75"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("26284b6d-286b-44db-ba71-bd405f62ea8f"),
                            LanguageName = "Latvian"
                        },
                        new
                        {
                            LanguageId = 81,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(527),
                            CreateGuid = new Guid("75533007-befd-4ccd-8c03-269d93325219"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("3cb17743-beae-4961-b5c1-ff6917ccc417"),
                            LanguageName = "Lingala"
                        },
                        new
                        {
                            LanguageId = 82,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(529),
                            CreateGuid = new Guid("7f25be05-234b-48ed-b6b9-af943b9cf21b"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ea4d2e55-d586-4105-b484-322f3cf30b93"),
                            LanguageName = "Lithuanian"
                        },
                        new
                        {
                            LanguageId = 83,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(531),
                            CreateGuid = new Guid("104d4719-d80a-411b-96fb-e1f8cd7f50f0"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("811ac397-894f-4e4d-a2e1-f48dac5054c1"),
                            LanguageName = "Macedonian"
                        },
                        new
                        {
                            LanguageId = 84,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(536),
                            CreateGuid = new Guid("628106d5-c320-42d9-beeb-7bf84eb5473f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("6cf468ad-b774-411a-9f8c-42af1f6f0cff"),
                            LanguageName = "Maithili"
                        },
                        new
                        {
                            LanguageId = 85,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(538),
                            CreateGuid = new Guid("a5ce0af0-305d-42a8-a505-e8c424d6345c"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("58b93a75-b2ed-47c9-9fc6-03859ecdcdc5"),
                            LanguageName = "Malagasy"
                        },
                        new
                        {
                            LanguageId = 86,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(540),
                            CreateGuid = new Guid("cd886707-e254-4dd1-b860-8944c7f099e5"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("9768a5ea-2593-476d-9eb3-87a0449ea608"),
                            LanguageName = "Malay (Bahasa Melayu)"
                        },
                        new
                        {
                            LanguageId = 87,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(542),
                            CreateGuid = new Guid("baeb6cf3-0e24-4a3f-abd7-e97a5488a9ec"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("53dcef1f-07a7-419a-8363-690a4170c345"),
                            LanguageName = "Malayalam"
                        },
                        new
                        {
                            LanguageId = 88,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(546),
                            CreateGuid = new Guid("83ed51f3-c590-46eb-aa12-22bb3d955aca"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("327e3133-4980-4d8e-a5b0-36c712085a08"),
                            LanguageName = "Mandarin (Chinese)"
                        },
                        new
                        {
                            LanguageId = 89,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(548),
                            CreateGuid = new Guid("f5f0c366-e115-4cb2-9d40-86db3a2319fd"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("fc9eded6-6e09-480b-8b84-cf7a7bab0c49"),
                            LanguageName = "Marathi"
                        },
                        new
                        {
                            LanguageId = 90,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(550),
                            CreateGuid = new Guid("590a419b-4b11-4188-9cfb-9104033184b9"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ea0b6ecc-b453-4bc1-bb84-3033ecf311ea"),
                            LanguageName = "Mende"
                        },
                        new
                        {
                            LanguageId = 91,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(552),
                            CreateGuid = new Guid("df0450cf-b06b-46f3-a465-e776699473d2"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cc7db52e-e754-4473-ba26-0c25e4e6287b"),
                            LanguageName = "Mongolian"
                        },
                        new
                        {
                            LanguageId = 92,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(556),
                            CreateGuid = new Guid("821ad2cc-a5c6-4d58-aa32-306ed651df7e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("06d6c435-c22b-4131-9ad0-abba921a1847"),
                            LanguageName = "Nahuatl"
                        },
                        new
                        {
                            LanguageId = 93,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(598),
                            CreateGuid = new Guid("cb27157d-bdae-41a3-adc9-c89110526631"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("db7fb72d-0373-41a4-937c-ca318c70be0a"),
                            LanguageName = "Navajo"
                        },
                        new
                        {
                            LanguageId = 94,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(601),
                            CreateGuid = new Guid("31b8f82b-13b8-466d-887d-4342a6fb5d2e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("302ff1fe-9893-42ac-9830-074a989de417"),
                            LanguageName = "Nepali"
                        },
                        new
                        {
                            LanguageId = 95,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(603),
                            CreateGuid = new Guid("1af0a7b8-3f3b-483a-8054-8ef4ce8c2063"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("f5b2c48d-dbca-41af-b551-065f3236e9ec"),
                            LanguageName = "Norwegian"
                        },
                        new
                        {
                            LanguageId = 96,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(607),
                            CreateGuid = new Guid("3ebfa6bc-491a-489f-b21c-56b77fa16d19"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("f171088b-7673-4b70-97a5-08093136d754"),
                            LanguageName = "Ojibwa"
                        },
                        new
                        {
                            LanguageId = 97,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(609),
                            CreateGuid = new Guid("4e120788-3553-4181-943b-9fd1ce188f8d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ed6e0c13-31e2-476e-9222-25cf903d2886"),
                            LanguageName = "Oriya"
                        },
                        new
                        {
                            LanguageId = 98,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(611),
                            CreateGuid = new Guid("41aaf4ea-6729-406b-a598-2e4aa7e16ef2"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("2ec5621a-e85c-4d3b-9ccd-fbceb705bb42"),
                            LanguageName = "Oromo"
                        },
                        new
                        {
                            LanguageId = 99,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(613),
                            CreateGuid = new Guid("c9369c2b-b0e4-4d1b-b059-4ad53cf702f4"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("fbbda6ae-b8b9-43d0-a27b-4d7adb3cf613"),
                            LanguageName = "Pashto"
                        },
                        new
                        {
                            LanguageId = 100,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(617),
                            CreateGuid = new Guid("c30d1146-8cbe-4e0a-9f32-8bb071236e6d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("05cb4f9a-0f1c-4446-8262-7188fae9cd2e"),
                            LanguageName = "Persian"
                        },
                        new
                        {
                            LanguageId = 101,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(619),
                            CreateGuid = new Guid("f2cc1ba5-6d5a-4acd-80d6-3a946f5d271a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("8e8e795a-9d54-40e0-aca6-4c5a3a4417bf"),
                            LanguageName = "Polish"
                        },
                        new
                        {
                            LanguageId = 102,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(621),
                            CreateGuid = new Guid("b5f9d77e-5242-44af-a973-c7c27245f0e7"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("7f756fcd-42f9-4f19-956f-28e63c7932bf"),
                            LanguageName = "Portuguese"
                        },
                        new
                        {
                            LanguageId = 103,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(623),
                            CreateGuid = new Guid("dba35acd-c410-4d79-af7b-57e3dd4abdab"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("136d9962-e61f-489e-af46-2310a0f8bf16"),
                            LanguageName = "Punjabi"
                        },
                        new
                        {
                            LanguageId = 104,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(628),
                            CreateGuid = new Guid("7ec88ad3-5d62-419b-a661-3c97e90e8620"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("8bf6db20-c15f-4440-be25-c5e0cf6fb0d8"),
                            LanguageName = "Quechua"
                        },
                        new
                        {
                            LanguageId = 105,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(630),
                            CreateGuid = new Guid("15996f31-6efb-48f9-bd84-0c0877bcc373"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b20df597-c9ef-4b8a-8387-1821ac69ba6f"),
                            LanguageName = "Romani"
                        },
                        new
                        {
                            LanguageId = 106,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(632),
                            CreateGuid = new Guid("bd5fd577-250b-45c1-b354-89726ceabfbf"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("461dbc9d-e1ac-4a60-b932-cd9b30e399b0"),
                            LanguageName = "Romanian"
                        },
                        new
                        {
                            LanguageId = 107,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(634),
                            CreateGuid = new Guid("2fdf4d25-79df-474d-84e6-f04f3b8ade1b"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("8a034cdf-5bea-4ab0-92f9-6aa858e66fa7"),
                            LanguageName = "Russian"
                        },
                        new
                        {
                            LanguageId = 108,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(638),
                            CreateGuid = new Guid("bba1756c-c444-45af-8de2-c10ed6d1cbde"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("5a0abbe5-f611-469b-8678-fee929efe27c"),
                            LanguageName = "Rwanda"
                        },
                        new
                        {
                            LanguageId = 109,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(640),
                            CreateGuid = new Guid("c96b9a3b-25b7-4fa9-97b4-d79fc82e874d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("aba0ecca-064a-4ef5-9bd5-42c4a554a2e2"),
                            LanguageName = "Samoan"
                        },
                        new
                        {
                            LanguageId = 110,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(642),
                            CreateGuid = new Guid("e0627f26-2f0b-4264-8230-ae6239987008"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("694e33f8-3089-43d2-be2e-814c666761e5"),
                            LanguageName = "Sanskrit"
                        },
                        new
                        {
                            LanguageId = 111,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(644),
                            CreateGuid = new Guid("db807881-290a-40f9-a70b-67cefe8ac44a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("73d03219-aae4-47ff-87a1-7189107edbfa"),
                            LanguageName = "Serbian"
                        },
                        new
                        {
                            LanguageId = 112,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(648),
                            CreateGuid = new Guid("9554d5f1-7652-4e5d-888d-39748403d38f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("07f9bd1d-10d2-4f19-8c3e-aa15a94f5267"),
                            LanguageName = "Shona"
                        },
                        new
                        {
                            LanguageId = 113,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(651),
                            CreateGuid = new Guid("46c1bc76-eae7-4d32-86b6-38e9b9da173f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1307050f-7990-48cd-801b-c64bfe116b54"),
                            LanguageName = "Sindhi"
                        },
                        new
                        {
                            LanguageId = 114,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(653),
                            CreateGuid = new Guid("2243c915-ae24-4081-8979-00e9f070e638"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("15f1630d-0eb8-44eb-b23c-ffb6ea46876c"),
                            LanguageName = "Sinhala"
                        },
                        new
                        {
                            LanguageId = 115,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(655),
                            CreateGuid = new Guid("ca62dd75-450b-4d06-8e99-a6f1ae27cd3f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("2759bb75-d423-4d1c-8038-551faec4b701"),
                            LanguageName = "Slovak"
                        },
                        new
                        {
                            LanguageId = 116,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(659),
                            CreateGuid = new Guid("2ee3156b-9870-43de-a874-e04105d0a95a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("31f068ac-8756-4130-a34d-b3eaaa1973ff"),
                            LanguageName = "Slovene"
                        },
                        new
                        {
                            LanguageId = 117,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(661),
                            CreateGuid = new Guid("604c46c4-f319-4433-89b9-ca53c2048b4a"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("58daae8a-794f-450f-994c-17ed205d496b"),
                            LanguageName = "Somali"
                        },
                        new
                        {
                            LanguageId = 118,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(663),
                            CreateGuid = new Guid("6ffde07f-b29a-40cc-83aa-b03fef707c97"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("018e37fc-249c-4cf6-9560-be8f1a984b6f"),
                            LanguageName = "Spanish"
                        },
                        new
                        {
                            LanguageId = 119,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(665),
                            CreateGuid = new Guid("f651993e-fc4b-4cd0-87b2-a042c729281d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("4d02172d-d5d4-45ec-a1dc-72a6ed7d4891"),
                            LanguageName = "Swahili"
                        },
                        new
                        {
                            LanguageId = 120,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(669),
                            CreateGuid = new Guid("d4d93995-97f0-4624-8a70-23304b5a2db8"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cbf15c59-b963-4c4e-a1cb-ecb4ddb60e8b"),
                            LanguageName = "Swedish"
                        },
                        new
                        {
                            LanguageId = 121,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(671),
                            CreateGuid = new Guid("fa924b5e-e0b4-45b7-b943-ab60ad37ae3f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("6f6b9834-bfd1-41b4-919c-b48d24d4105f"),
                            LanguageName = "Tachelhit"
                        },
                        new
                        {
                            LanguageId = 122,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(673),
                            CreateGuid = new Guid("d3beb482-a4ac-4846-9004-c42aa51b5381"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("335c6b89-3129-48c7-8440-813275fda25c"),
                            LanguageName = "Tagalog"
                        },
                        new
                        {
                            LanguageId = 123,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(675),
                            CreateGuid = new Guid("46f8a23b-4312-4e8e-83bc-ce1fa351ed75"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("49e590f9-26d8-43e4-af61-3e242cf590c0"),
                            LanguageName = "Tajiki"
                        },
                        new
                        {
                            LanguageId = 124,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(679),
                            CreateGuid = new Guid("52b6cac5-cf4f-48d5-b684-d5c1eaaae698"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("579552a7-9765-452a-81cc-c31abc68758a"),
                            LanguageName = "Tamil"
                        },
                        new
                        {
                            LanguageId = 125,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(681),
                            CreateGuid = new Guid("89ad6cf4-4ccf-49dc-9907-d4680acb2d52"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("1e19c3d8-2ae4-4d28-ad77-2634cd9fd3fd"),
                            LanguageName = "Tatar"
                        },
                        new
                        {
                            LanguageId = 126,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(683),
                            CreateGuid = new Guid("c3a5eec2-6271-44d7-b9a8-fd871f1441b8"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("fa3e9ae5-0f97-4e0a-921b-f17034b78b34"),
                            LanguageName = "Telugu"
                        },
                        new
                        {
                            LanguageId = 127,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(685),
                            CreateGuid = new Guid("056c14aa-d7d0-4fe3-a406-05e341ec60c5"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("69a6f746-7da9-4378-904b-45be70996a59"),
                            LanguageName = "Thai"
                        },
                        new
                        {
                            LanguageId = 128,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(690),
                            CreateGuid = new Guid("a6f8cd1b-4c5d-430e-a39d-d139769e1f0f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("2ed4978b-a3a6-4a1a-8a1d-6fdbea5b96f7"),
                            LanguageName = "Tibetic Languages"
                        },
                        new
                        {
                            LanguageId = 129,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(692),
                            CreateGuid = new Guid("81d91487-7556-4a11-a7ff-37d99d9e0964"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b5f78150-50ea-4e18-8dc2-175e7b488287"),
                            LanguageName = "Tigrigna"
                        },
                        new
                        {
                            LanguageId = 130,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(695),
                            CreateGuid = new Guid("f71ac882-60d2-422e-889a-d87793cd7c9d"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("cb3e5e4b-9157-4389-bb13-2d1438776a90"),
                            LanguageName = "Tok Pisin"
                        },
                        new
                        {
                            LanguageId = 131,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(697),
                            CreateGuid = new Guid("53c10912-af3a-45d6-a23b-ddfb0705f612"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("aa88eca3-24f9-4d75-8f09-2aa99d2f9480"),
                            LanguageName = "Turkish"
                        },
                        new
                        {
                            LanguageId = 132,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(702),
                            CreateGuid = new Guid("ad3b2ffa-6ec0-4e15-92d8-44fb4a24b719"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("ce167844-6f73-4b7c-8381-3e9ac2f228ef"),
                            LanguageName = "Turkmen"
                        },
                        new
                        {
                            LanguageId = 133,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(704),
                            CreateGuid = new Guid("18affd32-2c8a-4c82-bbb7-89cc8ebeddf2"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("4e712b19-13e6-477b-8198-193a9a7912e2"),
                            LanguageName = "Ukrainian"
                        },
                        new
                        {
                            LanguageId = 134,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(706),
                            CreateGuid = new Guid("4103b10d-9dad-4830-a778-56bb6ec944ef"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("15483e54-14a0-4de6-a7f0-58e312c9273f"),
                            LanguageName = "Urdu"
                        },
                        new
                        {
                            LanguageId = 135,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(708),
                            CreateGuid = new Guid("faa8e224-81b5-4759-8ec4-3ce3fb13836f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("2cd94050-4faa-41de-ac19-65f516d15969"),
                            LanguageName = "Uyghur"
                        },
                        new
                        {
                            LanguageId = 136,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(712),
                            CreateGuid = new Guid("fc2415ee-270c-48a4-b2fb-9b08c3644d27"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("6ac64e61-75b5-437c-983b-3b42be2c852a"),
                            LanguageName = "Uzbek"
                        },
                        new
                        {
                            LanguageId = 137,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(714),
                            CreateGuid = new Guid("3090bc6f-a81b-4832-9c57-edc9837718ba"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("56f73c6d-11d8-4892-8f53-18681b44db91"),
                            LanguageName = "Vietnamese"
                        },
                        new
                        {
                            LanguageId = 138,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(716),
                            CreateGuid = new Guid("7a579f3f-cd63-4c9b-b697-4bba5a02a0f6"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("a9051809-bbfd-49ea-80ea-26a3312afff4"),
                            LanguageName = "Warlpiri"
                        },
                        new
                        {
                            LanguageId = 139,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(718),
                            CreateGuid = new Guid("3e2f1b66-2feb-463c-a9cd-7ea81b8f2ad3"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("4ff8bc89-2fee-4cff-a6f2-9b71a52054b1"),
                            LanguageName = "Welsh"
                        },
                        new
                        {
                            LanguageId = 140,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(723),
                            CreateGuid = new Guid("e687183f-f158-413e-bcd9-369a89b61c4f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("56fcfce0-93b0-4d08-b8cb-c141827f4438"),
                            LanguageName = "Wolof"
                        },
                        new
                        {
                            LanguageId = 141,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(725),
                            CreateGuid = new Guid("db551419-5fed-4b69-b149-d8dbad810023"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("e4236155-f510-4169-a488-f185f4a26984"),
                            LanguageName = "Xhosa"
                        },
                        new
                        {
                            LanguageId = 142,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(727),
                            CreateGuid = new Guid("9e81337c-cfd2-4f3a-b5c9-8cc7bfefa45f"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("092c9ff0-3f44-4377-8ecd-05b00b6f59d7"),
                            LanguageName = "Yakut"
                        },
                        new
                        {
                            LanguageId = 143,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(729),
                            CreateGuid = new Guid("eb261ef7-87d2-4637-9de3-d5cab6d7aa5e"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("b814c34c-6640-4964-9d5c-f32536a73768"),
                            LanguageName = "Yiddish"
                        },
                        new
                        {
                            LanguageId = 144,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(772),
                            CreateGuid = new Guid("8ba081af-d384-48b9-923f-86822c262e12"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("a9a34ed6-d107-4c0f-9530-49d8a8a5ec30"),
                            LanguageName = "Yoruba"
                        },
                        new
                        {
                            LanguageId = 145,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(774),
                            CreateGuid = new Guid("16d5cfb3-973c-4dd4-b141-cbd5d623c0fe"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("177d87a3-f48e-4474-9e83-2e9a359090bb"),
                            LanguageName = "Yucatec"
                        },
                        new
                        {
                            LanguageId = 146,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(777),
                            CreateGuid = new Guid("a3c5e246-2ca1-41fd-a4fb-9402b156f2cb"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("19c6ebab-e948-4dc9-8013-de44e6e2419c"),
                            LanguageName = "Zapotec"
                        },
                        new
                        {
                            LanguageId = 147,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(779),
                            CreateGuid = new Guid("f99dc664-1e43-44ee-bb41-90be1e5c5114"),
                            IsDeleted = 0,
                            LanguageGuid = new Guid("9b8b1e7e-2faf-4584-b526-4bf5cb14ccf8"),
                            LanguageName = "Zulu"
                        });
                });

            modelBuilder.Entity("UpDiddyApi.Models.LeadStatus", b =>
                {
                    b.Property<int>("LeadStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<Guid?>("LeadStatusGuid");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<string>("Severity")
                        .IsRequired();

                    b.HasKey("LeadStatusId");

                    b.ToTable("LeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.LinkedInToken", b =>
                {
                    b.Property<int>("LinkedInTokenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<DateTime>("AccessTokenExpiry");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("LinkedInTokenId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("LinkedInToken");
                });

            modelBuilder.Entity("UpDiddyApi.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateActive");

                    b.Property<string>("ExternalLink");

                    b.Property<string>("Headline")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("NewsGuid");

                    b.Property<int>("NewsTypeId");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("SubText")
                        .IsRequired();

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("UpDiddyApi.Models.NewsType", b =>
                {
                    b.Property<int>("NewsTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("NewsClassification")
                        .IsRequired();

                    b.Property<Guid?>("NewsTypeGuid");

                    b.HasKey("NewsTypeId");

                    b.ToTable("NewsType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("IsTargeted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("NotificationGuid");

                    b.Property<DateTime?>("SentDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.NotificationGroup", b =>
                {
                    b.Property<int>("NotificationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("NotificationGroupGuid");

                    b.Property<int>("NotificationId");

                    b.HasKey("NotificationGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("NotificationGroupId", "GroupId")
                        .IsUnique()
                        .HasName("UIX_NotificationGroup_Group");

                    b.ToTable("NotificationGroup");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("Disclaimer");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<Guid>("OfferGuid");

                    b.Property<int>("PartnerId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Url");

                    b.HasKey("OfferId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiToken");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PartnerGuid");

                    b.Property<int?>("PartnerTypeId");

                    b.HasKey("PartnerId");

                    b.HasIndex("PartnerTypeId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContact", b =>
                {
                    b.Property<int>("PartnerContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool?>("IsBillable");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MetaDataJSON");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactGuid");

                    b.Property<int>("PartnerId");

                    b.Property<string>("SourceSystemIdentifier");

                    b.HasKey("PartnerContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PartnerContactGuid")
                        .IsUnique()
                        .HasName("UIX_PartnerContact_PartnerContactGuid")
                        .HasFilter("[PartnerContactGuid] IS NOT NULL");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerContact");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactAction", b =>
                {
                    b.Property<int>("PartnerContactId");

                    b.Property<int>("CampaignId");

                    b.Property<int>("ActionId");

                    b.Property<int>("CampaignPhaseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Headers");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("PartnerContactActionGuid");

                    b.HasKey("PartnerContactId", "CampaignId", "ActionId", "CampaignPhaseId");

                    b.HasIndex("ActionId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignPhaseId");

                    b.ToTable("PartnerContactAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFile", b =>
                {
                    b.Property<int>("PartnerContactFileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64EncodedData")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<bool>("IsBillable");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MimeType")
                        .IsRequired();

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PartnerContactFileGuid");

                    b.Property<int>("PartnerContactId");

                    b.HasKey("PartnerContactFileId");

                    b.HasIndex("PartnerContactId");

                    b.ToTable("PartnerContactFile");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFileLeadStatus", b =>
                {
                    b.Property<int>("PartnerContactFileId");

                    b.Property<int>("LeadStatusId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactFileLeadStatusGuid");

                    b.HasKey("PartnerContactFileId", "LeadStatusId");

                    b.HasIndex("LeadStatusId");

                    b.ToTable("PartnerContactFileLeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactLeadStatus", b =>
                {
                    b.Property<int>("PartnerContactId");

                    b.Property<int>("LeadStatusId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PartnerContactLeadStatusGuid");

                    b.HasKey("PartnerContactId", "LeadStatusId");

                    b.HasIndex("LeadStatusId");

                    b.ToTable("PartnerContactLeadStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerReferrer", b =>
                {
                    b.Property<int>("PartnerReferrerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartnerId");

                    b.Property<string>("Path")
                        .HasColumnType("varchar(3000)");

                    b.HasKey("PartnerReferrerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerReferrer");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerType", b =>
                {
                    b.Property<int>("PartnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PartnerTypeGuid");

                    b.HasKey("PartnerTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PartnerType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerWebRedirect", b =>
                {
                    b.Property<int>("PartnerId");

                    b.Property<string>("RelativePath");

                    b.HasKey("PartnerId");

                    b.ToTable("PartnerWebRedirect");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PasswordResetRequest", b =>
                {
                    b.Property<int>("PasswordResetRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("PasswordResetRequestGuid");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<DateTime?>("ResetDate");

                    b.Property<int>("SubscriberId");

                    b.HasKey("PasswordResetRequestId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PasswordResetRequest");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<int>("PaymentBatchId");

                    b.Property<string>("PaymentCurrencyType");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<Guid?>("PaymentGuid");

                    b.Property<string>("PaymentNonce");

                    b.Property<int>("PaymentProcessorId");

                    b.Property<int>("PaymentStatus");

                    b.Property<decimal>("PaymentValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentBatch", b =>
                {
                    b.Property<int>("PaymentBatchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentBatchGuid");

                    b.Property<string>("Status");

                    b.HasKey("PaymentBatchId");

                    b.ToTable("PaymentBatch");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentProcessor", b =>
                {
                    b.Property<int>("PaymentProcessorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentProcessorGuid");

                    b.HasKey("PaymentProcessorId");

                    b.ToTable("PaymentProcessor");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PaymentStatusGuid");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Postal", b =>
                {
                    b.Property<int>("PostalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12,9)");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("PostalGuid");

                    b.HasKey("PostalId");

                    b.HasIndex("CityId", "Code")
                        .IsUnique()
                        .HasName("UIX_Postal_City_Code");

                    b.ToTable("Postal");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ProficiencyLevel", b =>
                {
                    b.Property<int>("ProficiencyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("ProficiencyLevelGuid");

                    b.Property<string>("ProficiencyLevelName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("ProficiencyLevelId");

                    b.ToTable("ProficiencyLevels");

                    b.HasData(
                        new
                        {
                            ProficiencyLevelId = 1,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(8401),
                            CreateGuid = new Guid("7f3bdd72-f6ec-46b6-9909-6e485980e0ef"),
                            DisplayOrder = 0,
                            IsDeleted = 0,
                            ProficiencyLevelGuid = new Guid("75bbda35-ecd8-4fe8-ad71-0d484cb21018"),
                            ProficiencyLevelName = "Nope"
                        },
                        new
                        {
                            ProficiencyLevelId = 2,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(9912),
                            CreateGuid = new Guid("55383f7b-e13a-4e4a-82e3-f90ce7199462"),
                            DisplayOrder = 0,
                            IsDeleted = 0,
                            ProficiencyLevelGuid = new Guid("3f56c091-d719-4281-bfcd-e32f9185ae01"),
                            ProficiencyLevelName = "Meh"
                        },
                        new
                        {
                            ProficiencyLevelId = 3,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(9931),
                            CreateGuid = new Guid("7de35c48-6af1-49c2-a70f-8ccd3b679ac7"),
                            DisplayOrder = 0,
                            IsDeleted = 0,
                            ProficiencyLevelGuid = new Guid("30fec695-8138-4330-800e-4cdfa5114575"),
                            ProficiencyLevelName = "Adequate"
                        },
                        new
                        {
                            ProficiencyLevelId = 4,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(9934),
                            CreateGuid = new Guid("da561b0c-6d2c-4cf2-b8b4-a55f9cd87a78"),
                            DisplayOrder = 0,
                            IsDeleted = 0,
                            ProficiencyLevelGuid = new Guid("0f326683-5d08-438b-8f45-254006532cca"),
                            ProficiencyLevelName = "Real Good"
                        },
                        new
                        {
                            ProficiencyLevelId = 5,
                            CreateDate = new DateTime(2020, 6, 29, 21, 1, 7, 273, DateTimeKind.Utc).AddTicks(9944),
                            CreateGuid = new Guid("3f25bd2e-2fb8-4f16-a6f2-d14ac29db9f7"),
                            DisplayOrder = 0,
                            IsDeleted = 0,
                            ProficiencyLevelGuid = new Guid("fdbbd8c7-8472-425b-becb-d7875052a204"),
                            ProficiencyLevelName = "Amazing"
                        });
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("MaxAllowedNumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("MaxNumberOfRedemptionsPerSubscriber");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid?>("PromoCodeGuid");

                    b.Property<string>("PromoDescription");

                    b.Property<DateTime>("PromoEndDate");

                    b.Property<string>("PromoName")
                        .IsRequired();

                    b.Property<DateTime>("PromoStartDate");

                    b.Property<int>("PromoTypeId");

                    b.Property<decimal>("PromoValueFactor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoCodeId");

                    b.HasIndex("PromoTypeId");

                    b.ToTable("PromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCodeRedemption", b =>
                {
                    b.Property<int>("PromoCodeRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseVariantId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PromoCodeId");

                    b.Property<Guid>("PromoCodeRedemptionGuid");

                    b.Property<DateTime?>("RedemptionDate");

                    b.Property<string>("RedemptionNotes");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<int>("SubscriberId");

                    b.Property<decimal>("ValueRedeemed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromoCodeRedemptionId");

                    b.HasIndex("CourseVariantId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PromoCodeRedemption");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoType", b =>
                {
                    b.Property<int>("PromoTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("PromoTypeGuid");

                    b.HasKey("PromoTypeId");

                    b.ToTable("PromoType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RebateType", b =>
                {
                    b.Property<int>("RebateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("RebateTypeGuid");

                    b.Property<string>("Terms");

                    b.HasKey("RebateTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RebateType");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("RecruiterGuid");

                    b.Property<int?>("SubscriberId");

                    b.HasKey("RecruiterId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterAction", b =>
                {
                    b.Property<int>("RecruiterActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EntityId");

                    b.Property<int?>("EntityTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("RecruiterActionGuid");

                    b.Property<int>("RecruiterId");

                    b.HasKey("RecruiterActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("RecruiterAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterCompany", b =>
                {
                    b.Property<int>("RecruiterCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("RecruiterCompanyGuid");

                    b.Property<int>("RecruiterId");

                    b.HasKey("RecruiterCompanyId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("CompanyId", "RecruiterId")
                        .IsUnique()
                        .HasName("UIX_RecruiterCompany_Recruiter_Company");

                    b.ToTable("RecruiterCompany");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RedemptionStatus", b =>
                {
                    b.Property<int>("RedemptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("RedemptionStatusGuid");

                    b.HasKey("RedemptionStatusId");

                    b.ToTable("RedemptionStatus");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnrollmentId");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RefundGuid");

                    b.Property<DateTime>("RefundIssueDate");

                    b.Property<int>("RefundIssueStatus");

                    b.Property<int>("RefundIssued");

                    b.HasKey("RefundId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ReportEnrollmentByVendor", b =>
                {
                    b.Property<int>("ReportEnrollmentByVendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoursesCompletedCount");

                    b.Property<int>("CoursesDroppedCount");

                    b.Property<int>("EnrollmentsCompleted");

                    b.Property<int>("Month");

                    b.Property<int>("PromoCodesRedeemedCount");

                    b.Property<Guid?>("ReportEnrollmentByVendorGuid");

                    b.Property<decimal>("TotalRefundsIssued")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenueIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSplitOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId");

                    b.Property<int>("Year");

                    b.HasKey("ReportEnrollmentByVendorId");

                    b.ToTable("ReportEnrollmentByVendors");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParse", b =>
                {
                    b.Property<int>("ResumeParseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ParseStatus");

                    b.Property<int>("RequiresMerge");

                    b.Property<Guid>("ResumeParseGuid");

                    b.Property<int>("SubscriberFileId");

                    b.Property<int>("SubscriberId");

                    b.HasKey("ResumeParseId");

                    b.HasIndex("SubscriberFileId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ResumeParse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParseResult", b =>
                {
                    b.Property<int>("ResumeParseResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<Guid>("ExistingObjectGuid");

                    b.Property<string>("ExistingValue");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ParseStatus");

                    b.Property<string>("ParsedValue");

                    b.Property<string>("ProcessingMessage");

                    b.Property<int>("ProfileSectionId");

                    b.Property<string>("Prompt");

                    b.Property<int>("ResumeParseId");

                    b.Property<Guid>("ResumeParseResultGuid");

                    b.Property<string>("TargetProperty");

                    b.Property<string>("TargetTypeName");

                    b.HasKey("ResumeParseResultId");

                    b.HasIndex("ResumeParseId");

                    b.ToTable("ResumeParseResult");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SalesForceSignUpList", b =>
                {
                    b.Property<int>("SalesForceSignUpListId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("SalesForceSignUpListGuid");

                    b.HasKey("SalesForceSignUpListId");

                    b.ToTable("SalesForceSignUpList");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SecurityClearance", b =>
                {
                    b.Property<int>("SecurityClearanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<Guid>("SecurityClearanceGuid");

                    b.HasKey("SecurityClearanceId");

                    b.ToTable("SecurityClearance");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SendGridEvent", b =>
                {
                    b.Property<int>("SendGridEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attempt");

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("Event");

                    b.Property<string>("Ip");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Marketing_campaign_id");

                    b.Property<string>("Marketing_campaign_name");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Reason");

                    b.Property<string>("Response");

                    b.Property<Guid?>("SendGridEventGuid");

                    b.Property<string>("Sg_event_id");

                    b.Property<string>("Sg_message_id");

                    b.Property<string>("Smtp_id");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<long>("Timestamp");

                    b.Property<string>("Tls");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<string>("UserAgent");

                    b.HasKey("SendGridEventId");

                    b.ToTable("SendGridEvent");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOffering", b =>
                {
                    b.Property<int>("ServiceOfferingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceOfferingGuid");

                    b.Property<int>("SortOrder");

                    b.HasKey("ServiceOfferingId");

                    b.ToTable("ServiceOffering");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingItem", b =>
                {
                    b.Property<int>("ServiceOfferingItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingItemGuid");

                    b.Property<int>("SortOrder");

                    b.HasKey("ServiceOfferingItemId");

                    b.HasIndex("ServiceOfferingId");

                    b.ToTable("ServiceOfferingItem");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingOrder", b =>
                {
                    b.Property<int>("ServiceOfferingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizationInfo");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PercentCommplete");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingOrderGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("ServiceOfferingOrderId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("ServiceOfferingId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ServiceOfferingOrder");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCode", b =>
                {
                    b.Property<int>("ServiceOfferingPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions");

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid?>("ServiceOfferingPromoCodeGuid");

                    b.HasKey("ServiceOfferingPromoCodeId");

                    b.ToTable("ServiceOfferingPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCodeRedemption", b =>
                {
                    b.Property<int>("ServiceOfferingPromoCodeRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("PromoCodeId");

                    b.Property<DateTime?>("RedemptionDate");

                    b.Property<string>("RedemptionNotes");

                    b.Property<int>("RedemptionStatusId");

                    b.Property<int>("ServiceOfferingId");

                    b.Property<Guid>("ServiceOfferingPromoCodeRedemptionGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<decimal>("ValueRedeemed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceOfferingPromoCodeRedemptionId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("RedemptionStatusId");

                    b.HasIndex("ServiceOfferingId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ServiceOfferingPromoCodeRedemption");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("SkillGuid");

                    b.Property<string>("SkillName")
                        .IsRequired();

                    b.HasKey("SkillId");

                    b.HasIndex("SkillName")
                        .IsUnique();

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SovrenParseStatistic", b =>
                {
                    b.Property<int>("SovrenParseStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<long>("NumTicks");

                    b.Property<string>("ResumeText");

                    b.Property<Guid>("SovrenParseStatisticsGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SovrenParseStatisticId");

                    b.ToTable("SovrenParseStatistics");
                });

            modelBuilder.Entity("UpDiddyApi.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Sequence");

                    b.Property<Guid?>("StateGuid");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Subscriber", b =>
                {
                    b.Property<int>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Auth0UserId")
                        .HasMaxLength(100);

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("Biography");

                    b.Property<string>("City");

                    b.Property<Guid?>("CityGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetCityGuidForSubscriber]([City], [StateId])");

                    b.Property<string>("CloudTalentIndexInfo");

                    b.Property<int>("CloudTalentIndexStatus");

                    b.Property<int>("CloudTalentIndexVersion");

                    b.Property<string>("CloudTalentUri");

                    b.Property<int?>("CommuteDistanceId");

                    b.Property<string>("ConnectedId");

                    b.Property<DateTime?>("ConnectedModifyDate");

                    b.Property<string>("CoverLetter");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("CurrentRoleProficiencies");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DreamJob");

                    b.Property<int?>("EducationLevelId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FacebookUrl");

                    b.Property<string>("FirstName");

                    b.Property<int?>("GenderId");

                    b.Property<string>("GithubUrl");

                    b.Property<int>("HasOnboarded");

                    b.Property<DateTime?>("HubSpotModifyDate");

                    b.Property<long?>("HubSpotVid");

                    b.Property<int>("IsDeleted");

                    b.Property<bool?>("IsFlexibleWorkScheduleRequired");

                    b.Property<bool>("IsVerified")
                        .HasColumnName("IsEmailVerifiedLegacy");

                    b.Property<bool?>("IsWillingToTravel");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastSignIn");

                    b.Property<string>("LinkedInAvatarUrl");

                    b.Property<DateTime?>("LinkedInSyncDate");

                    b.Property<string>("LinkedInUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<bool>("NotificationEmailsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("PassionProjectsDescription");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("PostalGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetPostalGuidForSubscriber]([PostalCode], [City], [StateId])");

                    b.Property<string>("PreferredLeaderStyle");

                    b.Property<string>("PreferredTeamType");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("StackOverflowUrl");

                    b.Property<Guid?>("StateGuid")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("[dbo].[fn_GetStateGuidForSubscriber]([StateId])");

                    b.Property<int?>("StateId");

                    b.Property<Guid?>("SubscriberGuid");

                    b.Property<string>("Title");

                    b.Property<int?>("TopicId");

                    b.Property<string>("TwitterUrl");

                    b.HasKey("SubscriberId");

                    b.HasIndex("CommuteDistanceId");

                    b.HasIndex("StateId");

                    b.HasIndex("TopicId");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberAction", b =>
                {
                    b.Property<int>("SubscriberActionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int?>("EntityId");

                    b.Property<int?>("EntityTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime>("OccurredDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SubscriberActionGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberAction");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEducationHistory", b =>
                {
                    b.Property<int>("SubscriberEducationHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("DegreeDate");

                    b.Property<int?>("EducationalDegreeId");

                    b.Property<int?>("EducationalDegreeTypeId");

                    b.Property<int>("EducationalInstitutionId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("SubscriberEducationHistoryGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberEducationHistoryId");

                    b.HasIndex("EducationalDegreeId");

                    b.HasIndex("EducationalDegreeTypeId");

                    b.HasIndex("EducationalInstitutionId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberEducationHistory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEmploymentTypes", b =>
                {
                    b.Property<int>("SubscriberEmploymentTypesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("EmploymentTypeId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberEmploymentTypesGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberEmploymentTypesId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("SubscriberId", "EmploymentTypeId")
                        .IsUnique()
                        .HasName("UIX_SubscriberEmploymentTypes_Subscriber_EmploymentType");

                    b.ToTable("SubscriberEmploymentTypes");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberFile", b =>
                {
                    b.Property<int>("SubscriberFileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobName");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MimeType");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberFileGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberFileId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberFile");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberGroup", b =>
                {
                    b.Property<int>("SubscriberGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("GroupId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid>("SubscriberGroupGuid");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberGroup");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLanguageProficiency", b =>
                {
                    b.Property<int>("SubscriberLanguageProficiencyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int>("LanguageId");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("ProficiencyLevelId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberLanguageProficiencyGuid");

                    b.HasKey("SubscriberLanguageProficiencyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProficiencyLevelId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberLanguageProficiencies");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLink", b =>
                {
                    b.Property<int>("SubscriberLinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Label")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberLinkGuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("SubscriberLinkId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberLinks");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotes", b =>
                {
                    b.Property<int>("SubscriberNotesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Notes");

                    b.Property<int>("RecruiterId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberNotesGuid");

                    b.Property<bool>("ViewableByOthersInRecruiterCompany");

                    b.HasKey("SubscriberNotesId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberNotes");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotification", b =>
                {
                    b.Property<int>("SubscriberNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("HasRead");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NotificationId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberNotificationGuid");

                    b.HasKey("SubscriberNotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberNotification");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberProfileStagingStore", b =>
                {
                    b.Property<int>("SubscriberProfileStagingStoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ProfileData");

                    b.Property<string>("ProfileFormat");

                    b.Property<string>("ProfileSource");

                    b.Property<int>("Status");

                    b.Property<int>("SubscriberId");

                    b.HasKey("SubscriberProfileStagingStoreId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberProfileStagingStore");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberPromoCode", b =>
                {
                    b.Property<int>("SubscriberPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid?>("SubscriberPromoCodeGuid");

                    b.HasKey("SubscriberPromoCodeId");

                    b.ToTable("SubscriberPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSendGridEvent", b =>
                {
                    b.Property<int>("SubscriberSendGridEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attempt");

                    b.Property<string>("Category");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Email");

                    b.Property<string>("Event");

                    b.Property<int>("EventStatus");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("Marketing_campaign_id");

                    b.Property<string>("Marketing_campaign_name");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Reason");

                    b.Property<string>("Response");

                    b.Property<string>("Sg_message_id");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<int?>("SubscriberId");

                    b.Property<Guid>("SubscriberSendGridEventGuid");

                    b.Property<string>("Type");

                    b.HasKey("SubscriberSendGridEventId");

                    b.ToTable("SubscriberSendGridEvent");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSkill", b =>
                {
                    b.Property<int>("SkillId");

                    b.Property<int>("SubscriberId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("SubscriberSkillGuid");

                    b.HasKey("SkillId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberSkill");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberWorkHistory", b =>
                {
                    b.Property<int>("SubscriberWorkHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<decimal>("Compensation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CompensationTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsCurrent");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("JobDescription");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("SubscriberWorkHistoryGuid");

                    b.Property<string>("Title");

                    b.HasKey("SubscriberWorkHistoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompensationTypeId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberWorkHistory");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TagGuid");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TagCourse", b =>
                {
                    b.Property<int>("TagCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<Guid?>("TagCourseGuid");

                    b.Property<int>("TagId");

                    b.HasKey("TagCourseId");

                    b.ToTable("TagCourse");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TagTopic", b =>
                {
                    b.Property<int>("TagTopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("TagId");

                    b.Property<Guid?>("TagTopicGuid");

                    b.Property<int>("TopicId");

                    b.HasKey("TagTopicId");

                    b.ToTable("TagTopic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TalentFavorite", b =>
                {
                    b.Property<int>("TalentFavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SubscriberId");

                    b.Property<Guid>("TalentFavoriteGuid");

                    b.Property<int>("TalentId");

                    b.HasKey("TalentFavoriteId");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("TalentId");

                    b.ToTable("TalentFavorite");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("Description");

                    b.Property<string>("DesktopImage");

                    b.Property<int?>("Hidden");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("MobileImage");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<string>("TabletImage");

                    b.Property<Guid?>("TopicGuid");

                    b.HasKey("TopicId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Traitify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentId");

                    b.Property<DateTime?>("CompleteDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("DeckId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ResultData");

                    b.Property<int>("ResultLength");

                    b.Property<int?>("SubscriberId");

                    b.Property<Guid>("TraitifyGuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Traitify");
                });

            modelBuilder.Entity("UpDiddyApi.Models.TraitifyCourseTopicBlendMapping", b =>
                {
                    b.Property<int>("TraitifyCourseTopicBlendMappingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("PersonalityTypeOne");

                    b.Property<string>("PersonalityTypeTwo");

                    b.Property<string>("TopicOneImgUrl");

                    b.Property<string>("TopicOneName");

                    b.Property<string>("TopicOneUrl");

                    b.Property<string>("TopicThreeImgUrl");

                    b.Property<string>("TopicThreeName");

                    b.Property<string>("TopicThreeUrl");

                    b.Property<string>("TopicTwoImgUrl");

                    b.Property<string>("TopicTwoName");

                    b.Property<string>("TopicTwoUrl");

                    b.Property<Guid>("TraitifyCourseTopicBlendMappingGuid");

                    b.HasKey("TraitifyCourseTopicBlendMappingId");

                    b.ToTable("TraitifyBlendCourseTopicMapping");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<string>("LoginUrl");

                    b.Property<string>("LogoUrl");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("VendorGuid");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorPromoCode", b =>
                {
                    b.Property<int>("VendorPromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<int?>("MaxAllowedNumberOfRedemptions");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("NumberOfRedemptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PromoCodeId");

                    b.Property<int>("VendorId");

                    b.Property<Guid?>("VendorPromoCodeGuid");

                    b.HasKey("VendorPromoCodeId");

                    b.ToTable("VendorPromoCode");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorStudentLogin", b =>
                {
                    b.Property<int>("VendorStudentLoginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("RegistrationUrl");

                    b.Property<int>("SubscriberId");

                    b.Property<int>("VendorId");

                    b.Property<string>("VendorLogin");

                    b.HasKey("VendorStudentLoginId");

                    b.ToTable("VendorStudentLogin");
                });

            modelBuilder.Entity("UpDiddyApi.Models.VendorTermsOfService", b =>
                {
                    b.Property<int>("VendorTermsOfServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<DateTime>("DateEffective");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("VendorId");

                    b.Property<Guid?>("VendorTermsOfServiceGuid");

                    b.HasKey("VendorTermsOfServiceId");

                    b.ToTable("VendorTermsOfService");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozCourseEnrollment", b =>
                {
                    b.Property<int>("WozCourseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<long>("EnrollmentDateUTC");

                    b.Property<Guid>("EnrollmentGuid");

                    b.Property<int>("EnrollmentStatus");

                    b.Property<int>("ExeterId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("SectionId");

                    b.Property<int>("WozEnrollmentId");

                    b.HasKey("WozCourseEnrollmentId");

                    b.ToTable("WozCourseEnrollment");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozCourseSection", b =>
                {
                    b.Property<int>("WozCourseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int>("Month");

                    b.Property<int>("Section");

                    b.Property<int>("Year");

                    b.HasKey("WozCourseSectionId");

                    b.ToTable("WozCourseSection");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozTermsOfService", b =>
                {
                    b.Property<int>("WozTermsOfServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("DocumentId");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("TermsOfService");

                    b.HasKey("WozTermsOfServiceId");

                    b.ToTable("WozTermsOfService");
                });

            modelBuilder.Entity("UpDiddyApi.Models.WozTransactionLog", b =>
                {
                    b.Property<int>("WozTransactionLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<string>("EndPoint");

                    b.Property<Guid?>("EnrollmentGuid");

                    b.Property<string>("InputParameters");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<string>("ResponseJson");

                    b.Property<string>("WozResponseJson");

                    b.HasKey("WozTransactionLogId");

                    b.ToTable("WozTransactionLog");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ZeroBounce", b =>
                {
                    b.Property<int>("ZeroBounceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CreateGuid");

                    b.Property<int>("ElapsedTimeInMilliseconds");

                    b.Property<string>("HttpStatus");

                    b.Property<int>("IsDeleted");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<Guid?>("ModifyGuid");

                    b.Property<int?>("PartnerContactId");

                    b.Property<string>("ResponseJSON");

                    b.Property<Guid>("ZeroBounceGuid");

                    b.HasKey("ZeroBounceId");

                    b.HasIndex("PartnerContactId");

                    b.ToTable("ZeroBounce");
                });

            modelBuilder.Entity("UpDiddyLib.Domain.Models.RecruiterStat", b =>
                {
                    b.Property<int>("RecruiterStatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CCInterviews");

                    b.Property<decimal>("CCSpread")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CCStarts");

                    b.Property<int>("CCSubmittals");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("OpCoInterviews");

                    b.Property<decimal>("OpCoSpread")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OpCoStarts");

                    b.Property<int>("OpCoSubmittals");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("RecruiterStatId");

                    b.ToTable("RecruiterStat");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.HiringManager", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.InterviewRequest", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId");

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.Pipeline", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.B2B.PipelineProfile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.B2B.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignCourseVariant", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany("CampaignCourseVariant")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseVariant", "CourseVariant")
                        .WithMany()
                        .HasForeignKey("CourseVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RebateType", "RebateType")
                        .WithMany()
                        .HasForeignKey("RebateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Refund", "Refund")
                        .WithMany()
                        .HasForeignKey("RefundId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPartnerContact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany("CampaignPartnerContact")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CampaignPhase", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.City", b =>
                {
                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Company", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Contact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.Course", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CourseLevel", "CourseLevel")
                        .WithMany()
                        .HasForeignKey("CourseLevelId");

                    b.HasOne("UpDiddyApi.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CoursePage", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("UpDiddyApi.Models.CoursePageStatus", "CoursePageStatus")
                        .WithMany()
                        .HasForeignKey("CoursePageStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseSite", "CourseSite")
                        .WithMany("CoursePages")
                        .HasForeignKey("CourseSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseReferral", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany("CourseSkills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CourseVariant", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany("CourseVariants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CourseVariantType", "CourseVariantType")
                        .WithMany()
                        .HasForeignKey("CourseVariantTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.CandidateReference", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("CandidateReference")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheck", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheckVendor", "ReferenceCheckVendor")
                        .WithMany()
                        .HasForeignKey("ReferenceCheckVendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckReport", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("ReferenceCheckReport")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.CrossChq.ReferenceCheckStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CrossChq.ReferenceCheck", "ReferenceCheck")
                        .WithMany("ReferenceCheckStatus")
                        .HasForeignKey("ReferenceCheckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.EmailVerification", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithOne("EmailVerification")
                        .HasForeignKey("UpDiddyApi.Models.EmailVerification", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Enrollment", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("Enrollments")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CampaignCourseVariant", "CampaignCourseVariant")
                        .WithMany()
                        .HasForeignKey("CampaignId", "CourseVariantId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.FileDownloadTracker", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Profile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.AzureIndexStatus", "AzureIndexStatus")
                        .WithMany()
                        .HasForeignKey("AzureIndexStatusId");

                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("UpDiddyApi.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany()
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileComment", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileDocument", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileEmploymentType", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany("ProfileEmploymentTypes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSearchLocation", b =>
                {
                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileTag", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.ProfileWishlist", b =>
                {
                    b.HasOne("UpDiddyApi.Models.G2.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.G2.Wishlist", "Wishlist")
                        .WithMany()
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.G2.Wishlist", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.GroupPartner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.HiringSolvedResumeParse", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobApplication", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobApplicationStatus", "JobApplicationStatus")
                        .WithMany()
                        .HasForeignKey("JobApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPage", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPageStatus", "JobPageStatus")
                        .WithMany()
                        .HasForeignKey("JobPageStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId");

                    b.HasOne("UpDiddyApi.Models.JobSite", "JobSite")
                        .WithMany("JobListings")
                        .HasForeignKey("JobSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPosting", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.CompensationType", "CompensationType")
                        .WithMany()
                        .HasForeignKey("CompensationTypeId");

                    b.HasOne("UpDiddyApi.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId");

                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("UpDiddyApi.Models.ExperienceLevel", "ExperienceLevel")
                        .WithMany()
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("UpDiddyApi.Models.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("UpDiddyApi.Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId");

                    b.HasOne("UpDiddyApi.Models.Postal", "Postal")
                        .WithMany()
                        .HasForeignKey("PostalId");

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId");

                    b.HasOne("UpDiddyApi.Models.SecurityClearance", "SecurityClearance")
                        .WithMany()
                        .HasForeignKey("SecurityClearanceId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingAlert", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobPostingSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany("JobPostingSkills")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobReferral", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobPosting", "JobPosting")
                        .WithMany()
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("RefereeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.JobSiteScrapeStatistic", b =>
                {
                    b.HasOne("UpDiddyApi.Models.JobSite", "JobSite")
                        .WithMany()
                        .HasForeignKey("JobSiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.LinkedInToken", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.NotificationGroup", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Offer", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Partner", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerType", "PartnerType")
                        .WithMany()
                        .HasForeignKey("PartnerTypeId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContact", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Contact", "Contact")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.CampaignPhase", "CampaignPhase")
                        .WithMany()
                        .HasForeignKey("CampaignPhaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany("PartnerContactFiles")
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactFileLeadStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContactFile", "PartnerContactFile")
                        .WithMany("PartnerContactFileLeadStatuses")
                        .HasForeignKey("PartnerContactFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerContactLeadStatus", b =>
                {
                    b.HasOne("UpDiddyApi.Models.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany("PartnerContactLeadStatuses")
                        .HasForeignKey("PartnerContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerReferrer", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner")
                        .WithMany("Referrers")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PartnerWebRedirect", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Partner")
                        .WithOne("WebRedirect")
                        .HasForeignKey("UpDiddyApi.Models.PartnerWebRedirect", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PasswordResetRequest", b =>
                {
                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Postal", b =>
                {
                    b.HasOne("UpDiddyApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCode", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoType", "PromoType")
                        .WithMany()
                        .HasForeignKey("PromoTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.PromoCodeRedemption", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CourseVariant", "CourseVariant")
                        .WithMany()
                        .HasForeignKey("CourseVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Recruiter", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.RecruiterCompany", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany("RecruiterCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Recruiter", "Recruiter")
                        .WithMany("RecruiterCompanies")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParse", b =>
                {
                    b.HasOne("UpDiddyApi.Models.SubscriberFile", "SubscriberFile")
                        .WithMany()
                        .HasForeignKey("SubscriberFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ResumeParseResult", b =>
                {
                    b.HasOne("UpDiddyApi.Models.ResumeParse", "ResumeParse")
                        .WithMany()
                        .HasForeignKey("ResumeParseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingItem", b =>
                {
                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany("ServiceOfferingItems")
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingOrder", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany()
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.ServiceOfferingPromoCodeRedemption", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.RedemptionStatus", "RedemptionStatus")
                        .WithMany()
                        .HasForeignKey("RedemptionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.ServiceOffering", "ServiceOffering")
                        .WithMany()
                        .HasForeignKey("ServiceOfferingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.State", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Subscriber", b =>
                {
                    b.HasOne("UpDiddyApi.Models.CommuteDistance", "CommuteDistance")
                        .WithMany()
                        .HasForeignKey("CommuteDistanceId");

                    b.HasOne("UpDiddyApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("UpDiddyApi.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberAction", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEducationHistory", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EducationalDegree", "EducationalDegree")
                        .WithMany()
                        .HasForeignKey("EducationalDegreeId");

                    b.HasOne("UpDiddyApi.Models.EducationalDegreeType", "EducationalDegreeType")
                        .WithMany()
                        .HasForeignKey("EducationalDegreeTypeId");

                    b.HasOne("UpDiddyApi.Models.EducationalInstitution", "EducationalInstitution")
                        .WithMany()
                        .HasForeignKey("EducationalInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberEducationHistory")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberEmploymentTypes", b =>
                {
                    b.HasOne("UpDiddyApi.Models.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberEmploymentTypes")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberFile", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberFile")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberGroup", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLanguageProficiency", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Language", "Language")
                        .WithMany("SubscriberLanguageProficiencies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.ProficiencyLevel", "ProficiencyLevel")
                        .WithMany("SubscriberLanguageProficiencies")
                        .HasForeignKey("ProficiencyLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberLanguageProficiencies")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberLink", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberLinks")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotes", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberNotification", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberNotifications")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberProfileStagingStore", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("ProfileStagingStore")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberSkill", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberSkills")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.SubscriberWorkHistory", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("UpDiddyApi.Models.CompensationType", "CompensationType")
                        .WithMany()
                        .HasForeignKey("CompensationTypeId");

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany("SubscriberWorkHistory")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.TalentFavorite", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UpDiddyApi.Models.Subscriber", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UpDiddyApi.Models.Traitify", b =>
                {
                    b.HasOne("UpDiddyApi.Models.Subscriber", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId");
                });

            modelBuilder.Entity("UpDiddyApi.Models.ZeroBounce", b =>
                {
                    b.HasOne("UpDiddyApi.Models.PartnerContact", "PartnerContact")
                        .WithMany()
                        .HasForeignKey("PartnerContactId");
                });
#pragma warning restore 612, 618
        }
    }
}
