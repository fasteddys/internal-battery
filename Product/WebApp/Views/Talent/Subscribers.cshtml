@using Microsoft.AspNetCore.Mvc.Localization
@using UpDiddy.ViewModels
@using UpDiddyLib.Dto
@using System.Collections.Generic;
@using System;
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@model TalentSubscriberViewModel
<div class="container-fluid talent-nav bg-color-primary">
    <div class="container">
        <div class="row">
            <div class="col-md">
                <ul class="nav nav-talent">
                    <li class="nav-link active">
                        <a class="text-white" href="/Talent/Subscribers">Subscribers</a>
                    </li>
                    <li class="nav-link" href="#">
                        <a class="text-white" href="#">Analytics</a>
                    </li>
                    <li class="nav-link">
                        <a class="text-white" href="/Talent/jobpostings">My Job Postings</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="container talent">

    <div class="row">




        <div class="col-sm">
            <div class="form-inline mt-3 mb-1">
                <h2> Talent Search</h2>
 
            </div>
        </div>

        <div class="col-md pr-0">
            <div class= "mt-3 mb-1"> 
                <div class="float-right">
                    <button class="btn btn-primary" onclick="doSearch(true);">Reset</button>
                    @if ((await AuthorizationService.AuthorizeAsync(User, "IsCareerCircleAdmin")).Succeeded)
                    {
                        <button class="btn btn-primary" onclick="doDownload();">Download</button>
                    }

                </div>

            </div>
        </div>

    </div>



                <div class="row">




                    <div class="col-sm mt-1 mb-3">
                        <div class="form-inline">
                            <div class="form-group">
                                <label for="GridSearch" class="sr-only">Search</label>
                                <input id="GridSearch" class="form-control mr-1" placeholder="Keywords" onkeyup="SearchOnEnter(event)" />
                                <label for="GridSearchLocation" class="sr-only ml-3">Location</label>
                                <input id="GridSearchLocation" class="form-control mr-1" placeholder="Location" onkeyup="SearchOnEnter(event)" />
                                <label for="select-filter" class="pr-2">Sort By:</label>
                                @Html.DropDownListFor(model => model.SelectedSortOption, Model.SortOptions, new { @class = "form-control mr-1", onchange = "doSearch(false)" })
                                <label for="select-filter" class="pr-2">Partner Attribution:</label>
                                @Html.DropDownListFor(model => model.SelectedSubscriberSource, Model.SubscriberSources, new { @class = "form-control", onchange = "doSearch(false)" })
                                <button class="btn btn-primary" onclick="doSearch(false);">Search</button>


                            </div>
                   




                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm">
                        @Html.AjaxGrid(Url.Action("SubscriberGrid"))
                    </div>
                </div>
                @section Scripts{
                    <script type="text/javascript">
            var url = '@Url.Action("Subscriber", "Talent")';

            window.onload = function () {
                var grid = new MvcGrid(document.querySelector('.mvc-grid'));
            }


            function SearchOnEnter(e) {
                if (e.code == "Enter")
                    doSearch(false);

            }

            function doDownload() {
                var grid = new MvcGrid(document.querySelector('.mvc-grid'));
                var search = document.getElementById('GridSearch').value;
                var searchLocation = document.getElementById('GridSearchLocation').value;
                var searchQuery = encodeURIComponent(search);
                var searchLocationQuery = encodeURIComponent(searchLocation);
                var searchFilter = encodeURIComponent(document.getElementById('SelectedSubscriberSource').value);
                var searchLocationFilter = encodeURIComponent(document.getElementById('SelectedSubscriberSource').value);
                var sortOrder = encodeURIComponent(document.getElementById('SelectedSortOption').value);
                var url = 'subscriberData';
                $.ajax({
                    url: url,
                    data: {
                        searchQuery: searchQuery,
                        searchFilter: searchFilter,
                        searchLocationQuery: searchLocationQuery,
                        sortOrder: sortOrder
                    },
                    contentType: "application/json; charset=utf-8",
                    method: "get",
                    success: function (data, textStatus, jqXHR) {
                        downloadUserFile(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        ToastService.error(textStatus, jqXHR.responseJSON.value.description);
                    }
                });
            }

            function downloadUserFile(data) {
                var campaign = $("#SelectedSubscriberSource option:selected").text();
                campaign = campaign.substring(0, campaign.indexOf('('));
                var fileData = createCsv(campaign, data.profiles);
                var fileName = "users-" + campaign + "-" + moment().format("MMDDYYYYYHHMMSS") + ".csv";
                var regex = new RegExp(" ", "g");
                fileName = fileName.replace(regex, "");
                downloadFile(fileName, fileData);
            }

            function createCsv(campaign, subscribers) {
                var rVal = "Campaign, Email,FirstName,LastName,CreateDate" + '\n';
                var i = 0;
                while(i < subscribers.length)
                {
                    rVal += campaign + "," +  subscribers[i].email + "," + subscribers[i].firstName + "," + subscribers[i].lastName + "," +  moment(subscribers[i].createDate).format("MM/DD/YYYY") + '\n';
                    ++i;
                }
                var regex = new RegExp("null", "g");
                return rVal.replace(regex, "");
            }

            function downloadFile(filename, data) {
                var blob = new Blob([data], { type: 'text/csv' });
                if (window.navigator.msSaveOrOpenBlob) {
                    window.navigator.msSaveBlob(blob, filename);
                }
                else {
                    var elem = window.document.createElement('a');
                    elem.href = window.URL.createObjectURL(blob);
                    elem.download = filename;
                    document.body.appendChild(elem);
                    elem.click();
                    document.body.removeChild(elem);
                }
            }

            function doSearch(isReset) {
                if (isReset) {
                    document.getElementById('GridSearch').value = '';
                    $('#SelectedSubscriberSource option:eq(0)').prop('selected', true);
                }

                var grid = new MvcGrid(document.querySelector('.mvc-grid')
                );

                document.querySelector('.mvc-grid').addEventListener('reloadfail', function (e) {
                    ToastService.error("Please confirm your are logged in by reloading this page" , "Search Error");
                });


                var search = document.getElementById('GridSearch').value;
                var searchLocation = document.getElementById('GridSearchLocation').value;
                var searchAndFilter = {
                    searchFilter: encodeURIComponent(document.getElementById('SelectedSubscriberSource').value),
                    searchQuery: encodeURIComponent(search),
                    searchLocationQuery: encodeURIComponent(searchLocation),
                    sortOrder: encodeURIComponent(document.getElementById('SelectedSortOption').value)
                };


                console.log(JSON.stringify(searchAndFilter));
                // combining the filter and search because of a limitation with the mvc grid
                grid.query.set('searchAndFilter', JSON.stringify(searchAndFilter));
                grid.reload();
            }
                    </script>
                    <style>
                        .list-grid {
                            font-size: 12px;
                        }
                    </style>
                }
            </div>
