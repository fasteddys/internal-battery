@using Microsoft.AspNetCore.Mvc.Localization
@using UpDiddy.ViewModels
@using UpDiddyLib.Dto
@using UpDiddyLib.Helpers
@using System.Collections.Generic;
@using System;

@model IEnumerable<ContactDto>


<div id="AdminContainer" class="container-fluid bg-color-primary">
    <div class="container">
        <div class="row">
            <div class="col-md">
                <ul class="nav nav-admin">
                    <li class="nav-link active">
                        <a class="text-white" href="/Admin/Skills">Skills</a>
                    </li>
                    <li class="nav-link" href="#">
                        <a class="text-white" href="/marketing/campaignstatistics">Campaign Statistics</a>
                    </li>
                    <li class="nav-link" href="#">
                        <a class="text-white" href="/Admin/Contacts">Contacts</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="admin-contacts-container">
    <div class="container admin">
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Choose Partner:</h4>
                [dropdown list goes here]
                <!-- replace the hidden input below and the associated javascript logic once the partner UI is done -->
                <input type="hidden" id="partnerGuid" value="C250AE21-2A81-4659-A05E-59DE90B12AF9" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Choose CSV file(s):</h4>
                <form id="upload" method="post" action="contacts/upload" enctype="multipart/form-data">
                    <div id="drop">
                        Drop Here

                        <a>Browse</a>
                        <input type="file" name="contactsFile" multiple />
                    </div>

                    <ul>
                        <!-- The file uploads will be shown here -->
                    </ul>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Contact Preview</h4>
                <table id="contactTablePreview" class="table">
                    <thead>
                        <tr>
                            <!-- Column headers from the uploaded file will be placed here -->
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Preview record data will be placed here -->
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Initial validation</h4>
                <ul id="importValidationSummary" class="list-group">
                    <!-- Import validation messages will be added here -->
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Import the data</h4>
                <input type="hidden" id="cacheKey" />
                <button type="button" id="btnImportContacts" class="btn btn-primary" onclick="importContacts()">Import Contacts</button>
                <!-- Create controls to initiate the import here -->
            </div>
        </div>
        <div class="row">
            <div class="col-sm mt-3 mb-3">
                <h4>Processing results</h4>
                <ul id="processingResultsSummary">
                    <!-- This is where we will put information about what *actually* happened during the import process - note that this may be different than the initial validation -->
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
    <script type="text/javascript">

        var contactsUrl = '@Url.Action("Contacts", "Admin")';

        function importContacts() {
            $.ajax({
                type: 'PUT',
                url: contactsUrl + '/import/' + $('#partnerGuid').val() + '/' + encodeURIComponent($('#cacheKey').val()),
                success: function (data) {
                    // show summary of import actions which have occurred (if the file was processed)
                    var importActions = data.result;
                    importActions.forEach(function (importAction, idx) {
                        var importActionHtml = '<li>';
                        // todo: come up with a better way to format messages
                        importActionHtml += importAction.count + ' contacts were ' + importAction.importBehavior.toLowerCase();
                        if (importAction.reason !== null)
                            importActionHtml += ' for the following reason: ' + importAction.reason;
                        importActionHtml += '</li>';
                        $('#processingResultsSummary').append(importActionHtml);
                    });
                },
                error: function () {
                    // todo: add toast message?
                    alert('replace with toast, reset form, disable import button, etc');
                }
            });
        }

        $(function () {

            var ul = $('#upload ul');

            $('#drop a').click(function () {
                // Simulate a click on the file input button
                // to show the file browser dialog
                $(this).parent().find('input').click();
            });

            // Initialize the jQuery File Upload plugin
            $('#upload').fileupload({

                // This element will accept file drag/drop uploading
                dropZone: $('#drop'),

                // This function is called when a file is added to the queue;
                // either via the browse button, or via drag/drop:
                add: function (e, data) {

                    var tpl = $('<li class="working"><input type="text" value="0" data-width="48" data-height="48"' +
                        ' data-fgColor="#0788a5" data-readOnly="1" data-bgColor="#3e4043" /><p></p><span></span></li>');

                    // Append the file name and file size
                    tpl.find('p').text(data.files[0].name)
                        .append('<i>' + formatFileSize(data.files[0].size) + '</i>');

                    // Add the HTML to the UL element
                    data.context = tpl.appendTo(ul);

                    // Initialize the knob plugin
                    tpl.find('input').knob();

                    // Listen for clicks on the cancel icon
                    tpl.find('span').click(function () {

                        if (tpl.hasClass('working')) {
                            jqXHR.abort();
                        }

                        tpl.fadeOut(function () {
                            tpl.remove();
                        });

                    });

                    // Automatically upload the file once it is added to the queue
                    var jqXHR = data.submit();
                },

                progress: function (e, data) {

                    // Calculate the completion percentage of the upload
                    var progress = parseInt(data.loaded / data.total * 100, 10);

                    // Update the hidden input field and trigger a change
                    // so that the jQuery knob plugin knows to update the dial
                    data.context.find('input').val(progress).change();

                    if (progress == 100) {
                        data.context.removeClass('working');
                    }
                },

                done: function (e, data) {

                    // load the preview data for the contacts
                    var contactsPreview = data.result.contactsPreview;
                    var isHeaderProcessed = false;
                    contactsPreview.forEach(function (row) {
                        // create table header (if it does not yet exist)
                        if (!isHeaderProcessed) {
                            Object.keys(row).forEach(function (key, idx) {
                                if (key === 'metadata') {
                                    Object.keys(row[key]).forEach(function (metadataKey, i) {
                                        $('#contactTablePreview thead tr').append('<th scope="col" style="background-color: yellow">' + metadataKey + '</th>');
                                    });
                                } else {
                                    $('#contactTablePreview thead tr').append('<th scope="col">' + key + '</th>');
                                }
                            });
                            isHeaderProcessed = true;
                        }
                        // create table rows
                        var rowHtml = '<tr>';
                        Object.keys(row).forEach(function (key, idx) {
                            if (key === 'metadata') {
                                Object.keys(row[key]).forEach(function (metadataKey, i) {
                                    rowHtml += '<td>';
                                    rowHtml += (row[key])[metadataKey];
                                    rowHtml += '</td>';
                                });
                            } else {
                                rowHtml += '<td>';
                                rowHtml += row[key];
                                rowHtml += '</td>';
                            }
                        });
                        rowHtml += '</tr>';
                        $('#contactTablePreview tbody').append(rowHtml);
                    });

                    // show summary of validation actions which will occur if the file is processed (e.g. removed duplicate rows by email)
                    var importActions = data.result.importActions;
                    importActions.forEach(function (importAction, idx) {
                        var importActionHtml = '<li>';
                        // todo: come up with a better way to format messages
                        importActionHtml += importAction.count + ' contacts will be ' + importAction.importBehavior.toLowerCase();
                        if (importAction.reason !== null)
                            importActionHtml += ' for the following reason: ' + importAction.reason;
                        importActionHtml += '</li>';
                        $('#importValidationSummary').append(importActionHtml);
                    });

                    // set cache key for import operation
                    $('#cacheKey').val(data.result.cacheKey);
                },

                fail: function (e, data) {
                    // todo: add toast message?
                    alert('replace with toast, reset form, disable import button, etc');
                }
            });

            // Prevent the default action when a file is dropped on the window
            $(document).on('drop dragover', function (e) {
                e.preventDefault();
            });

            // Helper function that formats the file sizes
            function formatFileSize(bytes) {
                if (typeof bytes !== 'number') {
                    return '';
                }

                if (bytes >= 1000000000) {
                    return (bytes / 1000000000).toFixed(2) + ' GB';
                }

                if (bytes >= 1000000) {
                    return (bytes / 1000000).toFixed(2) + ' MB';
                }

                return (bytes / 1000).toFixed(2) + ' KB';
            }

        });
    </script>
}
