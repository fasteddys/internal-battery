@using React.AspNet;
@using UpDiddy.ViewModels
@using UpDiddyLib.Dto
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@model BrowseJobsByTypeViewModel

<div class="browse-jobs-body-container">
    <div class="job-search-container">
        <div class="job-search-results">
            <div class="container">
                @Html.React("Breadcrumb", new { breadcrumbObject = Model.Breadcrumbs })

                @if (Model.Items == null)
                {
                    <h1 class="pl-3 pt-3 pb-3"><strong>@Model.Header Jobs:</strong></h1>
                    await Html.RenderPartialAsync("Partials/_JobResultsPartial", Model);

                    if (Model.NumberOfPages > 1)
                    {
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">
                                @if (Model.CurrentPage != 1)
                                {
                                    <li class="page-item">
                                        @{
                                            string urlFirst = Model.BaseUrl + "/1";
                                        }
                                        <a class="page-link" href="@urlFirst">First</a>
                                    </li>
                                }
                                @for (int i = Model.PaginationRangeLow; i <= Model.PaginationRangeHigh; i++)
                                {
                                    string url = Model.BaseUrl + "/" + i;
                                    string active = i == Model.CurrentPage ? "active" : string.Empty;
                                    if (i != Model.CurrentPage)
                                    {
                                        <li class="page-item @active"><a class="page-link" href="@url">@i</a></li>
                                    }
                                    else
                                    {
                                        <li class="page-item @active"><span class="page-link" href="@url">@i</span></li>

                                    }
                                }
                                @if (Model.CurrentPage != Model.NumberOfPages)
                                {
                                    <li class="page-item">
                                        @{
                                            string urlLast = Model.BaseUrl + "/" + Model.NumberOfPages;
                                        }
                                        <a class="page-link" href="@urlLast">Last</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }

                }
                else
                {

                    @Html.React("BrowseJobs", new { list = Model.Items, header = Model.Header, baseUrl = Context.Request.Path });
                }
            </div>
        </div>


    </div>
</div>

