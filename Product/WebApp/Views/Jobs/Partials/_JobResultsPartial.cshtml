@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using UpDiddyLib.Dto;
@using UpDiddyLib.Helpers;
@using UpDiddy.ViewModels;
@using React.AspNet;
@model JobSearchViewModel;

@{ bool showComparableJobsHeader = this.ViewContext?.HttpContext?.Response?.StatusCode == 404; }
<div class="job-container">
    @if (Model.JobsSearchResult.Count != 0)
    {
        @if (showComparableJobsHeader)
        {
            <div>
                <h2>
                    Sorry, this job has expired or no longer exists!
                    <br />
                    You could:
                </h2>
                <br />
                <ul>
                    <li>Try using the form at the top to start a new search.</li>
                    <li>Try widening your search filters.</li>
                    <li><a asp-area="" asp-controller="Jobs" asp-action="Index">Try browsing all jobs.</a></li>
                    <li>Try searching the recommended jobs below:</li>
                </ul>
                <br />
                @if (!string.IsNullOrEmpty(Model.Location))
                {
                    <h2>Jobs that might interest you in @Model?.Location</h2>
                }
            </div>
        }

        foreach (var jobSearchResult in Model.JobsSearchResult)
        {
            string url = @jobSearchResult.SemanticJobPath;
            url = GoogleCloudEventsTrackingDto.AddParametersToUrl(url, Model.RequestId, Model.ClientEventId);
            <div class="job-tile shadow-0">
                <div class="row">
                    <div class="col-12 col-md-3">
                        <div class="row">
                            <span class="job-title">
                                <a href="@url">@jobSearchResult.Title</a>
                            </span>
                        </div>
                        <div>
                            <span class="job-location">@jobSearchResult.Province - @jobSearchResult.City</span>
                        </div>
                        <div>
                            <span class="job-post-date">Posted- @jobSearchResult.PostingDateUTC.ToShortDateString()</span>
                        </div>
                        <div class="mt-1">
                            @Html.React("Favorite",
                     new {
                         jobGuid = jobSearchResult.JobPostingGuid,
                         jobPostingFavoriteGuid = Model.FavoritesMap.ContainsKey(jobSearchResult.JobPostingGuid) ? (Guid?)Model.FavoritesMap[jobSearchResult.JobPostingGuid] : null
                     }
                 )
                        </div>
                    </div>
                    <div class="col-12 col-md-6">
                        <div class="row">
                            <span class="job-description"> @Html.Raw(Utils.RemoveHTML(jobSearchResult.Description).Substring(0, 227)))...</span>
                        </div>
                        <div class="row">
                            <a class="job-tile-more-info" href="@url">More</a>
                        </div>
                    </div>
                    <div class="company-logo col-12 col-md-3">
                        
                            @{
                                if (!string.IsNullOrWhiteSpace(jobSearchResult.CompanyLogoUrl))
                                {
                                    <img src="@jobSearchResult.CompanyLogoUrl" />
                                }
                                else
                                {
                                    <span><i class="far fa-building mr-2"></i> @jobSearchResult.CompanyName</span>
                                }
                            }
                        
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-job-text">
            There are no results available.
        </div>
    }
</div>