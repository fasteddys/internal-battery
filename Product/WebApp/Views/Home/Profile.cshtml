@using Microsoft.AspNetCore.Mvc.Localization
@using UpDiddy.ViewModels
@using UpDiddyLib.Dto
@using System.Collections.Generic;
@using System;
@using React.AspNet;
@model ProfileViewModel
@section Scripts
    {

 




<script src="~/js/modules/career-circle-signalr.js"></script>
<script type="text/javascript">
        // this must be present for the API call used in site.js
        var url = '@Url.Action("GetStatesByCountry", "Home")';
        var subscriberSkills = @Json.Serialize(Model.Skills);

        document.addEventListener("DOMContentLoaded", function (event) {

            $('#PersonalInfoForm').submit(function (e) {
                $.ajax({
                    type: "POST",
                    url: '/home/UpdateProfileInformation',
                    data: $(this).serialize(),
                    success: function (html) {
                        if (html.statusCode === 200) {
                            location.reload();
                        }
                        else if (html.statusCode === 400) {
                            var errorsList = html.description.split("|");
                            for (var i = 0; i < errorsList.length; i++) {
                                if (errorsList[i] !== "") {
                                    ToastService.warning(errorsList[i]);
                                }

                            }
                        }
                        else {
                            ToastService.error("Something went wrong. You may want to try reloading the page before retrying your last action.");
                        }
                    }
                });
                e.preventDefault();
            });
        });

        function avatarDelete() {

            bootbox.confirm({
                message: "Are you sure you want to delete your avatar?",
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        classname: 'btn-danger'
                    }
                },
                callback: function callback(result) {
                    if (result) {
                        var DefaultAvatar = '@Model.DefaultAvatar';
                        // remove the image on the server
                        CareerCircleAPI.removeAvatar()
                            .then(function (payload) {
                                // update the local image
                                document.getElementById('imgAvatar').src = DefaultAvatar;
                            })
                            .catch(function (err) {
                                ToastService.error('Something unexpected happened, and we are looking into it.');
                            })
                    }
                }
            });
        }

        function avatarSelect() {
            $("#fuAvatar").click();
        }

        function avatarUpload() {
            var maxFileSize = @Model.MaxAvatarFileSize;
            var myFiles = $('#fuAvatar').prop('files');
            var myFile = myFiles[0];
            if (myFile.size > maxFileSize) {
                ToastService.error("Sorry the selected avatar file is too big.  Maximum allowable size is " + maxFileSize);
                return;
            }
            // update the image on the server
            CareerCircleAPI.uploadAvatar(myFile)
            .then(function (payload) {
                // set the image locally
                document.getElementById('imgAvatar').src = window.URL.createObjectURL(myFile);
            })
            .catch(function (err) {
                    ToastService.error('Something unexpected happened, and we are looking into it.');
            })

        }

        var resumeUpload = {
            init: function () {
                // resume upload component
                $('.resume-upload-form .file-input').on('change', function () {
                    var $input = $('.file-input');
                    if ($input[0].files.length > 0) {
                        $('.resume-upload-form').addClass('has-file');
                        $('.resume-upload-form .change-file .file-name').text($input[0].files[0].name);
                    } else {
                        $('.resume-upload-form').removeClass('has-file');
                        $('.resume-upload-form .change-file .file-name').text('');
                    }
                });

                $('.resume-control .edit').click(function (event) {
                    event.preventDefault();
                    $('.resume-file-component').toggleClass('editing');
                });

                $('.resume-upload-form .cancel').click(function (event) {
                    event.preventDefault();
                    $('.resume-file-component').toggleClass('editing');
                });

                $('.resume-control .delete').click(function () {
                    event.preventDefault();

                    $('.resume-control button').prop('disabled', true);
                    $('.resume-control button').addClass('disabled');

                    var fileGuid = $('.resume-control .delete').data('guid');
                    submitting = true;
                    CareerCircleAPI.deleteFile(fileGuid)
                        .then(function () {
                            location.reload();
                        })
                        .catch(function (err) {
                            ToastService.error('Something unexpected happened, and we are looking into it.');
                        })
                        .finally(function () {
                            $('.resume-control button').prop('disabled', false);
                            $('.resume-control button').removeClass('disabled');
                        });
                });

                $('.resume-upload-form').submit(function (event) {
                    event.preventDefault();
                    var $input = $('.file-input');

                    if ($input[0].files.length == 0)
                        return;

                    $('.resume-upload-form').addClass('loading');
                    $('.resume-upload-form .btn').prop('disabled', true);
                    $('.resume-upload-form .btn').addClass('disabled');

                    CareerCircleAPI.uploadResume($input[0].files[0])
                        .then(function (x) {
                            location.reload();
                        })
                        .catch(function (err) {
                            ToastService.error('Something unexpected happened, and we are looking into it.');
                        })
                        .finally(function () {
                            $('.resume-upload-form').removeClass('loading');
                            $('.resume-upload-form .btn').prop('disabled', false);
                            $('.resume-upload-form .btn').removeClass('disabled');
                        });
                });
            }
        }

        var emailVerification = {
            init: function () {
                $('.email-verification-btn').click(function (e) {
                    var $this = $(this);
                    $this.prop('disabled', true);
                    var verifyLink = new URL("/email/confirm-verification/", window.location.origin).href;
                    CareerCircleAPI.requestVerification(verifyLink).then(function (res) {
                        ToastService.success('Verification email sent.')
                    })
                    .catch(function (e) {
                        ToastService.error('An unexpected error occurred. Please try again later.');
                    })
                    .finally(function () {
                        $this.prop('disabled', false);
                    });
                });
            }
        }


        function ResumeParseComplete(message)
        {
           var obj = JSON.parse(message);
           var evt = new CustomEvent('onResumeMergeNeeded', { detail: obj });
            window.dispatchEvent(evt);
           // reload window on signalr callback to show newly parsed stuff 
            window.location = "/Home/Profile";
  
        };


        function DelegateParseMerge(e)
        {
            var evt1 = new CustomEvent('onDoParseMerge', { detail: e.detail });
            window.dispatchEvent(evt1)         
        }


        $(document).ready(function () {
            resumeUpload.init();
            emailVerification.init();
            CareerCircleSignalR.connect("@Model.SubscriberGuid").then(function (result) {
               CareerCircleSignalR.listen("ResumeUpLoadAndParseVerb", ResumeParseComplete);
            });


            window.addEventListener('onDelegateParseMerge', DelegateParseMerge);



        });

    </script>
    <script src="~/js/modules/selectize-handling.js" asp-append-version="true"></script>
    <script src="~/js/modules/profile.js" asp-append-version="true"></script>
}

@* Modals for editing *@
<form asp-controller="Home" asp-action="UpdateProfileInformation" id="PersonalInfoForm"></form>
<input type="hidden" form="PersonalInfoForm" value="@Model.SubscriberGuid" asp-for="SubscriberGuid" />
<input type="hidden" id="SavedStateGuid" value="@(Model.SelectedState)" />

<!-- Personal Info Modal -->
@{ Html.RenderPartial("_PersonalInfoModalPartial", Model); }


<!-- Education History Modal    -->
@{ Html.RenderPartial("_EducationHistoryModalPartial", Model); }




<!-- Work History Modal -->
@{ Html.RenderPartial("_WorkHistoryModalPartial", Model); }

<!-- Contact Info Modal -->
@{ Html.RenderPartial("_ContactInfoModalPartial", Model); }

<!-- Social Links Modal -->
@{ Html.RenderPartial("_SocialLinksModalPartial", Model); }

<!-- Skills Modal -->
@{ Html.RenderPartial("_SkillsModalPartial", Model); }


<div class="profile-container">
    <div class="row profile-hero">
        <div class="col-md-12">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <div class="row profile-header-info">

                            <div class="col-md-4 no-padding">
                                <div class="career-circle-profile-text">My CareerCircle Profile</div>
                                <img src="@Model.AvatarUrl" id="imgAvatar" class="career-circle-profile-avatar" onclick="avatarSelect()" />
                                <div>
                                    <form>
                                        <input type="file" id="fuAvatar" class="d-none" accept=".jpg, .png, .jpeg, .gif, .bmp, .tif, .tiff|image/* .heic .heif" onchange="avatarUpload()" />

                                        <button type="button" class="btn btn-text text-primary edit px-2" onclick="avatarSelect()"> <i class="fas fa-edit text-light-blue" title="Edit"></i></button>
                                        <button type="button" class="btn btn-text text-primary delete px-2" onclick="avatarDelete()"><i class="fas fa-minus-circle text-light-blue" title="Delete"></i> </button>

                                    </form>
                                </div>
                                <br/>
                                <div id="ProfileName" class="career-circle-profile-name">
                                    <span id="ProfileFirstName">@(string.IsNullOrEmpty(Model.FirstName) ? "CareerCircle User" : Model.FirstName)</span>
                                    <span id="ProfileLastName">@(string.IsNullOrEmpty(Model.LastName) ? "" : Model.LastName)</span>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row linkedin-stlying">
                        @await Component.InvokeAsync("LinkedInSync", new { SubscriberGuid = Model.SubscriberGuid, LastSyncDate = Model.LinkedInSyncDate == null ? DateTime.MinValue : Model.LinkedInSyncDate, Model.LinkedInAvatarUrl })
                </div>
                <div class="row">
                    <div class="col-md">
                        <div class="mt-3">
                            @Html.React("ResumeUpload", new { fileGuid = Model.Resume?.SubscriberFileGuid, fileName = Model.Resume?.SimpleName, resumeParseGuid = Model.ResumeParseGuid == Guid.Empty ? string.Empty : Model.ResumeParseGuid.ToString() })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="profile-body-container">
        <div class="row">
            <div class="col-md-12">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="courses-in-progress-container">
                                <div class="course-in-progress-header">
                                    <h2>Courses in Progress</h2>
                                </div>
                                <div class="courses-in-progress-list-container">
                                    @{
                                        if (Model.Enrollments.Count == 0)
                                        {
                                            <text>You are not currently enrolled in any courses.</text>
                                        }
                                    }
                                    <ul class="courses-in-progress-list-desktop">
                                        @foreach (EnrollmentDto enrollment in Model.Enrollments)
                                        {
                                            <li class="course-in-progress-li">
                                                @if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Success)
                                                {
                                                    @Html.Raw("<a target=\"_blank\" href=\"" + enrollment.CourseUrl + "\">")
                                                }

                                                <div class="course-in-progress-anchor-container">
                                                    <div class="course-in-progress-info">
                                                        <div class="row no-padding">
                                                            <div class="col-12 col-sm-8 no-padding">
                                                                <h3>@enrollment.Course.Name</h3>

                                                            </div>
                                                            <div class="col-12 col-sm-4 no-padding cip-progress-indictation">
                                                                @if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Pending)
                                                                {
                                                                    <text>Enrollment in progress.</text>
                                                                }
                                                                else if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Success)
                                                                {
                                                                    <text>Continue <i class="fas fa-arrow-right"></i></text>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                    @{
                                                        @if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Success)
                                                        {
                                                            double percentComplete = enrollment.PercentComplete;
                                                            string classFormatter = "";
                                                            if (percentComplete < 50)
                                                            {
                                                                classFormatter = "less-than-50";
                                                            }
                                                            else
                                                            {
                                                                classFormatter = "more-than-50";
                                                            }
                                                            <div class="course-in-progress">

                                                                <div class="progress @(classFormatter)">

                                                                    <div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="@(percentComplete)" aria-valuemin="0" aria-valuemax="100">
                                                                        <div class="course-completion-percentage">
                                                                            @(percentComplete)%
                                                                        </div>
                                                                    </div>

                                                                </div>

                                                            </div>
                                                        }
                                                        else if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Error)
                                                        {
                                                            <div class="course-enrollment-failure-container">
                                                                Unfortunately, an error occurred when attempting to process your enrollment. We have been notified and are working to resolve the issue.
                                                            </div>
                                                        }

                                                    }
                                                    <span class="marketing-campaign-msg"> @enrollment.CampaignCourseStatusInfo </span>
                                                </div>

                                                @if (enrollment.SimplifiedEnrollmentStatus == SimplifiedEnrollmentStatus.Success)
                                                {
                                                    @Html.Raw("</a>")
                                                }
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="profile-edit-container row">
        <div class="col-12">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div id="ProfileInformationContainer">
                            <div class="edit-personal-info-container">
                                <div class="personal-info-header">
                                    <div class="row">
                                        <div class="col-12 no-padding">
                                            <h2>Profile</h2>
                                        </div>
                                    </div>
                                </div>
                                <div class="options-input-container">
                                    <div class="row">

                                        <!-- Personal Info -->
                                        @{ Html.RenderPartial("_PersonalInfoPartial", Model); }

                                        <!-- Contact Info -->
                                        @{ Html.RenderPartial("_ContactInfoPartial", Model); }

                                        <!-- Work History -->
                                        @{ Html.RenderPartial("_WorkHistoryPartial", Model); }

                                        <!-- Education History  -->
                                        @{ Html.RenderPartial("_EducationHistoryPartial", Model); }


                                        <!-- Social Links -->
                                        @{ Html.RenderPartial("_SocialLinksPartial", Model); }

                                        <!-- Skills  -->
                                        @{ Html.RenderPartial("_SkillsPartial", Model); }


                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Html.React("ResumeMerge", new {})



