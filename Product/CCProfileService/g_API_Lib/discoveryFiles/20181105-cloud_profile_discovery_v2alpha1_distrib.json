{
    "kind": "discovery#restDescription",
    "discoveryVersion": "v1",
    "id": "cloudprofile:v2alpha1",
    "name": "cloudprofile",
    "canonicalName": "Cloud Profile Service",
    "version": "v2alpha1",
    "revision": "0",
    "title": "Cloud Profile Discovery",
    "description": "The Cloud Profile Service API provides the capability to create, read, update, and delete people's profiles, as well as search profiles based on keywords and filters.\n# Introduction\nThe Profiles Service API provides ATS applications with the capability to create and manage candidates' profiles, and perform profile search using field based queries.\nThis site contains all of the information you need to integrate the Profiles Service API.\nFor a full list of supported API methods, refer to the [Reference](rest\/) section.\n",
    "ownerDomain": "google.com",
    "ownerName": "Google",
    "icons": {
      "x16": "http://www.google.com/images/icons/product/search-16.gif",
      "x32": "http://www.google.com/images/icons/product/search-32.gif"
     },
    "documentationLink": "https://cloud.google.com/profile-discovery/docs",
    "protocol": "rest",
    "rootUrl": "https://cloudprofile.googleapis.com/",
    "servicePath": "",
    "baseUrl": "https://cloudprofile.googleapis.com/",
    "batchPath": "batch",
    "version_module": true,
    "fullyEncodeReservedExpansion": true,
    "parameters": {
      "access_token": {
        "type": "string",
        "description": "OAuth access token.",
        "location": "query"
      },
      "alt": {
        "type": "string",
        "description": "Data format for response.",
        "default": "json",
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "enumDescriptions": [
          "Responses with Content-Type of application/json",
          "Media download with context-dependent Content-Type",
          "Responses with Content-Type of application/x-protobuf"
        ],
        "location": "query"
      },
      "callback": {
        "type": "string",
        "description": "JSONP",
        "location": "query"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response.",
        "location": "query"
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "location": "query"
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user.",
        "location": "query"
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks.",
        "default": "true",
        "location": "query"
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "location": "query"
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "location": "query"
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "location": "query"
      },
      "$.xgafv": {
        "type": "string",
        "description": "V1 error format.",
        "enum": [
          "1",
          "2"
        ],
        "enumDescriptions": [
          "v1 error format",
          "v2 error format"
        ],
        "location": "query"
      }
    },
    "schemas": {
      "ListTenantsResponse": {
        "id": "ListTenantsResponse",
        "description": "List tenants response object.",
        "type": "object",
        "properties": {
          "tenants": {
            "description": "Tenants for the current client.",
            "type": "array",
            "items": {
              "$ref": "Tenant"
            }
          },
          "nextPageToken": {
            "description": "A token to retrieve the next page of results. This is empty if there are no\nmore results.",
            "type": "string"
          }
        }
      },
      "Tenant": {
        "id": "Tenant",
        "description": "A resource that represents a tenant in the service. A tenant is an instance\nof a customer that owns profiles. Each customer can create multiple tenants\nand each tenant has zero or multiple profiles.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Required during tenant update.\n\nThe resource name for a tenant. This is generated by the service when a\ntenant is created, for example,\n\"\/tenants\/0000aaaa-1111-bbbb-2222-cccc3333dddd\"",
            "type": "string"
          },
          "clientProvidedId": {
            "description": "Required during tenant create.\n\nThe id that is provided by the client. The client cannot create two tenants\nwith the same client_provided_id.\n\nNumber of characters allowed is 100.\n\nDeprecated, use external_id instead.",
            "type": "string"
          },
          "externalId": {
            "description": "Required during tenant create.\n\nThe id that is provided by the client. The client cannot create two tenants\nwith the same external_id.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "learningType": {
            "description": "Required during tenant create.\n\nIndicates whether data from this tenant may be used to provide product\nimprovements across other tenants.",
            "enumDescriptions": [
              "Default value if tye type is not specified. By default we treat the type\nas \"ISOLATED\".",
              "Google uses this tenant's user data to improve search\/recommendation\nquality across tenants.",
              "Google will use this tenant's user data to improve search\/recommendation\nquality for this tenant only."
            ],
            "type": "string",
            "enum": [
              "TENANT_DATA_LEARNING_TYPE_UNSPECIFIED",
              "AGGREGATED",
              "ISOLATED"
            ]
          }
        }
      },
      "GoogleProtobuf__Empty": {
        "id": "GoogleProtobuf__Empty",
        "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
        "type": "object",
        "properties": {
        }
      },
      "ListProfilesResponse": {
        "id": "ListProfilesResponse",
        "description": "The List profiles response object.",
        "type": "object",
        "properties": {
          "profiles": {
            "description": "Profiles for the specific tenant.",
            "type": "array",
            "items": {
              "$ref": "Profile"
            }
          },
          "nextPageToken": {
            "description": "A token to retrieve the next page of results. This is empty if there are no\nmore results.",
            "type": "string"
          }
        }
      },
      "Profile": {
        "id": "Profile",
        "description": "A profile resource represents a person's profile (also referred to as a\n\"single-source profile\"). A profile belongs to a Tenant, which is the\ncompany\/organization that owns the profile.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Required during profile update.\n\nResource name assigned to a profile by the API.\nFor example, \"\/tenants\/foo\/profiles\/bar\" (This profile belongs to tenant\n\"tenants\/foo\").",
            "type": "string"
          },
          "clientProvidedId": {
            "description": "Optional.\n\nProfile's id in client system if available.\n\nNumber of characters allowed is 100.\n\nDeprecated,  use external_id instead.",
            "type": "string"
          },
          "externalId": {
            "description": "Optional.\n\nProfile's id in client system if available.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "source": {
            "description": "Optional.\n\nThe source information.\nFor example, if a candidate profile is acquired from a resume, the user can\ninput \"resume\" here to indicate.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "url": {
            "description": "Optional.\n\nThe url set by clients that can link to this profile's client's side copy.\n\nNumber of characters allowed is 4,000.\n\nDeprecated,  use uri instead.",
            "type": "string"
          },
          "uri": {
            "description": "Optional.\n\nThe url set by clients that can link to this profile's client's side copy.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "associatedProfileName": {
            "description": "Optional.\n\nThe name of the profile this profile is associated with.\n\nThis is used to link multiple profiles from the same person. Here is a\nscenario to use this field: a client has a candidate who has two resumes\n(for example, one resume is 5 years ago and another one is current). These\ntwo resumes may contain very different information. The client can either\ncreate a single profile by manually combine the information, or do the\nfollowing:\n\nThe client can create two API profiles based on these resumes:\n\"tenants\/foo\/profiles\/bar_1\" and \"tenants\/foo\/profiles\/bar_2\". The client\nwants to tell the API that these two profiles are from the same person, and\nwants the API to automatically merge the information (for example, in\nsearch result, don't treat these two resumes separately). To do this, the\nclient can specify the associated_profile_name in profile\n\"tenants\/foo\/profiles\/bar_1\" to be \"tenants\/foo\/profiles\/bar_2\".\n\nDefault is empty. Cannot be modified during profile update.\n\nThere's some limitations on using this field:\n(1) This value is provided during profile create. In profile update, API\nwill throw BAD_REQUEST error if this value is modified (different than an\nearlier version).\n(2) During profile create, users must provide a correct\nassociated_profile_name, that is, the associated profile must exist,\nand the two profiles must belong to the same tenant. Otherwise the API will\nreturn BAD_REQUEST error.\n(3) The API doesn't support chain rule. For example, to merge three\nprofiles \"A\", \"B\", and \"C\" together, one needs to first create profile \"A\",\nthen during profile creation of \"B\" and \"C\", set this field on both\nprofiles to A's name. Create profile \"C\" with\nassociated_profile_name as B's name is not allowed, and will result\nin BAD_REQUEST error being returned.",
            "type": "string"
          },
          "isHirable": {
            "description": "Optional.\n\nIndicates the hirable status of the profile.",
            "type": "boolean"
          },
          "createTime": {
            "description": "Optional.\n\nThe timestamp when the profile was first created at this source.",
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Optional.\n\nThe timestamp when the profile was last updated at this source.",
            "type": "string",
            "format": "google-datetime"
          },
          "resumeHrxml": {
            "description": "Optional.\n\nThe profile contents in HR-XML format.\nSee http:\/\/schemas.liquid-technologies.com\/hr-xml\/2007-04-15\/ for more\ninformation about Human Resources XML.\n\nUsers can create a profile with only resume_hrxml field. The API will\nparse the resume_hrxml and create a profile with all structured fields\npopulated, for example. EmploymentRecord, EducationRecord. The API\nwill throw BAD_REQUEST if the resume_hrxml cannot be parsed.\n\nIf the resume_hrxml is provided during profile creation or update,\nthen any other structured data provided in the profile will be ignored. The\nAPI will populate these fields by parsing the HR-XML.",
            "type": "string"
          },
          "personNames": {
            "description": "Optional.\n\nThe names of the person this profile belongs to.\nAPI only supports one person name.",
            "type": "array",
            "items": {
              "$ref": "PersonName"
            }
          },
          "postalAddresses": {
            "description": "Optional.\n\nThe profile's postal addresses.\n\nDeprecated,  use addresses instead.",
            "type": "array",
            "items": {
              "$ref": "PostalAddress"
            }
          },
          "addresses": {
            "description": "Optional.\n\nThe profiles' postal addresses.",
            "type": "array",
            "items": {
              "$ref": "Address"
            }
          },
          "emailAddresses": {
            "description": "Optional.\n\nThe profile's email addresses.",
            "type": "array",
            "items": {
              "$ref": "Email"
            }
          },
          "phoneNumbers": {
            "description": "Optional.\n\nThe profile's phone numbers.",
            "type": "array",
            "items": {
              "$ref": "Phone"
            }
          },
          "personalUrls": {
            "description": "Optional.\n\nThe profile's personal URLs.\n\nDeprecated,  use personal_uris instead.",
            "type": "array",
            "items": {
              "$ref": "PersonalUrl"
            }
          },
          "personalUris": {
            "description": "Optional.\n\nThe profile's personal URLs.",
            "type": "array",
            "items": {
              "$ref": "PersonalUri"
            }
          },
          "additionalContactInfo": {
            "description": "Optional.\n\nAvailable contact information besides than postal addresses, email\naddresses, phones, and personal urls. For example, \"Skype\", \"Hang-out\".",
            "type": "array",
            "items": {
              "$ref": "AdditionalContactInfo"
            }
          },
          "employmentRecords": {
            "description": "Optional.\n\nThe employment information. Users should input as more accurate as they can\nto improve the search quality. Here's some advice for users:\n\n(1) Specify the start and end date of the employment.\n(2) List different employments separately, even if the change is slight.\nFor example, only job title is changed from \"software engineer\" to \"senior\nsoftware engineer\". (3) It's better to provide is_current for the\ncurrent employments. If not, API will infer from user inputs.",
            "type": "array",
            "items": {
              "$ref": "EmploymentRecord"
            }
          },
          "educationRecords": {
            "description": "Optional.\n\nThe education information. Users should input as more accurate as they can\nto improve the search quality. Here's some advice for users:\n\n(1) Specify the start and end date of the education.\n(2) List different educations separately. For example, the profile contains\nthe education experience from the same school but the degree is different.\n(3) It's better to provide is_current for the current employments. If\nnot, API will infer from user inputs.",
            "type": "array",
            "items": {
              "$ref": "EducationRecord"
            }
          },
          "skills": {
            "description": "Optional.\n\nThe skill set, see Skill for more information. To improve the search\nquality, users should provide as much information as they can for the\nskill.",
            "type": "array",
            "items": {
              "$ref": "Skill"
            }
          },
          "projects": {
            "description": "Optional.\n\nThe project information.\nFor example, school projects, open source projects that aren't listed in\nemployment_record.",
            "type": "array",
            "items": {
              "$ref": "Project"
            }
          },
          "publications": {
            "description": "Optional.\n\nThe publication information.",
            "type": "array",
            "items": {
              "$ref": "Publication"
            }
          },
          "patents": {
            "description": "Optional.\n\nThe patent information.",
            "type": "array",
            "items": {
              "$ref": "Patent"
            }
          },
          "licensesAndCertifications": {
            "description": "Optional.\n\nThe Licenses and certifications.\n\nDeprecated,  use certifications instead.",
            "type": "array",
            "items": {
              "$ref": "LicenseAndCertification"
            }
          },
          "certifications": {
            "description": "Optional.\n\nThe Licenses and certifications.",
            "type": "array",
            "items": {
              "$ref": "Certification"
            }
          },
          "jobApplications": {
            "description": "Optional.\n\nThe job application information.",
            "type": "array",
            "items": {
              "$ref": "JobApplication"
            }
          },
          "recruitingNotes": {
            "description": "Optional.\n\nRecruiting notes added for this profile.\nFor example, when the recruiter wants to add some unstructured comments for\nthis profile, like, \"this candidate also has experience in volunteer work\",\nthe recruiter could use this field.",
            "type": "array",
            "items": {
              "$ref": "RecruitingNote"
            }
          },
          "qualifications": {
            "description": "Optional.\n\nThe profile's qualifications used for calculating the match between this\nprofile and a job given the job requirements.\nContains information like education, skills, and work experience.",
            "$ref": "Qualifications"
          },
          "customAttributes": {
            "description": "Optional.\n\nA list of fields to hold both filterable and non-filterable custom profile\nattributes that aren't covered by the provided structured fields. See\nCustomAttribute for more details.\n\nAt most 100 filterable and at most 100 unfilterable keys are supported. If\nexceed the limit, API returns a BAD_REQUEST error.\n\nNumeric custom attributes: each key can only map to ONE numeric value,\notherwise the API returns a BAD_REQUEST error.\n\nString custom attributes, each key can map up to 50 string values. For\nfilterable string value, each value has a byte size of no more than 256B;\nfor unfilterable string values, the maximum byte size of a single key is\n64B. The API returns a BAD_REQUEST error for any request exceeds the limit.\nThe maximum total byte size is 10KB.\n\nExample 1: A profile has an \"ask_salary\" field which isn't contained in the\nAPI schema and the values are \"100,000 USD\" or \"100 USD\/Hr\". The client can\nuse custom attributes and set the `key` to \"ask_salary\" and `values` to\n\"100,000 USD\" and \"100 USD\/Hr\". The client can also mark this custom\nfilterable.\nExample 2: A profile has a \"work_experience_length\" field with the value\n10 (this person has 10 years experience). Client can use custom attributes\nand set the `key` to \"work_experience_length\" and the `value` to 10.\nNote that currently the API doesn't support filtering on numeric custom\nattributes. By default this one is`unfilterable`.",
            "type": "array",
            "items": {
              "$ref": "CustomAttribute"
            }
          },
          "processed": {
            "description": "Output only. Indicates if the profile is fully processed and searchable.",
            "type": "boolean"
          },
          "keywordSnippet": {
            "description": "Output only. Keyword snippet shows how the search result is related to a\nsearch query.",
            "type": "string"
          }
        }
      },
      "PersonName": {
        "id": "PersonName",
        "description": "Resource that represents a person's name.",
        "type": "object",
        "properties": {
          "formattedName": {
            "description": "A string that represents a person's name. For example, \"Dr. John Smith\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "structuredName": {
            "description": "Clients can also provide a person's name in a structured way (last name,\nfirst name, suffix, etc.).",
            "$ref": "PersonStructuredName"
          },
          "preferredName": {
            "description": "Preferred name.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PersonStructuredName": {
        "id": "PersonStructuredName",
        "description": "Resource that represents a person's structured name.",
        "type": "object",
        "properties": {
          "givenName": {
            "description": "Given\/first name.\nWill be derived from formatted_name if not provided.\nWill be kept if provided.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "middleInitial": {
            "description": "Middle initial.\nWill be derived from formatted_name if not provided.\nWill be kept if provided.\n\nNumber of characters allowed is 20.",
            "type": "string"
          },
          "familyName": {
            "description": "Family\/last name.\nWill be derived from formatted_name if not provided.\nWill be kept if provided.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "suffixes": {
            "description": "Suffixes.\n\nNumber of characters allowed is 20.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "prefixes": {
            "description": "Prefixes.\n\nNumber of characters allowed is 20.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PostalAddress": {
        "id": "PostalAddress",
        "description": "Resource that represents a postal address.",
        "type": "object",
        "properties": {
          "usage": {
            "description": "The usage of the postal address. For example, SCHOOL, WORK, PERSONAL.",
            "enumDescriptions": [
              "Default value if the usage is not specified or unknown.",
              "Personal use.",
              "Work use.",
              "School use."
            ],
            "type": "string",
            "enum": [
              "CONTACT_INFO_USAGE_UNSPECIFIED",
              "PERSONAL",
              "WORK",
              "SCHOOL"
            ]
          },
          "address": {
            "description": "Physical address.",
            "$ref": "Address"
          },
          "isCurrent": {
            "description": "If the address is the person's current postal address.",
            "type": "boolean"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Address": {
        "id": "Address",
        "description": "Resource that represents a physical address.",
        "type": "object",
        "properties": {
          "unstructuredAddress": {
            "description": "Unstructured address.\n\nFor example, \"1600 Amphitheatre Pkwy, Mountain View, CA 94043\",\n\"Sunnyvale, California\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "structuredAddress": {
            "description": "Structured address that contains street address, city, state, country,\netc.",
            "$ref": "GoogleType__PostalAddress"
          },
          "usage": {
            "description": "The usage of this address. For example, SCHOOL, WORK, PERSONAL.",
            "enumDescriptions": [
              "Default value if the usage is not specified or unknown.",
              "Personal use.",
              "Work use.",
              "School use."
            ],
            "type": "string",
            "enum": [
              "CONTACT_INFO_USAGE_UNSPECIFIED",
              "PERSONAL",
              "WORK",
              "SCHOOL"
            ]
          },
          "isCurrent": {
            "description": "If the address is the person's current postal address.",
            "type": "boolean"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GoogleType__PostalAddress": {
        "id": "GoogleType__PostalAddress",
        "description": "Represents a postal address, e.g. for postal delivery or payments addresses.\nGiven a postal address, a postal service can deliver items to a premise, P.O.\nBox or similar.\nIt is not intended to model geographical locations (roads, towns,\nmountains).\n\nIn typical usage an address would be created via user input or from importing\nexisting data, depending on the type of process.\n\nAdvice on address input \/ editing:\n - Use an i18n-ready address widget such as\n   https:\/\/github.com\/googlei18n\/libaddressinput)\n- Users should not be presented with UI elements for input or editing of\n  fields outside countries where that field is used.\n\nFor more guidance on how to use this schema, please see:\nhttps:\/\/support.google.com\/business\/answer\/6397478",
        "type": "object",
        "properties": {
          "revision": {
            "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is\nthe latest revision.\n\nAll new revisions **must** be backward compatible with old revisions.",
            "type": "integer",
            "format": "int32"
          },
          "regionCode": {
            "description": "Required. CLDR region code of the country\/region of the address. This\nis never inferred and it is up to the user to ensure the value is\ncorrect. See http:\/\/cldr.unicode.org\/ and\nhttp:\/\/www.unicode.org\/cldr\/charts\/30\/supplemental\/territory_information.html\nfor details. Example: \"CH\" for Switzerland.",
            "type": "string"
          },
          "languageCode": {
            "description": "Optional. BCP-47 language code of the contents of this address (if\nknown). This is often the UI language of the input form or is expected\nto match one of the languages used in the address' country\/region, or their\ntransliterated equivalents.\nThis can affect formatting in certain countries, but is not critical\nto the correctness of the data and will never affect any validation or\nother non-formatting related operations.\n\nIf this value is not known, it should be omitted (rather than specifying a\npossibly incorrect default).\n\nExamples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".",
            "type": "string"
          },
          "postalCode": {
            "description": "Optional. Postal code of the address. Not all countries use or require\npostal codes to be present, but where they are used, they may trigger\nadditional validation with other parts of the address (e.g. state\/zip\nvalidation in the U.S.A.).",
            "type": "string"
          },
          "sortingCode": {
            "description": "Optional. Additional, country-specific, sorting code. This is not used\nin most regions. Where it is used, the value is either a string like\n\"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number\nalone, representing the \"sector code\" (Jamaica), \"delivery area indicator\"\n(Malawi) or \"post office indicator\" (e.g. C\u00F4te d'Ivoire).",
            "type": "string"
          },
          "administrativeArea": {
            "description": "Optional. Highest administrative subdivision which is used for postal\naddresses of a country or region.\nFor example, this can be a state, a province, an oblast, or a prefecture.\nSpecifically, for Spain this is the province and not the autonomous\ncommunity (e.g. \"Barcelona\" and not \"Catalonia\").\nMany countries don't use an administrative area in postal addresses. E.g.\nin Switzerland this should be left unpopulated.",
            "type": "string"
          },
          "locality": {
            "description": "Optional. Generally refers to the city\/town portion of the address.\nExamples: US city, IT comune, UK post town.\nIn regions of the world where localities are not well defined or do not fit\ninto this structure well, leave locality empty and use address_lines.",
            "type": "string"
          },
          "sublocality": {
            "description": "Optional. Sublocality of the address.\nFor example, this can be neighborhoods, boroughs, districts.",
            "type": "string"
          },
          "addressLines": {
            "description": "Unstructured address lines describing the lower levels of an address.\n\nBecause values in address_lines do not have type information and may\nsometimes contain multiple values in a single field (e.g.\n\"Austin, TX\"), it is important that the line order is clear. The order of\naddress lines should be \"envelope order\" for the country\/region of the\naddress. In places where this can vary (e.g. Japan), address_language is\nused to make it explicit (e.g. \"ja\" for large-to-small ordering and\n\"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of\nan address can be selected based on the language.\n\nThe minimum permitted structural representation of an address consists\nof a region_code with all remaining information placed in the\naddress_lines. It would be possible to format such an address very\napproximately without geocoding, but no semantic reasoning could be\nmade about any of the address components until it was at least\npartially resolved.\n\nCreating an address only containing a region_code and address_lines, and\nthen geocoding is the recommended way to handle completely unstructured\naddresses (as opposed to guessing which parts of the address should be\nlocalities or administrative areas).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipients": {
            "description": "Optional. The recipient at the address.\nThis field may, under certain circumstances, contain multiline information.\nFor example, it might contain \"care of\" information.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization": {
            "description": "Optional. The name of the organization at the address.",
            "type": "string"
          }
        }
      },
      "Email": {
        "id": "Email",
        "description": "Resource that represents an email address.",
        "type": "object",
        "properties": {
          "usage": {
            "description": "The usage of the email address. For example, SCHOOL, WORK, PERSONAL.",
            "enumDescriptions": [
              "Default value if the usage is not specified or unknown.",
              "Personal use.",
              "Work use.",
              "School use."
            ],
            "type": "string",
            "enum": [
              "CONTACT_INFO_USAGE_UNSPECIFIED",
              "PERSONAL",
              "WORK",
              "SCHOOL"
            ]
          },
          "emailAddress": {
            "description": "Email address.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Phone": {
        "id": "Phone",
        "description": "Resource that represents a telephone number.",
        "type": "object",
        "properties": {
          "usage": {
            "description": "The usage of the phone. For example, SCHOOL, WORK, PERSONAL.",
            "enumDescriptions": [
              "Default value if the usage is not specified or unknown.",
              "Personal use.",
              "Work use.",
              "School use."
            ],
            "type": "string",
            "enum": [
              "CONTACT_INFO_USAGE_UNSPECIFIED",
              "PERSONAL",
              "WORK",
              "SCHOOL"
            ]
          },
          "type": {
            "description": "The phone type. For example, LANDLINE, MOBILE, FAX.",
            "enumDescriptions": [
              "Used when the phone type is not specified.",
              "Used if the number is a landline.",
              "Used if the number is a mobile.",
              "Used if the number is a fax.",
              "Used if the number is a pager.",
              "Used if the number is a TTY (test telephone) or TDD (telecommunication\ndevice for the deaf).",
              "Used if the number is a TTY (test telephone) or TDD (telecommunication\ndevice for the deaf).\n\nDeprecated, use TTY_OR_TDD instead.",
              "",
              "A virtual telephone number is a number that can be routed to another\nnumber and managed by the user via Web, SMS, IVR, etc.  It is associated\nwith a particular person, and may be routed to either a MOBILE or\nLANDLINE number. The ContactInfoUsage (see above) should be set to\nPERSONAL for these phone types.  Some more information can be found here:\nhttp:\/\/en.wikipedia.org\/wiki\/Personal_Numbers",
              "Voice over IP numbers. This includes TSoIP (Telephony Service over IP).",
              "In some regions (for example, the USA), it is impossible to distinguish\nbetween fixed-line and mobile numbers by looking at the phone number\nitself. In these cases, use this option to store the PhoneType."
            ],
            "type": "string",
            "enum": [
              "PHONE_TYPE_UNSPECIFIED",
              "LANDLINE",
              "MOBILE",
              "FAX",
              "PAGER",
              "TTY_OR_TDD",
              "TTYTDD",
              "VOICEMAIL",
              "VIRTUAL",
              "VOIP",
              "MOBILE_OR_LANDLINE"
            ]
          },
          "number": {
            "description": "Phone number.\nWe accept any phone format and only search for exact matches. For example,\nwhen a user inputs a phone number in format of \"(xxx)xxx-xxxx\", then to\nsearch for profiles, the user needs to input the same phone format.\n\nNumber of characters allowed is 20.",
            "type": "string"
          },
          "whenAvailable": {
            "description": "When this number is available. It can be any string and only descriptive.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PersonalUrl": {
        "id": "PersonalUrl",
        "description": "Resource that represents a valid URL.",
        "type": "object",
        "properties": {
          "url": {
            "description": "The personal URL.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PersonalUri": {
        "id": "PersonalUri",
        "description": "Resource that represents a valid URI.",
        "type": "object",
        "properties": {
          "uri": {
            "description": "The personal URI.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdditionalContactInfo": {
        "id": "AdditionalContactInfo",
        "description": "Resource that represents contact information other than phone, email,\nURL and postal address.",
        "type": "object",
        "properties": {
          "usage": {
            "description": "The usage of this contact method. For example, SCHOOL, WORK, PERSONAL.",
            "enumDescriptions": [
              "Default value if the usage is not specified or unknown.",
              "Personal use.",
              "Work use.",
              "School use."
            ],
            "type": "string",
            "enum": [
              "CONTACT_INFO_USAGE_UNSPECIFIED",
              "PERSONAL",
              "WORK",
              "SCHOOL"
            ]
          },
          "name": {
            "description": "The name of the contact method.\nFor example, \"hangout\", \"skype\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "number": {
            "description": "The number of the contact.\n\nNumber of characters allowed is 100.\n\nDeprecated,  use contact_id instead.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this)\nthis information is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contactId": {
            "description": "The contact id.\n\nNumber of characters allowed is 100.",
            "type": "string"
          }
        }
      },
      "EmploymentRecord": {
        "id": "EmploymentRecord",
        "description": "Resource that represents an employment record, including job title, company\nname, start date, etc.",
        "type": "object",
        "properties": {
          "startDate": {
            "description": "Start date of the employment.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST.\nExamples:\n{\"year\": 2017, \"month\": 2, \"day\": 28} is valid.\n{\"year\": 2020, \"month\": 1, \"date\": 31} is valid.\n{\"year\": 2018, \"month\": 12} is valid (partial date).\n{\"year\": 2018} is valid (partial date).\n{\"year\": 2015, \"day\": 21} is not valid (month is missing but day is\npresented).\n{\"year\": 2018, \"month\": 13} is not valid (invalid month).\n{\"year\": 2017, \"month\": 1, \"day\": 32} is not valid (invalid day).",
            "$ref": "GoogleType__Date"
          },
          "endDate": {
            "description": "End date of the employment.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.\nIf both [end_date] and [start_date] are presented, end_date cannot be\nbefore start_date, otherwise API will throw BAD_REQUEST.",
            "$ref": "GoogleType__Date"
          },
          "companyName": {
            "description": "The name of the employer.\nFor example, \"Google\", \"Facebook\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title of the employment.\nFor example, \"Software Engineer\", \"Data Scientist\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "organizationName": {
            "description": "Organization name of the employment.\nFor example, division, department, client.\n\nNumber of characters allowed is 100.\n\nDeprecated,  use division_name instead.",
            "type": "string"
          },
          "divisionName": {
            "description": "Division name of the employment.\nFor example, division, department, client.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "address": {
            "description": "The physical address of the employer.",
            "$ref": "Address"
          },
          "jobDescription": {
            "description": "A descriptive graph on job content.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "isSupervisedPosition": {
            "description": "If it's a supervised position.",
            "type": "boolean"
          },
          "supervisedEmployees": {
            "description": "The number of employees this person has supervised. Input -1 if the\nnumber is unknown.\n\nDeprecated.",
            "type": "integer",
            "format": "int32"
          },
          "isSelfEmployed": {
            "description": "If this employment is self-employed.",
            "type": "boolean"
          },
          "isCurrent": {
            "description": "If this employment is current.",
            "type": "boolean"
          },
          "jobTitleSnippet": {
            "description": "Output only. The job title snippet shows how the job_title is related\nto a search query. It's empty if the job_title is not related to the\nsearch query.",
            "type": "string"
          },
          "jobDescriptionSnippet": {
            "description": "Output only. The job description snippet shows how the job_description\nis related to a search query. It's empty if the job_description is not\nrelated to the search query.",
            "type": "string"
          },
          "companyNameSnippet": {
            "description": "Output only. The company name snippet shows how the company_name is\nrelated to a search query. It's empty if the company_name is not\nrelated to the search query.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GoogleType__Date": {
        "id": "GoogleType__Date",
        "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
        "type": "object",
        "properties": {
          "year": {
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year.",
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day.",
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EducationRecord": {
        "id": "EducationRecord",
        "description": "Resource that represents an education record, including degree, field of\nstudy, etc.",
        "type": "object",
        "properties": {
          "startDate": {
            "description": "Start date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "endDate": {
            "description": "End date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.\nIf start_date and end_date are both presented, end_date cannot\nbe before start_date, otherwise API will throw BAD_REQUEST.",
            "$ref": "GoogleType__Date"
          },
          "expectedGraduationDate": {
            "description": "Expected graduation date if currently pursuing a degree.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.\nIf start_date and expected_graduation_date are both presented,\nexpected_graduation_date cannot be before start_date, otherwise API\nwill throw BAD_REQUEST.",
            "$ref": "GoogleType__Date"
          },
          "schoolName": {
            "description": "The name of the school or institution.\nFor example, \"Stanford University\", \"UC Berkeley\".\n\nNumber of characters allowed is 100.\n\nDeprecated,  use school instead.",
            "type": "string"
          },
          "school": {
            "description": "The name of the school or institution.\nFor example, \"Stanford University\", \"UC Berkeley\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "address": {
            "description": "The physical address of the education institution.",
            "$ref": "Address"
          },
          "degreeDescription": {
            "description": "The full description of the degree.\nFor example, \"Master of Science in Computer Science\", \"B.S in Math\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "structuredDegree": {
            "description": "The structured notation of degree.",
            "$ref": "Degree"
          },
          "description": {
            "description": "The description of this education.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "isCurrent": {
            "description": "If this education is current.",
            "type": "boolean"
          },
          "schoolNameSnippet": {
            "description": "Output only. The school name snippet shows how the school_name is\nrelated to a search query in search result. It's empty if the\nschool_name is not related to the search query.",
            "type": "string"
          },
          "degreeSnippet": {
            "description": "Output only. The job description snippet shows how the degree is\nrelated to a search query in search result. It's empty if the degree\nis not related to the search query.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Degree": {
        "id": "Degree",
        "description": "Resource that represents a degree.\n\nThe API won't provide any validation for degree input.\nIf degree_type is provided, then API treat this value as the education\nlevel;\nIf degree_type is not provided, API will treat degree_name as the\neducation level.",
        "type": "object",
        "properties": {
          "degreeType": {
            "description": "ISCED degree type.",
            "enumDescriptions": [
              "Default value.",
              "Early childhood education such as preschool; also known as nursery\nschool. ISCED code 0.\nE.g. Preschool or pre-kindergarten\n\nDeprecated.",
              "Primary education which is typically the first stage of compulsory\neducation. ISCED code 1.\nEx) Kindergarten",
              "Lower secondary education; First stage of secondary education building on\nprimary education, typically with a more subject-oriented curriculum.\nISCED code 2.\nEx) Middle school",
              "Middle education; Second\/final stage of secondary education preparing for\ntertiary education and\/or providing skills relevant to employment.\nUsually with an increased range of subject options and streams. ISCED\ncode 3.\nEx) High school",
              "Adult Remedial Education; Programmes providing learning experiences that\nbuild on secondary education and prepare for labour market entry and\/or\ntertiary education. The content is broader than secondary but not as\ncomplex as tertiary education. ISCED code 4.",
              "Associate's or equivalent; Short first tertiary programmes that are\ntypically practically-based, occupationally-specific and prepare for\nlabour market entry. These programmes may also provide a pathway to other\ntertiary programmes. ISCED code 5.",
              "Bachelor's or equivalent; Programmes designed to provide intermediate\nacademic and\/or professional knowledge, skills and competencies leading\nto a first tertiary degree or equivalent qualification. ISCED code 6.",
              "Master's or equivalent; Programmes designed to provide advanced academic\nand\/or professional knowledge, skills and competencies leading to a\nsecond tertiary degree or equivalent qualification. ISCED code 7.",
              "Doctoral or equivalent; Programmes designed primarily to lead to an\nadvanced research qualification, usually concluding with the submission\nand defense of a substantive dissertation of publishable quality based on\noriginal research. ISCED code 8."
            ],
            "type": "string",
            "enum": [
              "ISCED_DEGREE_UNSPECIFIED",
              "PRESCHOOL",
              "PRIMARY_EDUCATION",
              "LOWER_SECONDARY_EDUCATION",
              "UPPER_SECONDARY_EDUCATION",
              "ADULT_REMEDIAL_EDUCATION",
              "ASSOCIATES_OR_EQUIVALENT",
              "BACHELORS_OR_EQUIVALENT",
              "MASTERS_OR_EQUIVALENT",
              "DOCTORAL_OR_EQUIVALENT"
            ]
          },
          "degreeName": {
            "description": "Full Degree name.\nFor example, \"B.S.\", \"Master of Arts\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "fieldOfStudy": {
            "description": "Field of study\nFor example, \"Computer science\", \"engineering\".\n\nNumber of characters allowed is 100.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Skill": {
        "id": "Skill",
        "description": "Resource that represents a skill.",
        "type": "object",
        "properties": {
          "skillName": {
            "description": "Skill name.\nFor example, \"Java\", \"Python\".\n\nNumber of characters allowed is 100.\n\nDeprecated,  use display_name instead.",
            "type": "string"
          },
          "displayName": {
            "description": "Skill name.\nFor example, \"Java\", \"Python\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "lastUsedDate": {
            "description": "The last time this skill was used.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "level": {
            "description": "Skill proficiency level which indicates how proficient the person is at\nthis skill.",
            "enumDescriptions": [
              "Default value if the proficiency level is not specified.",
              "Have a common knowledge or an understanding of basic techniques and\nconcepts.",
              "Have the level of experience gained in a classroom and\/or experimental\nscenarios or as a trainee on-the-job.",
              "Be able to successfully complete tasks in this skill as requested. Help\nfrom an expert may be required from time to time, but can usually perform\nskill independently.",
              "Can perform the actions associated with this skill without assistance.",
              "Known as an expert in this area."
            ],
            "type": "string",
            "enum": [
              "SKILL_PROFICIENCY_LEVEL_UNSPECIFIED",
              "FUNDAMENTAL_AWARENESS",
              "NOVICE",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "context": {
            "description": "A paragraph describes context of this skill.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "skillNameSnippet": {
            "description": "Output only. Skill name snippet shows how the skill_name is related to\na search query. It's empty if the skill_name is not related to the\nsearch query.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Project": {
        "id": "Project",
        "description": "Resource that represents a project.\nFor example, a GitHub project, a class project.",
        "type": "object",
        "properties": {
          "projectName": {
            "description": "Project name.\n\nNumber of characters allowed is 100.\n\nDeprecated,  use display_name instead.",
            "type": "string"
          },
          "displayName": {
            "description": "Project name.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "projectDescription": {
            "description": "Project description.\n\nNumber of characters allowed is 100,000.\n\nDeprecated,  use description instead.",
            "type": "string"
          },
          "description": {
            "description": "Project description.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "projectUrl": {
            "description": "Project URL.\n\nNumber of characters allowed is 4,000.\n\nDeprecated,  use uri instead.",
            "type": "string"
          },
          "uri": {
            "description": "Project URL.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "createDate": {
            "description": "Project creation date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "updateDate": {
            "description": "Project update date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "teamMembers": {
            "description": "A list of team members involved in this project.\n\nNumber of characters allowed is 100.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skillsUsed": {
            "description": "A list of skills used in this project.",
            "type": "array",
            "items": {
              "$ref": "Skill"
            }
          },
          "projectNameSnippet": {
            "description": "Output only. Project name snippet shows how the project_name is related\nto a search query. It's empty if the project_name is not related to\nthe search query.",
            "type": "string"
          },
          "projectDescriptionSnippet": {
            "description": "Output only. Project description snippet shows how the\nproject_description is related to a search query. It's empty if the\nproject_description is not related to the search query.",
            "type": "string"
          },
          "skillsUsedSnippet": {
            "description": "Output only. skills_used_snippet shows how the corresponding\nskills_used is related to a search query. It's empty if the\ncorresponding skills_used is not related to the search query.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc)\nthis information is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Publication": {
        "id": "Publication",
        "description": "Resource that represents a publication.",
        "type": "object",
        "properties": {
          "authors": {
            "description": "A list of author names.\n\nNumber of characters allowed is 100.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "description": "The title of the publication.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "description": {
            "description": "The description of the publication.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "journal": {
            "description": "The journal name of the publication.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "volume": {
            "description": "Volume number.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "publisher": {
            "description": "Journal publisher\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "publicationDate": {
            "description": "The publication date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "publicationType": {
            "description": "The publication type.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "isbn": {
            "description": "ISBN number.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Patent": {
        "id": "Patent",
        "description": "Resource that represents the patent.",
        "type": "object",
        "properties": {
          "patentName": {
            "description": "Name of the patent.\n\nNumber of characters allowed is 100.\n\nDeprecated,  use display instead.",
            "type": "string"
          },
          "displayName": {
            "description": "Name of the patent.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "inventors": {
            "description": "A list of inventors' names.\n\nNumber of characters allowed for each is 100.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "patentStatus": {
            "description": "The status of the patent.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "patentStatusDate": {
            "description": "The date the last time the status of the patent was checked.",
            "$ref": "GoogleType__Date"
          },
          "patentFilingDate": {
            "description": "The date that the patent was filed.",
            "$ref": "GoogleType__Date"
          },
          "patentOffice": {
            "description": "The name of the patent office.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "patentNumber": {
            "description": "The number of the patent.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "patentDescription": {
            "description": "The description of the patent.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "skillsUsed": {
            "description": "The skills used in this patent.",
            "type": "array",
            "items": {
              "$ref": "Skill"
            }
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LicenseAndCertification": {
        "id": "LicenseAndCertification",
        "description": "Resource that represents a license or certification.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of license or certification.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "acquireDate": {
            "description": "Acquirement date or effective date of license or certification.",
            "$ref": "GoogleType__Date"
          },
          "expireDate": {
            "description": "Expiration date of license of certification if available.",
            "$ref": "GoogleType__Date"
          },
          "authority": {
            "description": "Authority of license such as the government.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "description": {
            "description": "Description of license.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Certification": {
        "id": "Certification",
        "description": "Resource that represents a license or certification.",
        "type": "object",
        "properties": {
          "displayName": {
            "description": "Name of license or certification.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "acquireDate": {
            "description": "Acquirement date or effective date of license or certification.",
            "$ref": "GoogleType__Date"
          },
          "expireDate": {
            "description": "Expiration date of license of certification if available.",
            "$ref": "GoogleType__Date"
          },
          "authority": {
            "description": "Authority of license such as government.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "description": {
            "description": "Description of license.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobApplication": {
        "id": "JobApplication",
        "description": "Resource that represents the job application information.",
        "type": "object",
        "properties": {
          "jobInfo": {
            "description": "The information of job the candidate is applied for.",
            "$ref": "JobInfo"
          },
          "applicationId": {
            "description": "The job application id.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "applicationDate": {
            "description": "The application date.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "lastStage": {
            "description": "Last stage the candidate reached in the application progress.\nFor example, \"new\", \"phone screen\", \"interview\".",
            "type": "string"
          },
          "status": {
            "description": "The application status.\n\nDeprecated,  use state instead.",
            "enumDescriptions": [
              "The default value.",
              "The offer is extended.",
              "The offer is rejected by candidate.",
              "The application is active.",
              "The candidate was rejected.",
              "The candidate was rejected.\n\nDeprecated, use COMPANY_REJECTED instead.",
              "The candidate is hired and hasn't started the new job.",
              "The candidate is hired and hasn't started the new job.\n\nDeprecated, use HIRED_PENDING_DATE instead.",
              "The candidate is hired started.",
              "The candidate is a prospect candidate."
            ],
            "type": "string",
            "enum": [
              "APPLICATION_STATUS_UNSPECIFIED",
              "OFFER_EXTENDED",
              "CANDIDATE_REJECTED",
              "ACTIVE",
              "COMPANY_REJECTED",
              "REJECTED",
              "HIRED_PENDING_DATE",
              "HIRED_PRE_START_DATE",
              "HIRED_STARTED",
              "PROSPECTED"
            ]
          },
          "state": {
            "description": "The application state.",
            "enumDescriptions": [
              "The default value.",
              "The offer is extended.",
              "The offer is rejected by candidate.",
              "The application is active.",
              "The candidate was rejected.",
              "The candidate was rejected.\n\nDeprecated, use COMPANY_REJECTED instead.",
              "The candidate is hired and hasn't started the new job.",
              "The candidate is hired and hasn't started the new job.\n\nDeprecated, use HIRED_PENDING_DATE instead.",
              "The candidate is hired started.",
              "The candidate is a prospect candidate."
            ],
            "type": "string",
            "enum": [
              "APPLICATION_STATUS_UNSPECIFIED",
              "OFFER_EXTENDED",
              "CANDIDATE_REJECTED",
              "ACTIVE",
              "COMPANY_REJECTED",
              "REJECTED",
              "HIRED_PENDING_DATE",
              "HIRED_PRE_START_DATE",
              "HIRED_STARTED",
              "PROSPECTED"
            ]
          },
          "averageInterviewScore": {
            "description": "The average interview score.",
            "type": "number",
            "format": "double"
          },
          "interviewScoreScaleId": {
            "description": "The scale id of the interview score.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "numberOfInterviews": {
            "description": "The number of interviews.",
            "type": "integer",
            "format": "int32"
          },
          "isEmployeeReferred": {
            "description": "If the candidate is referred by a employee.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "The last update timestamp.",
            "type": "string",
            "format": "google-datetime"
          },
          "outcomeReason": {
            "description": "The outcome reason. Typically a fixed list of options per tenant.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "outcomePositiveness": {
            "description": "Outcome positiveness shows how positive the outcome is.\nCurrently API only accepts -1, 0 and 1, where -1 means not positive, 0\nmeans neutral and 1 means positive. If other value is assigned, the\nupdate\/create request will fail.",
            "type": "number",
            "format": "double"
          },
          "isMatch": {
            "description": "Output only. Indicates whether this job application is a match to\napplication related filters. This value is only applicable in profile\nsearch response.",
            "type": "boolean"
          },
          "jobTitleSnippet": {
            "description": "Output only. Job title snippet shows how the job_title is related to a\nsearch query. It's empty if the job_title is not related to the search\nquery.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobInfo": {
        "id": "JobInfo",
        "description": "Resource that represents the information of a job.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The job id in client system.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "title": {
            "description": "The job's title.\nFor example, \"Software Engineer\", \"Professor\".\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "address": {
            "description": "The physical job location.",
            "$ref": "Address"
          },
          "description": {
            "description": "The job's description.\n\nNumber of characters allowed is 100,000.",
            "type": "string"
          },
          "jobRequirements": {
            "description": "Optional.\n\nJob requirements.",
            "type": "array",
            "items": {
              "$ref": "JobRequirement"
            }
          }
        }
      },
      "JobRequirement": {
        "id": "JobRequirement",
        "description": "A single job requirement which may contain multiple education, skill, and\nwork experience requirements, any of which can be used to satisfy the\njob requirement as a whole.\n\nExample: given a requirement of \"Bachelors in Computer Science or 4+ years\nrelevant work experience\", the Bachelors would be an education requirement\nand the relevant work experience would be an experience requirement, but\neither of the two may be used to satisfy the whole job requirement.",
        "type": "object",
        "properties": {
          "requirementText": {
            "description": "Optional.\n\nThe raw text of the job requirement.",
            "type": "string"
          },
          "educationRequirements": {
            "description": "Optional.\n\nThe education requirements of the job.",
            "type": "array",
            "items": {
              "$ref": "StructuredEducation"
            }
          },
          "skillRequirements": {
            "description": "Optional.\n\nThe skill requirements of the job.",
            "type": "array",
            "items": {
              "$ref": "StructuredSkill"
            }
          },
          "experienceRequirements": {
            "description": "Optional.\n\nThe experience requirements of the job.",
            "type": "array",
            "items": {
              "$ref": "StructuredExperience"
            }
          },
          "minRequiredCount": {
            "description": "Optional.\n\nThe number of requirements that need to be satisfied. Default 0. If the\nrequirement is optional (For example, \"Management experience is a bonus\"),\nput 0.\nExample: For the requirement \"Expertise with two or more of the following\nlanguages: Java, C++, Python, Go\", this field should be 2.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StructuredEducation": {
        "id": "StructuredEducation",
        "description": "Used as either an education requirement or qualification.",
        "type": "object",
        "properties": {
          "degree": {
            "description": "Optional.\n\nLevel of the degree (Bachelors, Masters, etc.)",
            "enumDescriptions": [
              "Default value.",
              "Early childhood education such as preschool; also known as nursery\nschool. ISCED code 0.\nE.g. Preschool or pre-kindergarten\n\nDeprecated.",
              "Primary education which is typically the first stage of compulsory\neducation. ISCED code 1.\nEx) Kindergarten",
              "Lower secondary education; First stage of secondary education building on\nprimary education, typically with a more subject-oriented curriculum.\nISCED code 2.\nEx) Middle school",
              "Middle education; Second\/final stage of secondary education preparing for\ntertiary education and\/or providing skills relevant to employment.\nUsually with an increased range of subject options and streams. ISCED\ncode 3.\nEx) High school",
              "Adult Remedial Education; Programmes providing learning experiences that\nbuild on secondary education and prepare for labour market entry and\/or\ntertiary education. The content is broader than secondary but not as\ncomplex as tertiary education. ISCED code 4.",
              "Associate's or equivalent; Short first tertiary programmes that are\ntypically practically-based, occupationally-specific and prepare for\nlabour market entry. These programmes may also provide a pathway to other\ntertiary programmes. ISCED code 5.",
              "Bachelor's or equivalent; Programmes designed to provide intermediate\nacademic and\/or professional knowledge, skills and competencies leading\nto a first tertiary degree or equivalent qualification. ISCED code 6.",
              "Master's or equivalent; Programmes designed to provide advanced academic\nand\/or professional knowledge, skills and competencies leading to a\nsecond tertiary degree or equivalent qualification. ISCED code 7.",
              "Doctoral or equivalent; Programmes designed primarily to lead to an\nadvanced research qualification, usually concluding with the submission\nand defense of a substantive dissertation of publishable quality based on\noriginal research. ISCED code 8."
            ],
            "type": "string",
            "enum": [
              "ISCED_DEGREE_UNSPECIFIED",
              "PRESCHOOL",
              "PRIMARY_EDUCATION",
              "LOWER_SECONDARY_EDUCATION",
              "UPPER_SECONDARY_EDUCATION",
              "ADULT_REMEDIAL_EDUCATION",
              "ASSOCIATES_OR_EQUIVALENT",
              "BACHELORS_OR_EQUIVALENT",
              "MASTERS_OR_EQUIVALENT",
              "DOCTORAL_OR_EQUIVALENT"
            ]
          },
          "major": {
            "description": "Required.\n\nName of the degree major.",
            "type": "string"
          }
        }
      },
      "StructuredSkill": {
        "id": "StructuredSkill",
        "description": "Used as either a skill requirement or qualification.",
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the skill usage.",
            "type": "string",
            "format": "google-duration"
          },
          "level": {
            "description": "Proficiency level of the skill.",
            "enumDescriptions": [
              "Default value if the proficiency level is not specified.",
              "Have a common knowledge or an understanding of basic techniques and\nconcepts.",
              "Have the level of experience gained in a classroom and\/or experimental\nscenarios or as a trainee on-the-job.",
              "Be able to successfully complete tasks in this skill as requested. Help\nfrom an expert may be required from time to time, but can usually perform\nskill independently.",
              "Can perform the actions associated with this skill without assistance.",
              "Known as an expert in this area."
            ],
            "type": "string",
            "enum": [
              "SKILL_PROFICIENCY_LEVEL_UNSPECIFIED",
              "FUNDAMENTAL_AWARENESS",
              "NOVICE",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "skill": {
            "description": "Required.\n\nName of the skill.",
            "type": "string"
          }
        }
      },
      "StructuredExperience": {
        "id": "StructuredExperience",
        "description": "Used as either an experience requirement or qualification.",
        "type": "object",
        "properties": {
          "duration": {
            "description": "Optional.\n\nDuration of the experience.",
            "type": "string",
            "format": "google-duration"
          },
          "jobTitle": {
            "description": "Required.\n\nTitle of the experience.",
            "type": "string"
          }
        }
      },
      "RecruitingNote": {
        "id": "RecruitingNote",
        "description": "RecruitingNote represents a note\/comment regarding the recruiting.\nFor example, \"This candidate is a potential match for a frontend position at\nSF\".",
        "type": "object",
        "properties": {
          "note": {
            "description": "The content of note.\n\nNumber of characters allowed is 4,000.",
            "type": "string"
          },
          "commenter": {
            "description": "The person who wrote the notes.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "createDate": {
            "description": "The create date of the note.\n\nIt can be a partial date (only year, or only year and month), but must be\nvalid. Otherwise, API will throw BAD_REQUEST. See\nEmploymentRecord.start_date for valid date examples.",
            "$ref": "GoogleType__Date"
          },
          "type": {
            "description": "The note type.\n\nNumber of characters allowed is 100.",
            "type": "string"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Qualifications": {
        "id": "Qualifications",
        "description": "The education, skill, and experience qualifications of a profile.",
        "type": "object",
        "properties": {
          "educationQualifications": {
            "description": "Optional.\n\nEducation qualifications of the profile.",
            "type": "array",
            "items": {
              "$ref": "StructuredEducation"
            }
          },
          "skillQualifications": {
            "description": "Optional.\n\nSkill qualifications of the profile.",
            "type": "array",
            "items": {
              "$ref": "StructuredSkill"
            }
          },
          "experienceQualifications": {
            "description": "Optional.\n\nExperience qualifications of the profile.",
            "type": "array",
            "items": {
              "$ref": "StructuredExperience"
            }
          }
        }
      },
      "CustomAttribute": {
        "id": "CustomAttribute",
        "description": "Advanced custom attribute that are either filterable or non-filterable.",
        "type": "object",
        "properties": {
          "key": {
            "description": "The key of this custom attribute. Any API request with a key that exceeds\n64 characters in length will be rejected. The key must start with an\nalphabet character followed by alphanumeric or underscore(_) characters.\nFor example, key0LikeThis or KEY_1_LIKE_THIS.",
            "type": "string"
          },
          "stringValue": {
            "description": "This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or\n`CASE_INSENSITIVE_MATCH`) search.\nFor filterable `string_values`, a maximum total number of 100 values\nis allowed, with each `string_value` has a byte size of no more than\n256B.\n\nEmpty strings are not allowed.",
            "type": "string"
          },
          "longValue": {
            "description": "Whole number custom value.",
            "type": "string",
            "format": "int64"
          },
          "filterable": {
            "description": "If the `filterable` flag is `true`, custom field values are searchable.\nIf `false`, values are not searchable.\nFor numeric value, this is ignored and API will make it unfilterable by\ndefault.",
            "type": "boolean"
          },
          "sources": {
            "description": "Output only. Indicates which sources (\"resume\", \"HR input\", etc.) this\ninformation is from. This is analogous to Profile.source. The API\nmerges identical information from the different profiles, and displays\nthese results.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchProfilesRequest": {
        "id": "SearchProfilesRequest",
        "description": "The request body of the `SearchProfiles` call.",
        "type": "object",
        "properties": {
          "requestMetadata": {
            "description": "The meta information collected about the profile search user. This is used\nto improve the search quality of the service. These values are provided by\nusers, and must be precise and consistent.",
            "$ref": "RequestMetadata"
          },
          "profileQuery": {
            "description": "Optional.\n\nSearch query to execute. See ProfileQuery for more details.",
            "$ref": "ProfileQuery"
          },
          "pageSize": {
            "description": "Optional.\n\nA limit on the number of profiles returned in the search results.\nIncreasing this value above the default value of 10 can increase search\nresponse time.\nThe maximum value can be set is 100. If it is greater than 100, API will\nreturn bad request error.",
            "type": "integer",
            "format": "int32"
          },
          "pageToken": {
            "description": "Optional.\n\nThe pageToken, similar to offset enables users of the API to paginate\nthrough the search results. To retrieve the first page of results, set the\npageToken to 0. The search response includes a\nnextPageToken field that can be\nused to populate the pageToken field for the next page of results. Using\npageToken instead of offset increases the performance of the API,\nespecially compared to larger offset values.",
            "type": "string"
          },
          "searchOptions": {
            "description": "Optional.\n\nProfile search options, for example if allow API to perform a spell check\nbefore search.",
            "$ref": "SearchOptions"
          },
          "offset": {
            "description": "Optional.\n\nAn integer that specifies the current offset (that is, starting result) in\nsearch results. This field is only considered if page_token is unset.\n\nThe maximum allowed value is 5000. If it is set greater than 5000, API will\nreturn bad request error.\n\nFor example, 0 means to search from the first profile, and 10 means to\nsearch from the 11th profile. This can be used for pagination, for example\npageSize = 10 and offset = 10 means to search from the second page.",
            "type": "integer",
            "format": "int32"
          },
          "histogramOptions": {
            "description": "Optional.\n\nWhen including the histogram information in profile search response. See\nHistogramOption for more details.",
            "type": "array",
            "items": {
              "$ref": "HistogramOption"
            }
          }
        }
      },
      "RequestMetadata": {
        "id": "RequestMetadata",
        "description": "Meta information related to the profile searcher or entity\nconducting the profile search. This information is used to improve the\nperformance of the service.",
        "type": "object",
        "properties": {
          "userId": {
            "description": "A unique user identification string, as determined by the client. The\nclient is responsible for ensuring client-level uniqueness of this value\nin order to have the strongest positive impact on search quality.\nObfuscate this field for privacy concerns before providing it to the\nservice.\n\nIf this field is not available for some reason, send \"UNKNOWN\".",
            "type": "string"
          },
          "sessionId": {
            "description": "A unique session identification string. A session is defined as the\nduration of an end user's interaction with the service over a period.\nObfuscate this field for privacy concerns before providing it to the API.\n\nIf this field is not available for some reason, send \"UNKNOWN\".",
            "type": "string"
          },
          "userAgent": {
            "description": "User agent of the end user who generated the request. It is highly advised\nto populate this field in order to improve API search quality.\n\nIf this field is not available for some reason, send \"UNKNOWN\".",
            "type": "string"
          },
          "domain": {
            "description": "The client-defined scope or source of the service call, which typically\nis the domain on\nwhich the service has been implemented and is currently being run.\n\nFor example, if the service is being run by client <em>Foo, Inc.<\/em>, on\njob board www.foo.com and career site www.bar.com, then this field would be\nset to \"foo.com\" for use on the job board, and \"bar.com\" for use on the\ncareer site.\n\nIf this field is not available for some reason, send \"UNKNOWN\".",
            "type": "string"
          }
        }
      },
      "ProfileQuery": {
        "id": "ProfileQuery",
        "description": "Filters to apply when performing the search query.",
        "type": "object",
        "properties": {
          "query": {
            "description": "Optional.\n\nKeywords to match any text fields of profiles.\nfor example \"software engineer in Palo Alto\".",
            "type": "string"
          },
          "locationFilters": {
            "description": "Optional.\n\nThe location filter specifies geo-regions containing the profiles to\nsearch against. See LocationFilter for more information.\n\nIf a location value is not specified, profiles is retrieved from any\nlocation.\n\nIf multiple values are provided, profiles that match any one of the\nvalues is retrieved.\n\nIf LocationFilter.is_exclusive is specified, the result won't contain\nprofiles from that location.\n\nfor example search for profiles that \"New York city\".",
            "type": "array",
            "items": {
              "$ref": "LocationFilter"
            }
          },
          "jobTitleFilters": {
            "description": "Optional.\n\nJob title filter specifies job titles of profiles to match on. See\nJobTitleFilter for more details.\n\nIf a job title is not specified, profiles with any title is retrieved.\n\nIf multiple values are specified, profiles are retrieved with any of the\nspecified job titles.\n\nIf JobTitleFilter.is_exclusive is specified, the result won't contain\nprofiles with that job title.\n\nfor example search for profiles that have a job title \"Product Manager\".",
            "type": "array",
            "items": {
              "$ref": "JobTitleFilter"
            }
          },
          "companyFilters": {
            "description": "Optional.\n\nCompany filter specifies companies of profiles to match on.\nSee CompanyFilter for more details.\n\nIf a company filter is not specified, profiles with any company is\nretrieved.\n\nIf multiple company filters are specified, profiles with any matching\ncompany is retrieved.\n\nIf CompanyFilter.is_exclusive is specified, the result won't contain\nprofiles that match that company filter.\n\nfor example search for profiles that have a working experience at \"Google\nInc\".",
            "type": "array",
            "items": {
              "$ref": "CompanyFilter"
            }
          },
          "educationFilters": {
            "description": "Optional.\n\nEducation filter specifies education of profiles to match on.\nSee EducationFilter for more details.\n\nIf an education filter is not specified, profiles with any education will\nbe retrieved.\n\nIf mutliple education filters are specified, profiles that match any one\nof the education filters are retrieved.\n\nIf EducationFilter.is_exclusive is specified, the result won't\ncontain profiles that match that education filter.\n\nfor example search for profiles that have a master degree.",
            "type": "array",
            "items": {
              "$ref": "EducationFilter"
            }
          },
          "skillFilters": {
            "description": "Optional.\n\nSkill filter specifies skill of profiles to match on.\nSee SkillFilter for more details.\n\nIf a skill filter is not specified, profiles with any skill is\nretrieved.\n\nIf mutliple skill filters are specified, profiles that match any one\nof the skill filters are retrieved.\n\nIf SkillFilter.is_exclusive is specified, the result won't\ncontain profiles that match that skill filter.\n\nfor example search for profiles that have \"Java\" and \"Python\" in skill\nlist.",
            "type": "array",
            "items": {
              "$ref": "SkillFilter"
            }
          },
          "workExperienceFilter": {
            "description": "Optional.\n\nWork experience filter specifies the total working experience of profiles\nto match on.\n\nIf a work experience filter is not specified, profiles with any\nprofessional experience is retrieved.\n\nIf multiple work experience filter are specified, profiles that match any\nof the filter is retrieved.\n\nfor example search for profiles with 10 years of work experience.",
            "type": "array",
            "items": {
              "$ref": "WorkExperienceFilter"
            }
          },
          "timeFilters": {
            "description": "Optional.\n\nTime filter specifies the create\/update timestamp of the profile to match\non.\n\nfor example search for profiles that created since \"2018-1-1\".",
            "type": "array",
            "items": {
              "$ref": "TimeFilter"
            }
          },
          "hirableFilter": {
            "description": "Optional.\n\nThe hirable filter specifies the profile's hirable status to match on.\nBy default, all profiles is retrieved.",
            "type": "boolean"
          },
          "applicationDateFilters": {
            "description": "Optional.\n\nThe application date filters which specify application start date ranges.\nSee ApplicationDateFilter for more details.",
            "type": "array",
            "items": {
              "$ref": "ApplicationDateFilter"
            }
          },
          "applicationOutcomeReasonFilters": {
            "description": "Optional.\n\nThe application outcome reason filters which specify the outcome reasons of\njob application.\nSee ApplicationOutcomeReasonFilter for more details.",
            "type": "array",
            "items": {
              "$ref": "ApplicationOutcomeReasonFilter"
            }
          },
          "applicationLastStageFilters": {
            "description": "Optional.\n\nThe application last stage filters which specify the last stage of job\napplication.\nSee ApplicationLastStageFilter for more details.",
            "type": "array",
            "items": {
              "$ref": "ApplicationLastStageFilter"
            }
          },
          "applicationJobFilters": {
            "description": "Optional.\n\nThe application job filters which specify the job applied for in the\napplication.\nSee ApplicationJobFilter for more details.",
            "type": "array",
            "items": {
              "$ref": "ApplicationJobFilter"
            }
          },
          "applicationStatusFilters": {
            "description": "Optional.\n\nThe application status filters which specify the status of job application.\nSee ApplicationStatusFilter for more details.",
            "type": "array",
            "items": {
              "$ref": "ApplicationStatusFilter"
            }
          },
          "customFieldFilter": {
            "description": "Optional.\n\nThis filter specifies a structured syntax to match against the\nProfile.custom_attributes that are marked as `filterable`.\n\nThe syntax for this expression is a subset of Google SQL syntax.\n\nSupported operators are: =, != where the left of the operator is a custom\nfield key and the right of the operator is a string (surrounded by quotes)\nvalue.\n\nSupported functions are LOWER(<field_name>) to\nperform case insensitive match and EMPTY(<field_name>) to filter on the\nexistence of a key.\n\nBoolean expressions (AND\/OR\/NOT) are supported up to 3 levels of\nnesting (for example \"((A AND B AND C) OR NOT D) AND E\"), and there can be\na maximum of 50 comparisons\/functions in the expression. The expression\nmust be < 2000 characters in length.\n\nSample Query:\n(key1 = \"TEST\" OR LOWER(key1)=\"test\" OR NOT EMPTY(key1))",
            "type": "string"
          }
        }
      },
      "LocationFilter": {
        "id": "LocationFilter",
        "description": "Geographic region of the search.\nInput only.",
        "type": "object",
        "properties": {
          "address": {
            "description": "Required.\n\nThe current address of the profile.",
            "$ref": "Address"
          },
          "additionalRadiusInMiles": {
            "description": "Optional.\n\nDefault radius is radius of city unless it's specified. When radius is\nspecified, search is expanded to specified radius on top of city\nradius.\nThis feature only works for specific location type such as city. For less\nspecific location (country, state, etc), radius can be ignored.\nFor example, \"New York, NY\" with a specified \"20 miles\" radius will get\nany profile with address within 45 miles (New York city radius: 25 miles +\nspecified radius: 20 miles) of New York city center.",
            "type": "number",
            "format": "double"
          },
          "isExclusive": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.",
            "type": "boolean"
          }
        }
      },
      "JobTitleFilter": {
        "id": "JobTitleFilter",
        "description": "Job title of the search.\nInput only.",
        "type": "object",
        "properties": {
          "jobTitle": {
            "description": "Required.\n\nThe job title, such as \"Software engineer\", \"Product manager\".",
            "type": "string"
          },
          "isExclusive": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.",
            "type": "boolean"
          }
        }
      },
      "CompanyFilter": {
        "id": "CompanyFilter",
        "description": "Company filter of the search.\nInput only.",
        "type": "object",
        "properties": {
          "companyName": {
            "description": "Required.\n\nThe company name, for example \"Google\", \"Alphabet\".\n\nDeprecated, use company instead.",
            "type": "string"
          },
          "isExclusive": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "company": {
            "description": "Required.\n\nThe company name, for example \"Google\", \"Alphabet\".",
            "type": "string"
          },
          "negated": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.",
            "type": "boolean"
          }
        }
      },
      "EducationFilter": {
        "id": "EducationFilter",
        "description": "Education filter of the search.\nInput only.",
        "type": "object",
        "properties": {
          "schoolName": {
            "description": "Optional.\n\nThe school name. for example \"MIT\", \"University of California, Berkeley\".\n\nDeprecated, use school instead.",
            "type": "string"
          },
          "fieldOfStudy": {
            "description": "Optional.\n\nThe field of study. This is to search against value provided in\nDegree.field_of_study.\nfor example \"Computer science\", \"math\".",
            "type": "string"
          },
          "iscedDegree": {
            "description": "Optional.\n\nEducation degree in ISCED code. Each value in degree will cover specific\nlevel of education, without any expansion to upper nor lower levels of\neducation degree.",
            "enumDescriptions": [
              "Default value.",
              "Early childhood education such as preschool; also known as nursery\nschool. ISCED code 0.\nE.g. Preschool or pre-kindergarten\n\nDeprecated.",
              "Primary education which is typically the first stage of compulsory\neducation. ISCED code 1.\nEx) Kindergarten",
              "Lower secondary education; First stage of secondary education building on\nprimary education, typically with a more subject-oriented curriculum.\nISCED code 2.\nEx) Middle school",
              "Middle education; Second\/final stage of secondary education preparing for\ntertiary education and\/or providing skills relevant to employment.\nUsually with an increased range of subject options and streams. ISCED\ncode 3.\nEx) High school",
              "Adult Remedial Education; Programmes providing learning experiences that\nbuild on secondary education and prepare for labour market entry and\/or\ntertiary education. The content is broader than secondary but not as\ncomplex as tertiary education. ISCED code 4.",
              "Associate's or equivalent; Short first tertiary programmes that are\ntypically practically-based, occupationally-specific and prepare for\nlabour market entry. These programmes may also provide a pathway to other\ntertiary programmes. ISCED code 5.",
              "Bachelor's or equivalent; Programmes designed to provide intermediate\nacademic and\/or professional knowledge, skills and competencies leading\nto a first tertiary degree or equivalent qualification. ISCED code 6.",
              "Master's or equivalent; Programmes designed to provide advanced academic\nand\/or professional knowledge, skills and competencies leading to a\nsecond tertiary degree or equivalent qualification. ISCED code 7.",
              "Doctoral or equivalent; Programmes designed primarily to lead to an\nadvanced research qualification, usually concluding with the submission\nand defense of a substantive dissertation of publishable quality based on\noriginal research. ISCED code 8."
            ],
            "type": "string",
            "enum": [
              "ISCED_DEGREE_UNSPECIFIED",
              "PRESCHOOL",
              "PRIMARY_EDUCATION",
              "LOWER_SECONDARY_EDUCATION",
              "UPPER_SECONDARY_EDUCATION",
              "ADULT_REMEDIAL_EDUCATION",
              "ASSOCIATES_OR_EQUIVALENT",
              "BACHELORS_OR_EQUIVALENT",
              "MASTERS_OR_EQUIVALENT",
              "DOCTORAL_OR_EQUIVALENT"
            ]
          },
          "isExclusive": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "school": {
            "description": "Optional.\n\nThe school name. for example \"MIT\", \"University of California, Berkeley\".",
            "type": "string"
          },
          "negated": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.",
            "type": "boolean"
          }
        }
      },
      "SkillFilter": {
        "id": "SkillFilter",
        "description": "Skill filter of the search.\nInput only.",
        "type": "object",
        "properties": {
          "skill": {
            "description": "Required.\n\nThe skill name. for example \"java\", \"j2ee\", etc.",
            "type": "string"
          },
          "isExclusive": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\n\nWhether to apply negation to the filter so profiles matching the filter\nis excluded. Default is false. that is, inclusive.",
            "type": "boolean"
          }
        }
      },
      "WorkExperienceFilter": {
        "id": "WorkExperienceFilter",
        "description": "Work experience filter. This filter is search for profiles with working\nexperience length between min_experience_in_months and\nmax_experience_in_months.",
        "type": "object",
        "properties": {
          "minExperienceInMonths": {
            "description": "Optional.\n\nThe minimum months of the work experience (inclusive).\n\nDeprecated, use min_experience instead.",
            "type": "integer",
            "format": "int32"
          },
          "maxExperienceInMonths": {
            "description": "Optional.\n\nThe maximum months of the work experience (inclusive).\n\nDeprecated, use max_experience instead.",
            "type": "integer",
            "format": "int32"
          },
          "minExperience": {
            "description": "Optional.\n\nThe minimum duration of the work experience (inclusive).",
            "type": "string",
            "format": "google-duration"
          },
          "maxExperience": {
            "description": "Optional.\n\nThe maximum duration of the work experience (exclusive).",
            "type": "string",
            "format": "google-duration"
          }
        }
      },
      "TimeFilter": {
        "id": "TimeFilter",
        "description": "Filter on create timestamp or update timestamp of profiles.\nInput only.",
        "type": "object",
        "properties": {
          "startTime": {
            "description": "Optional.\n\nStart timestamp, matching profile will include the end time. If it's\nmissing, The API matches profiles with create \/ update timestamp before the\nend timestamp.",
            "type": "string",
            "format": "google-datetime"
          },
          "endTime": {
            "description": "Optional.\n\nEnd timestamp, matching profile will include the end time. If it's\nmissing, The API matches profiles with create \/ update timestamp after the\nstart timestamp.",
            "type": "string",
            "format": "google-datetime"
          },
          "timeField": {
            "description": "Optional.\n\nSpecifies which time field to filter profiles. If it's not provided which\nis unspecified value, it will fall back to CREATE_TIME.",
            "enumDescriptions": [
              "Default value. The API will fall back to CREATE_TIME.",
              "Earliest profile create time.",
              "Latest profile update time."
            ],
            "type": "string",
            "enum": [
              "TIME_FIELD_UNSPECIFIED",
              "CREATE_TIME",
              "UPDATE_TIME"
            ]
          }
        }
      },
      "ApplicationDateFilter": {
        "id": "ApplicationDateFilter",
        "description": "Application Date Range Filter.\nThe API matches profiles with JobApplication.application_date between\nstart date and end date (both boundary are inclusive). The API ignores the\nfilter if both start date and end date are missing. Input only.",
        "type": "object",
        "properties": {
          "startDate": {
            "description": "Optional.\nStart date. If it's missing, The API matches profiles with application date\nwhich is not after the end date.",
            "$ref": "GoogleType__Date"
          },
          "endDate": {
            "description": "Optional.\nEnd date. If it's missing, The API matches profiles with application date\nwhich is not before the start date.",
            "$ref": "GoogleType__Date"
          }
        }
      },
      "ApplicationOutcomeReasonFilter": {
        "id": "ApplicationOutcomeReasonFilter",
        "description": "Outcome Reason Filter.\nInput only.",
        "type": "object",
        "properties": {
          "outcomeReason": {
            "description": "Required.\nUser entered or selected outcome reason. The API does an exact match\nbetween the outcome reason specified in this filter and the\nJobApplication.outcome_reason in profiles.",
            "type": "string"
          },
          "isExclusive": {
            "description": "Optional.\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.outcome_reason matching the outcome reason specified in\nthe filter.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.outcome_reason matching the outcome reason specified in\nthe filter.",
            "type": "boolean"
          }
        }
      },
      "ApplicationLastStageFilter": {
        "id": "ApplicationLastStageFilter",
        "description": "Filter on Last Stage of Application.\nInput only.",
        "type": "object",
        "properties": {
          "lastStage": {
            "description": "Required.\nUser entered or selected last stage the candidate reached in the\napplication. The API does an exact match between the last stage specified\nin this filter and the JobApplication.last_stage in profiles.",
            "type": "string"
          },
          "isExclusive": {
            "description": "Optional.\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.last_stage matching the last stage specified in the\nfilter.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.last_stage matching the last stage specified in the\nfilter.",
            "type": "boolean"
          }
        }
      },
      "ApplicationJobFilter": {
        "id": "ApplicationJobFilter",
        "description": "Filter on the job information of Application.\nInput Only.",
        "type": "object",
        "properties": {
          "jobInfo": {
            "description": "Required.\n\nThe information of the job the application applied for.\nIf JobInfo.id is provided, The API does an exact match between\nJobInfo.id and the JobApplication.job_info.id in profiles.\nOtherwise, if JobInfo.title is provided, The API does an exact match\nbetween JobInfo.title and the JobApplication.job_info.title in\nprofiles.\n\nIf none of JobInfo.id and JobInfo.title is provided, The API\nignores the filter.",
            "$ref": "JobInfo"
          },
          "isExclusive": {
            "description": "Optional.\n\nIt's false by default.\nIf true and JobInfo.id is provided, The API excludes all candidates\nwith any JobApplication.job_info.external_id matching the\nJobInfo.id specified in the filter. If true and JobInfo.id is not\nprovided but JobInfo.title is provided, The API excludes all candidates\nwith any JobApplication.job_info.title matching the JobInfo.title\nspecified in the filter.\n\nIf none of JobInfo.id and JobInfo.title is provided, The API will\nignore the filter.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\n\nIt's false by default.\nIf true and JobInfo.id is provided, The API excludes all candidates\nwith any JobApplication.job_info.external_id matching the\nJobInfo.id specified in the filter. If true and JobInfo.id is not\nprovided but JobInfo.title is provided, The API excludes all candidates\nwith any JobApplication.job_info.title matching the JobInfo.title\nspecified in the filter.\n\nIf none of JobInfo.id and JobInfo.title is provided, The API will\nignore the filter.",
            "type": "boolean"
          }
        }
      },
      "ApplicationStatusFilter": {
        "id": "ApplicationStatusFilter",
        "description": "Filter on status of Application.\nInput only.",
        "type": "object",
        "properties": {
          "applicationStatus": {
            "description": "Required.\n\nUser entered or selected application status. The API does an exact match\nbetween the application status specified in this filter and the\nJobApplication.status in profiles.",
            "enumDescriptions": [
              "The default value.",
              "The offer is extended.",
              "The offer is rejected by candidate.",
              "The application is active.",
              "The candidate was rejected.",
              "The candidate was rejected.\n\nDeprecated, use COMPANY_REJECTED instead.",
              "The candidate is hired and hasn't started the new job.",
              "The candidate is hired and hasn't started the new job.\n\nDeprecated, use HIRED_PENDING_DATE instead.",
              "The candidate is hired started.",
              "The candidate is a prospect candidate."
            ],
            "type": "string",
            "enum": [
              "APPLICATION_STATUS_UNSPECIFIED",
              "OFFER_EXTENDED",
              "CANDIDATE_REJECTED",
              "ACTIVE",
              "COMPANY_REJECTED",
              "REJECTED",
              "HIRED_PENDING_DATE",
              "HIRED_PRE_START_DATE",
              "HIRED_STARTED",
              "PROSPECTED"
            ]
          },
          "isExclusive": {
            "description": "Optional.\n\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.status matching the status specified in the filter.\n\nDeprecated, use negated instead.",
            "type": "boolean"
          },
          "negated": {
            "description": "Optional.\n\nIt's false by default. If true, The API excludes all candidates with any\nJobApplication.status matching the status specified in the filter.",
            "type": "boolean"
          }
        }
      },
      "SearchOptions": {
        "id": "SearchOptions",
        "description": "Profile search options.",
        "type": "object",
        "properties": {
          "disableSpellCheck": {
            "description": "Optional.\n\nThis flag controls the spell-check feature. If `false`, the\nservice attempts to correct a misspelled query,\nfor example, \"enginee\" will be corrected to \"engineer\".\n\nDefaults to `false`: a spell check will be performed.",
            "type": "boolean"
          },
          "sortBy": {
            "description": "Optional.\n\nThe criteria that determines how search results are sorted.\nDefaults to SortBy.RELEVANCE_DESC if no value is specified.\n\nDeprecated, use order_by instead.",
            "enumDescriptions": [
              "Default value.",
              "By descending relevance, as determined by the API algorithms.",
              "Sort by profile update date descending order (recently updated profiles\nfirst).",
              "Sort by profile create date descending order (recently created profiles\nfirst).",
              "Sort by first name alphabetical order.",
              "Sort by first name reverse alphabetical order.",
              "Sort by last name alphabetical order.",
              "Sort by last name reverse alphabetical order."
            ],
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "RELEVANCE_DESC",
              "UPDATE_DATE_DESC",
              "CREATE_DATE_DESC",
              "FIRST_NAME",
              "FIRST_NAME_DESC",
              "LAST_NAME",
              "LAST_NAME_DESC"
            ]
          },
          "caseInsensitiveSort": {
            "description": "Optional.\n\nWhen sort by field is based on alphabetical order, sort values case\ninsensitively when the value is set to true. Default value is case\nsensitive sort (false).\n\nDeprecated.",
            "type": "boolean"
          },
          "orderBy": {
            "description": "Optional.\n\nThe criteria that determines how search results are sorted.\nDefaults is \"relevance desc\" if no value is specified.\n\nSupported options are:\n\n* \"relevance desc\": By descending relevance, as determined by the API\n   algorithms.\n* \"update_date desc\": Sort by Profile.update_date in descending order\n  (recently updated profiles first).\n* \"create_date desc\": Sort by Profile.create_date in descending order\n  (recently created profiles first).\n* \"first_name\": Sort by PersonStrcuturedName.given_name in ascending\n  order.\n* \"first_name desc\": Sort by PersonStrcuturedName.given_name in\n  descending order.\n* \"last_name\": Sort by PersonStrcuturedName.family_name in ascending\n  order.\n* \"last_name desc\": Sort by PersonStrcuturedName.family_name in\n  ascending order.",
            "type": "string"
          },
          "caseSensitiveSort": {
            "description": "Optional.\n\nWhen sort by field is based on alphabetical order, sort values case\nsensitively (based on ASCII) when the value is set to true. Default value\nis case in-sensitive sort (false).",
            "type": "boolean"
          }
        }
      },
      "HistogramOption": {
        "id": "HistogramOption",
        "description": "Histogram option.\nInput Only.",
        "type": "object",
        "properties": {
          "histogramSpec": {
            "description": "An expression specifies a histogram request against matching profiles for\nSearchProfilesRequest.\n\nThe expression syntax looks like a function definition with optional\nparameters.\n\nFunction syntax: function_name(histogram_facet[, list of buckets])\n\nData types:\n\n* Histogram facet: facet names with format a-zA-Z+.\n* String: string like \"any string with backslash escape for quote(\\\").\"\n* Number: whole number and floating point number like 10, -1 and -0.01.\n* List: list of elements with comma(,) separator surrounded by square\nbrackets. For example, [1, 2, 3] and [\"one\", \"two\", \"three\"].\n\nBuilt-in constants:\n\n* MIN (minimum number similar to java Double.MIN_VALUE)\n* MAX (maximum number similar to java Double.MAX_VALUE)\n\nBuilt-in functions:\n\n* bucket(start, end[, label])\nBucket build-in function creates a bucket with range of start, end). Note\nthat the end is exclusive.\nFor example, bucket(1, MAX, \"positive number\") or bucket(1, 10).\n\nHistogram Facets:\n\n* admin1: Admin1 is a global placeholder for referring to state, province,\nor the particular term a country uses to define the geographic structure\nbelow the country level. Examples include states codes such as \"CA\", \"IL\",\n\"NY\", and provinces, such as \"BC\".\n* locality: Locality is a global placeholder for referring to city, town,\nor the particular term a country uses to define the geographic structure\nbelow the admin1 level. Examples include city names such as\n\"Mountain View\" and \"New York\".\n* extended_locality: Extended locality is concatenated version of admin1\nand locality with comma separator. For example, \"Mountain View, CA\" and\n\"New York, NY\".\n* postal_code: Postal code of profile which follows locale code.\n* country: Country code (ISO-3166-1 alpha-2 code) of profile, such as US,\n JP, GB.\n* job_title: Normalized job titles specified in EmploymentHistory.\n* company_name: Normalized company name of profiles to match on.\n* institution: The school name. For example, \"MIT\",\n\"University of California, Berkeley\"\n* degree: Highest education degree in ISCED code. Each value in degree\ncovers specific level of education, without any expansion to upper nor\nlower levels of education degree.\n* experience_in_months: experience in months. 0 means 0 month to 1 month\n(exclusive).\n* application_date: The application date specifies application start dates.\nSee [ApplicationDateFilter for more details.\n* application_outcome_reason: The application outcome reason specifies the\noutcome reasons of job application.\nSee ApplicationOutcomeReasonFilter for more details.\n* application_last_stage: The application last stage specifies the last\nstage of job application.\nSee ApplicationLastStageFilter for more details.\n* application_job_title: The application job title specifies the job\napplied for in the application.\nSee ApplicationJobFilter for more details.\n* application_status: The application status specifies the status of job\napplication.\nSee ApplicationStatusFilter for more details.\n* hirable_status: Hirable status specifies the profile's hirable status.\n* string_custom_attribute: String custom attributes. Values can be accessed\nvia square bracket notation like string_custom_attribute[\"key1\"].\n* numeric_custom_attribute: Numeric custom attributes. Values can be\naccessed via square bracket notation like numeric_custom_attribute[\"key1\"].\n\nExample expressions:\n\n* count(admin1)\n* count(experience_in_months, [bucket(0, 12, \"1 year\"),\nbucket(12, 36, \"1-3 years\"), bucket(36, MAX, \"3+ years\")])\n* count(string_custom_attribute[\"assigned_recruiter\"])\n* count(numeric_custom_attribute[\"favorite_number\"],\n[bucket(MIN, 0, \"negative\"), bucket(0, MAX, \"non-negative\")])",
            "type": "string"
          }
        }
      },
      "SearchProfilesResponse": {
        "id": "SearchProfilesResponse",
        "description": "Response of SearchProfiles method.",
        "type": "object",
        "properties": {
          "estimatedTotalSize": {
            "description": "An estimation of the number of profiles that match the specified query.\n\nThis number is not guaranteed to be accurate.",
            "type": "string",
            "format": "int64"
          },
          "mergedProfiles": {
            "description": "The profile entities that match the specified SearchProfilesRequest.\n\nDeprecated, use summarized_profiles instead.",
            "type": "array",
            "items": {
              "$ref": "MergedProfile"
            }
          },
          "spellResult": {
            "description": "The spell checking result, and correction.\n\nDeprecated, use spell_correction instead.",
            "$ref": "SpellingCorrection"
          },
          "spellCorrection": {
            "description": "The spell checking result, and correction.",
            "$ref": "SpellingCorrection"
          },
          "metadata": {
            "description": "Additional information for the API invocation, such as the request\ntracking id.",
            "$ref": "ResponseMetadata"
          },
          "nextPageToken": {
            "description": "A token to retrieve the next page of results. This is empty if there are no\nmore results.",
            "type": "string"
          },
          "histogramResults": {
            "description": "The histogram results that match with specified\nSearchProfilesRequest.HistogramOptions.",
            "type": "array",
            "items": {
              "$ref": "HistogramResult"
            }
          },
          "summarizedProfiles": {
            "description": "The profile entities that match the specified SearchProfilesRequest.",
            "type": "array",
            "items": {
              "$ref": "SummarizedProfile"
            }
          }
        }
      },
      "MergedProfile": {
        "id": "MergedProfile",
        "description": "Profile entry with metadata inside SearchProfilesResponse.",
        "type": "object",
        "properties": {
          "profiles": {
            "description": "A list of profiles that are linked by Profile.associated_profile_name.",
            "type": "array",
            "items": {
              "$ref": "Profile"
            }
          },
          "summary": {
            "description": "A profile summary shows the profile summary and how the profile will match\nthe search query.\n\nIn profile summary, we merge the information of profiles together. Among\nprofiles, same education\/employment record will be slightly different. for\nexample in one profile the school name is \"UC Berkeley\" and the field study\nis \"Computer Science\" and in another the school name is \"University of\nCalifornia at Berkeley\" and the field study is \"CS\", assume\nother fields are the same. The API will merge these two inputs into\none and select one value for each field. for example the\nschool_name will be \"University of California at Berkeley\" and\nthe field_of_study will be \"Computer Science\".",
            "$ref": "Profile"
          }
        }
      },
      "SpellingCorrection": {
        "id": "SpellingCorrection",
        "description": "Spell check result.\nOutput only.",
        "type": "object",
        "properties": {
          "corrected": {
            "description": "Indicates if the query was corrected by the spell checker.",
            "type": "boolean"
          },
          "correctedText": {
            "description": "Correction output consisting of the corrected keyword string.",
            "type": "string"
          },
          "correctedHtml": {
            "description": "Corrected output with html tag to highlight the corrected words. The\ncorrected words are highlighted with \"<b><i>\" html tag.\n\nfor example user input query is \"software enginear\", and the second word,\n\"enginear\", should be corrected to \"engineer\", then when spelling\ncorrection is enabled, this value should be\n\"software <b><i>engineer<\/i><\/b>\".",
            "type": "string"
          }
        }
      },
      "ResponseMetadata": {
        "id": "ResponseMetadata",
        "description": "Output only. Additional information returned to client, such as debugging\ninformation.",
        "type": "object",
        "properties": {
          "requestId": {
            "description": "Unique id associated with an API action for tracking purpose. It is a UUID.",
            "type": "string"
          }
        }
      },
      "HistogramResult": {
        "id": "HistogramResult",
        "description": "Histogram result that matches HistogramOption specified in\nSearchProfilesRequest.\nOutput only.",
        "type": "object",
        "properties": {
          "histogramSpec": {
            "description": "Requested histogram expression.",
            "type": "string"
          },
          "histogram": {
            "description": "Stores a map from the values of facet associated with `key` to the number\nof matching profiles with that value in this histogram result.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          }
        }
      },
      "SummarizedProfile": {
        "id": "SummarizedProfile",
        "description": "Profile entry with metadata inside SearchProfilesResponse.",
        "type": "object",
        "properties": {
          "profiles": {
            "description": "A list of profiles that are linked by Profile.associated_profile_name.",
            "type": "array",
            "items": {
              "$ref": "Profile"
            }
          },
          "summary": {
            "description": "A profile summary shows the profile summary and how the profile will match\nthe search query.\n\nIn profile summary, we merge the information of profiles together. Among\nprofiles, same education\/employment record will be slightly different. for\nexample in one profile the school name is \"UC Berkeley\" and the field study\nis \"Computer Science\" and in another the school name is \"University of\nCalifornia at Berkeley\" and the field study is \"CS\", assume\nother fields are the same. The API will merge these two inputs into\none and select one value for each field. for example the\nschool_name will be \"University of California at Berkeley\" and\nthe field_of_study will be \"Computer Science\".",
            "$ref": "Profile"
          }
        }
      },
      "RecommendProfilesRequest": {
        "id": "RecommendProfilesRequest",
        "description": "Recommend profiles for a given job request.",
        "type": "object",
        "properties": {
          "requestMetadata": {
            "description": "The meta information collected about the profile recommendation user. This\nis used to improve the recommendation quality of the service. These values\nare provided by users, and must be precise and consistent.",
            "$ref": "RequestMetadata"
          },
          "job": {
            "description": "Required.\n\nThe provided jobs. The recommended profiles will match this job.\n\nDeprecated, use job_info instead.",
            "$ref": "JobInfo"
          },
          "jobInfo": {
            "description": "Required.\n\nThe provided jobs. The recommended profiles will match this job.",
            "$ref": "JobInfo"
          },
          "pageSize": {
            "description": "Optional.\n\nA limit on the number of profiles returned in the recommendation results.\nIncreasing this value above the default value of 10 can increase search\nresponse time.\nThe maximum value can be set is 100. If it is greater than 100, API will\nreturn bad request error.",
            "type": "integer",
            "format": "int32"
          },
          "pageToken": {
            "description": "Optional.\n\nThe token that specifies the current offset within recommendation results.\nSee RecommendProfilesResponse.next_page_token for an explanation of how\nto obtain the next set of query results.",
            "type": "string"
          },
          "parent": {
            "description": "Required.\n\nRecommended profiles are from this tenant.\nfor example \"tenants\/foo\".",
            "type": "string"
          }
        }
      },
      "RecommendProfilesResponse": {
        "id": "RecommendProfilesResponse",
        "description": "Recommend profiles for a given job response.",
        "type": "object",
        "properties": {
          "metadata": {
            "description": "Additional information for the API invocation, such as the request\ntracking id.",
            "$ref": "ResponseMetadata"
          },
          "mergedProfiles": {
            "description": "The profile entities that match the given job.\n\nDeprecated, use summarized_profiles instead.",
            "type": "array",
            "items": {
              "$ref": "MergedProfile"
            }
          },
          "nextPageToken": {
            "description": "A token to retrieve the next page of results. This is empty if there are no\nmore results.",
            "type": "string"
          },
          "summarizedProfiles": {
            "description": "The profile entities that match the given job.",
            "type": "array",
            "items": {
              "$ref": "SummarizedProfile"
            }
          }
        }
      },
      "ParseResumeRequest": {
        "id": "ParseResumeRequest",
        "description": "Parse resume request.",
        "type": "object",
        "properties": {
          "resume": {
            "description": "The bytes of the resume file in common format. Currently the API supports\nthe following format:\nPDF, TXT, DOC, RTF and DOCX.",
            "type": "string",
            "format": "byte"
          },
          "regionCode": {
            "description": "Optional.\nThe regionCode indicating where the resume is from. Values\nare as per the ISO-3166-2 format. For example, US, FR, DE.\n\nThis value is optional, but providing this value improves the resume\nparsing quality and performance.\n\nIf the regionCode is invalid, the API returns a BAD_REQUEST error.",
            "type": "string"
          }
        }
      },
      "ParseResumeResponse": {
        "id": "ParseResumeResponse",
        "description": "Parse resume response.",
        "type": "object",
        "properties": {
          "profile": {
            "description": "The profile parsed from resume.",
            "$ref": "Profile"
          },
          "rawText": {
            "description": "Raw text from resume.",
            "type": "string"
          }
        }
      }
    },
    "resources": {
      "tenants": {
        "methods": {
          "list": {
            "id": "cloudprofile.tenants.list",
            "path": "v2alpha1/tenants",
            "flatPath": "v2alpha1/tenants",
            "httpMethod": "GET",
            "parameters": {
              "pageToken": {
                "description": "Optional.\n\nThe token that specifies the current offset (that is, starting result).\nPlease set the value to ListTenantsResponse.next_page_token for\ncontinuing the list.",
                "location": "query",
                "type": "string"
              },
              "pageSize": {
                "description": "Optional.\n\nThe maximum number of tenants to be returned, at most 100.\nDefault is 100 unless a positive number smaller than 100 is specified.",
                "location": "query",
                "type": "integer",
                "format": "int32"
              }
            },
            "parameterOrder": [
            ],
            "response": {
              "$ref": "ListTenantsResponse"
            },
            "description": "Lists tenants owned by the client. The order is unspecified."
          },
          "create": {
            "id": "cloudprofile.tenants.create",
            "path": "v2alpha1/tenants",
            "flatPath": "v2alpha1/tenants",
            "httpMethod": "POST",
            "parameters": {
            },
            "parameterOrder": [
            ],
            "request": {
              "$ref": "Tenant"
            },
            "response": {
              "$ref": "Tenant"
            },
            "description": "Creates and returns a new tenant entity."
          },
          "get": {
            "id": "cloudprofile.tenants.get",
            "path": "v2alpha1/{+name}",
            "flatPath": "v2alpha1/tenants/{tenantsId}",
            "httpMethod": "GET",
            "parameters": {
              "name": {
                "description": "The name of the tenant to retrieve.\nfor example \"tenants\/111111\".",
                "location": "path",
                "required": true,
                "pattern": "^tenants\/[^\/]+$",
                "type": "string"
              }
            },
            "parameterOrder": [
              "name"
            ],
            "response": {
              "$ref": "Tenant"
            },
            "description": "Retrieves the specified tenant."
          },
          "patch": {
            "id": "cloudprofile.tenants.patch",
            "path": "v2alpha1/{+name}",
            "flatPath": "v2alpha1/tenants/{tenantsId}",
            "httpMethod": "PATCH",
            "parameters": {
              "name": {
                "description": "Required during tenant update.\n\nThe resource name for a tenant. This is generated by the service when a\ntenant is created, for example,\n\"\/tenants\/0000aaaa-1111-bbbb-2222-cccc3333dddd\"",
                "location": "path",
                "required": true,
                "pattern": "^tenants\/[^\/]+$",
                "type": "string"
              },
              "updateMask": {
                "description": "Required. A field mask to specify the tenant fields to update.\nAn empty field mask will perform a full update.\nValid values are:\n\n* clientProvidedId (deprecated, use externalId)\n* externalId\n* learningType",
                "location": "query",
                "type": "string",
                "format": "google-fieldmask"
              }
            },
            "parameterOrder": [
              "name"
            ],
            "request": {
              "$ref": "Tenant"
            },
            "response": {
              "$ref": "Tenant"
            },
            "description": "Updates the specified tenant. Tenant names and external names cannot be\nupdated. To update those fields, delete the tenant, and then re-create it.\nReturns the updated tenant."
          },
          "delete": {
            "id": "cloudprofile.tenants.delete",
            "path": "v2alpha1/{+name}",
            "flatPath": "v2alpha1/tenants/{tenantsId}",
            "httpMethod": "DELETE",
            "parameters": {
              "name": {
                "description": "Required.\n\nResource name of the tenant to be deleted.\nfor example \"tenants\/foo\".",
                "location": "path",
                "required": true,
                "pattern": "^tenants\/[^\/]+$",
                "type": "string"
              }
            },
            "parameterOrder": [
              "name"
            ],
            "response": {
              "$ref": "GoogleProtobuf__Empty"
            },
            "description": "Deletes the specified tenant. All profiles of the specified tenant are also\ndeleted."
          },
          "search": {
            "id": "cloudprofile.tenants.search",
            "path": "v2alpha1/{+tenantName}:search",
            "flatPath": "v2alpha1/tenants/{tenantsId}:search",
            "httpMethod": "POST",
            "parameters": {
              "tenantName": {
                "description": "Required.\n\nTenant name as a search filter.\nfor example \"tenants\/foo\".",
                "location": "path",
                "required": true,
                "pattern": "^tenants\/[^\/]+$",
                "type": "string"
              }
            },
            "parameterOrder": [
              "tenantName"
            ],
            "request": {
              "$ref": "SearchProfilesRequest"
            },
            "response": {
              "$ref": "SearchProfilesResponse"
            },
            "description": "Searches for profiles within a tenant.\n\nFor example, search by raw queries \"software engineer in Mountain View\" or\nsearch by structured filters (location filter, education filter, etc.).\n\nSee SearchProfilesRequest for more information."
          },
          "recommend": {
            "id": "cloudprofile.tenants.recommend",
            "path": "v2alpha1/{+tenantName}:recommend",
            "flatPath": "v2alpha1/tenants/{tenantsId}:recommend",
            "httpMethod": "POST",
            "parameters": {
              "tenantName": {
                "description": "Required.\n\nRecommended profiles are from this tenant.\nfor example \"tenants\/foo\".",
                "location": "path",
                "required": true,
                "pattern": "^tenants\/[^\/]+$",
                "type": "string"
              }
            },
            "parameterOrder": [
              "tenantName"
            ],
            "request": {
              "$ref": "RecommendProfilesRequest"
            },
            "response": {
              "$ref": "RecommendProfilesResponse"
            },
            "description": "Recommend profiles within a tenant based on a given job.\n\nThis method is deprecated. Please contact us before using it."
          }
        }
        ,
        "resources": {
          "profiles": {
            "methods": {
              "list": {
                "id": "cloudprofile.tenants.profiles.list",
                "path": "v2alpha1/{+parent}/profiles",
                "flatPath": "v2alpha1/tenants/{tenantsId}/profiles",
                "httpMethod": "GET",
                "parameters": {
                  "parent": {
                    "description": "Required.\n\nThe name of the tenant the profile is associated.",
                    "location": "path",
                    "required": true,
                    "pattern": "^tenants\/[^\/]+$",
                    "type": "string"
                  },
                  "pageToken": {
                    "description": "Optional.\n\nThe token that specifies the current offset (that is, starting result).\nPlease set the value to ListProfilesResponse.next_page_token for\ncontinuing the list.",
                    "location": "query",
                    "type": "string"
                  },
                  "pageSize": {
                    "description": "Optional.\n\nThe maximum number of profiles to be returned, at most 100.\nDefault is 100 unless a positive number smaller than 100 is specified.",
                    "location": "query",
                    "type": "integer",
                    "format": "int32"
                  },
                  "fieldMask": {
                    "description": "Optional.\n\nA field mask to specify the profile fields to be listed in result.\nAn empty field mask will list all fields.\nValid values are:\n\n* name",
                    "location": "query",
                    "type": "string",
                    "format": "google-fieldmask"
                  }
                },
                "parameterOrder": [
                  "parent"
                ],
                "response": {
                  "$ref": "ListProfilesResponse"
                },
                "description": "Lists profiles for a specific tenant. The order is unspecified."
              },
              "create": {
                "id": "cloudprofile.tenants.profiles.create",
                "path": "v2alpha1/{+parent}/profiles",
                "flatPath": "v2alpha1/tenants/{tenantsId}/profiles",
                "httpMethod": "POST",
                "parameters": {
                  "parent": {
                    "description": "Required.\n\nThe name of the tenant this profile belongs to.",
                    "location": "path",
                    "required": true,
                    "pattern": "^tenants\/[^\/]+$",
                    "type": "string"
                  }
                },
                "parameterOrder": [
                  "parent"
                ],
                "request": {
                  "$ref": "Profile"
                },
                "response": {
                  "$ref": "Profile"
                },
                "description": "Creates and returns a new profile."
              },
              "get": {
                "id": "cloudprofile.tenants.profiles.get",
                "path": "v2alpha1/{+name}",
                "flatPath": "v2alpha1/tenants/{tenantsId}/profiles/{profilesId}",
                "httpMethod": "GET",
                "parameters": {
                  "name": {
                    "description": "Required.\n\nResource name of the profile to get.\nfor example \"tenants\/foo\/profiles\/bar\".",
                    "location": "path",
                    "required": true,
                    "pattern": "^tenants\/[^\/]+\/profiles\/[^\/]+$",
                    "type": "string"
                  }
                },
                "parameterOrder": [
                  "name"
                ],
                "response": {
                  "$ref": "Profile"
                },
                "description": "Gets the specified profile."
              },
              "patch": {
                "id": "cloudprofile.tenants.profiles.patch",
                "path": "v2alpha1/{+name}",
                "flatPath": "v2alpha1/tenants/{tenantsId}/profiles/{profilesId}",
                "httpMethod": "PATCH",
                "parameters": {
                  "name": {
                    "description": "Required during profile update.\n\nResource name assigned to a profile by the API.\nFor example, \"\/tenants\/foo\/profiles\/bar\" (This profile belongs to tenant\n\"tenants\/foo\").",
                    "location": "path",
                    "required": true,
                    "pattern": "^tenants\/[^\/]+\/profiles\/[^\/]+$",
                    "type": "string"
                  },
                  "updateMask": {
                    "description": "Required. A field mask to specify the profile fields to update.\nAn empty field mask will perform a full update.\nValid values are:\n\n* clientProvidedId (deprecated, use externalId)\n* externalId\n* source\n* url (deprecated, use uri)\n* uri\n* isHirable\n* createTime\n* updateTime\n* resumeHrxml\n* personNames\n* postalAddresses (deprecated, use addresses)\n* addresses\n* emailAddresses\n* phoneNumbers\n* personalUrls (deprecated, use personalUris)\n* personalUris\n* additionalContactInfo\n* employmentRecords\n* educationRecords\n* skills\n* projects\n* publications\n* patents\n* licencesAndCertifications (deprecated, use certifications)\n* certifications\n* jobApplications\n* recruitingNotes\n* customAttributes",
                    "location": "query",
                    "type": "string",
                    "format": "google-fieldmask"
                  }
                },
                "parameterOrder": [
                  "name"
                ],
                "request": {
                  "$ref": "Profile"
                },
                "response": {
                  "$ref": "Profile"
                },
                "description": "Updates the specified profile and returns the updated result."
              },
              "delete": {
                "id": "cloudprofile.tenants.profiles.delete",
                "path": "v2alpha1/{+name}",
                "flatPath": "v2alpha1/tenants/{tenantsId}/profiles/{profilesId}",
                "httpMethod": "DELETE",
                "parameters": {
                  "name": {
                    "description": "Required.\n\nResource name of the profile to be deleted.\nfor example \"tenants\/22222\/profiles\/111111\".",
                    "location": "path",
                    "required": true,
                    "pattern": "^tenants\/[^\/]+\/profiles\/[^\/]+$",
                    "type": "string"
                  }
                },
                "parameterOrder": [
                  "name"
                ],
                "response": {
                  "$ref": "GoogleProtobuf__Empty"
                },
                "description": "Deletes the specified profile."
              }
            }
          }
        }
      },
      "resumes": {
        "methods": {
          "parse": {
            "id": "cloudprofile.resumes.parse",
            "path": "v2alpha1/resumes:parse",
            "flatPath": "v2alpha1/resumes:parse",
            "httpMethod": "POST",
            "parameters": {
            },
            "parameterOrder": [
            ],
            "request": {
              "$ref": "ParseResumeRequest"
            },
            "response": {
              "$ref": "ParseResumeResponse"
            },
            "description": "Parses a resume into a Profile. The API will attempt to fill out the\nfollowing profile fields:\n\n* personName\n* postalAddress\n* emailAddress\n* personNumbers\n* personalUrls\n* employmentRecords\n* educationRecords\n* skills\n\nAPI won't save the resume or profile. To create a profile from this\nresume, clients need to call CreateProfile method again with the profile\nreturned.\n\nAPI supports the following list of formats:\n\n* PDF\n* TXT\n* DOC\n* RTF\n* DOCX\n\nIf the input format is not supported, the API returns BAD_REQUEST error."
          }
        }
      }
    },
    "basePath": ""
  }